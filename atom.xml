<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miser 胡言</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://miser.github.io/"/>
  <updated>2019-01-18T19:30:11.959Z</updated>
  <id>https://miser.github.io/</id>
  
  <author>
    <name>Miser</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Egg Cluster 简单介绍</title>
    <link href="https://miser.github.io/2019/01/18/egg-cluster/"/>
    <id>https://miser.github.io/2019/01/18/egg-cluster/</id>
    <published>2019-01-18T13:48:01.464Z</published>
    <updated>2019-01-18T19:30:11.959Z</updated>
    
    <content type="html"><![CDATA[<p>如果不清楚什么是Egg.js，希望能移步到它的<a href="https://eggjs.org" target="_blank" rel="noopener">官网</a>简单看下。另外说它是<strong>约定大于配置</strong>的话，我只能说你真的不了解它，或者说不了解框架，哪个框架没有约定？毕竟没有规矩不成方圆，何况是逻辑性的程序呢？官方列出的特性如下：</p><blockquote><p>1.提供基于 Egg <a href="https://eggjs.org/zh-cn/advanced/framework.html" target="_blank" rel="noopener">定制上层框架</a> 的能力<br>2.高度可扩展的<a href="https://eggjs.org/zh-cn/basics/plugin.html" target="_blank" rel="noopener">插件机制</a><br>3.内置<a href="https://eggjs.org/zh-cn/advanced/cluster-client.html" target="_blank" rel="noopener">多进程管理</a><br>4.基于 <a href="http://koajs.com/" target="_blank" rel="noopener">Koa</a> 开发，性能优异<br>5.框架稳定，测试覆盖率高<br>6.<a href="https://eggjs.org/zh-cn/tutorials/progressive.html" target="_blank" rel="noopener">渐进式开发</a></p></blockquote><p>第1条，它有那么Koa也有啊。第2条，它有，难道Koa、Express等就没有嘛？第4条，更好的补充了Koa不是更好吗？第5条，难道别的框架就不稳定了？第6条，前端鼓吹渐进式、后端也鼓吹，那究竟什么是渐进式呢？</p><p>在我看来最吸引我的是第3条，<strong>内置多进程管理</strong>，这个在其它主流nodejs框架中是稀缺的特性，此文就简单聊聊它。</p><a id="more"></a><h3 id="从源码慢慢了解"><a href="#从源码慢慢了解" class="headerlink" title="#从源码慢慢了解"></a><strong>#从源码慢慢了解</strong></h3><ul><li><strong>egg-core</strong>: 定义了一个<strong>EggCore</strong>类，它继承KoaApplication，也就是特性中提到的第4条 <em>基于Koa开发，性能优异</em></li><li><strong>egg</strong>: 定义了一个继承于EggCore的<strong>EggApplication</strong>类，并且Application和Agent分别继承于EggApplication</li><li><strong>egg-cluster</strong>: 这个类库主要就是做<strong>多进程管理</strong>的工作</li></ul><p><em>egg-cluster让Egg.js变得与众不同</em>，看看它做了什么。</p><h3 id="egg-cluster"><a href="#egg-cluster" class="headerlink" title="egg-cluster"></a>egg-cluster</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg-cluster index.js 唯一对外暴露的接口 startCluster</span></span><br><span class="line">exports.startCluster = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options, callback</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">new</span> Master(options).ready(callback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>egg-cluster就是靠Master在管理egg里面的angent和workers（application）,另外它也是它们之间通信的中转站，看下官网给出的图解：<br><img src="/images/egg-cluster/1.jpg" alt="Master-Agent-Works 模型"></p><h3 id="Agent-Works怎么启动的？"><a href="#Agent-Works怎么启动的？" class="headerlink" title="Agent-Works怎么启动的？"></a>Agent-Works怎么启动的？</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Master</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventEmitter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.workerManager = <span class="hljs-keyword">new</span> Manager();</span><br><span class="line">    <span class="hljs-keyword">this</span>.messenger = <span class="hljs-keyword">new</span> Messenger(<span class="hljs-keyword">this</span>);</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>.once(<span class="hljs-string">'agent-start'</span>, <span class="hljs-keyword">this</span>.forkAppWorkers.bind(<span class="hljs-keyword">this</span>));</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">        detectPort(<span class="hljs-function">(<span class="hljs-params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 试着找个可以用的port</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.options.clusterPort = port;</span><br><span class="line">            <span class="hljs-comment">// 启动 agent</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.forkAgentWorker();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    forkAgentWorker() &#123;</span><br><span class="line">        <span class="hljs-comment">// ... childprocess.fork egg-cluster/lib/agent_worker.js</span></span><br><span class="line">        <span class="hljs-keyword">const</span> agentWorker = childprocess.fork(<span class="hljs-keyword">this</span>.getAgentWorkerFile(), args, opt);</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    forkAppWorkers() &#123;</span><br><span class="line">        <span class="hljs-comment">// 将需要数量的 worker 一个个创建出来</span></span><br><span class="line">        <span class="hljs-comment">// cluster.fork egg-cluster/lib/agent_worker.js 它们将监听同一个服务端口</span></span><br><span class="line">        <span class="hljs-comment">// 创建 http或https服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>agent_worker.js主要逻辑就是创建egg类库里的Agent类，完成后发”agent-start”给父进程，触发Master的订阅创建Workers</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg-cluster/lib/agent_worker.js</span></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">process.send(&#123; <span class="hljs-attr">action</span>: <span class="hljs-string">'agent-start'</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">'master'</span> &#125;); </span><br><span class="line"><span class="hljs-comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="Agent-Works怎么通信呢-IPC"><a href="#Agent-Works怎么通信呢-IPC" class="headerlink" title="Agent-Works怎么通信呢? (IPC)"></a>Agent-Works怎么通信呢? (<a href="https://eggjs.org/zh-cn/core/cluster-and-ipc.html" target="_blank" rel="noopener">IPC</a>)</h3><ul><li>在Master中维护着一个Messenger（egg-cluster/lib/utils/messenger.js）实例</li><li>EggApplication中维护了另一个Messenger（egg/lib/core/messenger.js）实例</li></ul><p>由于Agent和Worker(Application)都继承EggApplication，它们调用Messenger的时候会send到创建它们的Master里，然后Master再根据传过来的参数send给不同的Agent或Worker，Master里的转发逻辑如下。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg-cluster master.js</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Master</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventEmitter</span> </span>&#123;</span><br><span class="line">    forkAppWorkers() &#123;</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">        cluster.on(<span class="hljs-string">'fork'</span>, worker =&gt; &#123;</span><br><span class="line">            <span class="hljs-comment">// ...</span></span><br><span class="line">            worker.on(<span class="hljs-string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">'string'</span>) msg = &#123; <span class="hljs-attr">action</span>: msg, <span class="hljs-attr">data</span>: msg &#125;;</span><br><span class="line">            msg.from = <span class="hljs-string">'app'</span>;</span><br><span class="line">            <span class="hljs-keyword">this</span>.messenger.send(msg);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-comment">// ...</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    forkAgentWorker() &#123;</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">        agentWorker.on(<span class="hljs-string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">'string'</span>) msg = &#123; <span class="hljs-attr">action</span>: msg, <span class="hljs-attr">data</span>: msg &#125;;</span><br><span class="line">          msg.from = <span class="hljs-string">'agent'</span>;</span><br><span class="line">          <span class="hljs-keyword">this</span>.messenger.send(msg);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg messenger.js</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Messenger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventEmitter</span> </span>&#123;</span><br><span class="line">    send(action, data, to) &#123;</span><br><span class="line">        sendmessage(process, &#123;</span><br><span class="line">          action,</span><br><span class="line">          data,</span><br><span class="line">          to,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一条信息必定有<strong>from</strong>…<strong>to</strong>…信息</p><p><img src="/images/egg-cluster/2.jpg" alt="Master-Agent-Works 通信模型"></p><h3 id="官网里提到的“多进程研发模式增强”"><a href="#官网里提到的“多进程研发模式增强”" class="headerlink" title="官网里提到的“多进程研发模式增强”"></a>官网里提到的“<a href="https://eggjs.org/zh-cn/advanced/cluster-client.html" target="_blank" rel="noopener">多进程研发模式增强</a>”</h3><p><img src="/images/egg-cluster/3.jpg" alt="一个程序运行n个worker连m个远程服务"></p><ul><li>n * m 个连接导致大量连接资源“浪费”</li><li>减少Master转发带来的额外性能消耗</li><li>另外，egg的作者们担心不当的IPC通信把Master搞挂，从而整个服务异常</li></ul><p>所以还有一种socket通信方式（使用了另一个库<a href="https://github.com/node-modules/cluster-client" target="_blank" rel="noopener">cluster-client</a>）：</p><ul><li>将Agent作为Leader，从服务端获取数据，并做缓存</li><li>将Worker作为Follower，订阅Agent获取的数据</li></ul><p>典型的场景有，Leader（Agent）获取disconf里的配置、获取euerka里的服务等，Follower（Worker）使用这些配置和服务。</p><p><img src="/images/egg-cluster/4.jpg" alt="socket通信"></p><h3 id="cluster-client-源码一瞥"><a href="#cluster-client-源码一瞥" class="headerlink" title="cluster-client 源码一瞥"></a>cluster-client 源码一瞥</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClusterClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">async</span> [init]() &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> name = <span class="hljs-keyword">this</span>.options.name;</span><br><span class="line">        <span class="hljs-keyword">const</span> port = <span class="hljs-keyword">this</span>.options.port;</span><br><span class="line">        <span class="hljs-keyword">let</span> server;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.options.isLeader === <span class="hljs-literal">true</span>) &#123;</span><br><span class="line">          server = <span class="hljs-keyword">await</span> ClusterServer.create(name, port);</span><br><span class="line">          <span class="hljs-keyword">if</span> (!server) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`create "<span class="hljs-subst">$&#123;name&#125;</span>" leader failed, the port:<span class="hljs-subst">$&#123;port&#125;</span> is occupied by other`</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.options.isLeader === <span class="hljs-literal">false</span>) &#123;</span><br><span class="line">          <span class="hljs-comment">// wait for leader active</span></span><br><span class="line">          <span class="hljs-keyword">await</span> ClusterServer.waitFor(port, <span class="hljs-keyword">this</span>.options.maxWaitTime);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">          debug(<span class="hljs-string">'[ClusterClient:%s] init cluster client, try to seize the leader on port:%d'</span>, name, port);</span><br><span class="line">          server = <span class="hljs-keyword">await</span> ClusterServer.create(name, port);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (server) &#123;</span><br><span class="line">          <span class="hljs-keyword">this</span>[innerClient] = <span class="hljs-keyword">new</span> Leader(<span class="hljs-built_in">Object</span>.assign(&#123; server &#125;, <span class="hljs-keyword">this</span>.options));</span><br><span class="line">          debug(<span class="hljs-string">'[ClusterClient:%s] has seized port %d, and serves as leader client.'</span>, name, port);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">          <span class="hljs-keyword">this</span>[innerClient] = <span class="hljs-keyword">new</span> Follower(<span class="hljs-keyword">this</span>.options);</span><br><span class="line">          debug(<span class="hljs-string">'[ClusterClient:%s] gives up seizing port %d, and serves as follower client.'</span>, name, port);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>port数值就是上文开始处通过detectPort获取的clusterPort数值</li><li>然后net.create 创建TCP服务，之后所有的Leader和Follower都会走它提供的服务进行socket通信</li><li>Leader获取数据触发publish，传给订阅的Follower中</li></ul><p>cluster-client源码是很复杂的，中间还涉及到专递数据的格式，进行数据包的解析等等，这边就不扩展介绍了，有兴趣可以自己撸源码。</p><h3 id="总结"><a href="#总结" class="headerlink" title="#总结"></a><strong>#总结</strong></h3><p>Egg.js的进程管理和通信自然不会像文章里说的那么简单，但大体如此。弄清楚它们的工作原理对开发程序、插件、中间件有很大的帮助，个人认为这个才是这个框架的精髓之处。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果不清楚什么是Egg.js，希望能移步到它的&lt;a href=&quot;https://eggjs.org&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;官网&lt;/a&gt;简单看下。另外说它是&lt;strong&gt;约定大于配置&lt;/strong&gt;的话，我只能说你真的不了解它，或者说不了解框架，哪个框架没有约定？毕竟没有规矩不成方圆，何况是逻辑性的程序呢？官方列出的特性如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;1.提供基于 Egg &lt;a href=&quot;https://eggjs.org/zh-cn/advanced/framework.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;定制上层框架&lt;/a&gt; 的能力&lt;br&gt;2.高度可扩展的&lt;a href=&quot;https://eggjs.org/zh-cn/basics/plugin.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;插件机制&lt;/a&gt;&lt;br&gt;3.内置&lt;a href=&quot;https://eggjs.org/zh-cn/advanced/cluster-client.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;多进程管理&lt;/a&gt;&lt;br&gt;4.基于 &lt;a href=&quot;http://koajs.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Koa&lt;/a&gt; 开发，性能优异&lt;br&gt;5.框架稳定，测试覆盖率高&lt;br&gt;6.&lt;a href=&quot;https://eggjs.org/zh-cn/tutorials/progressive.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;渐进式开发&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;第1条，它有那么Koa也有啊。第2条，它有，难道Koa、Express等就没有嘛？第4条，更好的补充了Koa不是更好吗？第5条，难道别的框架就不稳定了？第6条，前端鼓吹渐进式、后端也鼓吹，那究竟什么是渐进式呢？&lt;/p&gt;
&lt;p&gt;在我看来最吸引我的是第3条，&lt;strong&gt;内置多进程管理&lt;/strong&gt;，这个在其它主流nodejs框架中是稀缺的特性，此文就简单聊聊它。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://miser.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>Vue Component 继承与复用</title>
    <link href="https://miser.github.io/2018/11/17/vue-component-extends/"/>
    <id>https://miser.github.io/2018/11/17/vue-component-extends/</id>
    <published>2018-11-17T07:45:00.000Z</published>
    <updated>2018-11-20T09:24:26.765Z</updated>
    
    <content type="html"><![CDATA[<p>在做Web前端开发的时候会有大量的页面复用的地方，从UI布局到JS的逻辑。早年做后端开发的时候，我们通常可以通过面向对象的编程法式，使用抽象类、接口等等，那么现在前端是否也可以如此呢？</p><p>答案自然是肯定的，所以我们找工作面试的时候常被问及关于JS继承的问题，随之ES6出现了期盼已久的Class，一切都在往更为成熟的方向发展。接下我们以<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>为例，看看怎么去做继承这件事情。</p><a id="more"></a><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>简单实现2个列表页面，一个是管理员列表、一个用户列表</p><p><img src="/images/vue-component-extends/1.jpg" alt="图一 管理员列表页面，筛选有用户名、状态，列表有用户名、手机号码、状态、&quot;修改&quot;操作按钮"></p><p><img src="/images/vue-component-extends/2.jpg" alt="图二 用户页列表面有，筛选有用户名、手机号、状态，列表有用户名、手机号码、创建时间、状态、&quot;删除&quot;操作按钮"></p><p>从上可以看出2个页面整体页面结构相同，在具体细节上会有些少于不同，第一反应就是使用前文提到的继承之类的东西去实现它。<br><img src="/images/vue-component-extends/3.jpg" alt="图三 简单的继承图"></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>Vue 版本 2.5</p></li><li><p><a href="http://element.eleme.io/" target="_blank" rel="noopener">Element-UI</a> （仅仅使得Demo看上去不那么丑）</p></li><li><p><a href="https://github.com/miser/vue-compoent-extends-experiment" target="_blank" rel="noopener">测试代码</a></p></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>通过vue cli工具创建项目<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-component-extedns</span><br></pre></td></tr></table></figure></p><p>此刻我们可以拥有一个Vue的默认开发目录结构和代码，我开始对其进行修改</p><p><strong>引入Element-UI</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// main.js </span></span><br><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">'element-ui'</span></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="hljs-string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>在components目录下分别创建ListPageAbstract.vue、AdminPageAbstract.vue、ButtonClick.vue和Title.vue</p><p><em>下面代码很多可以先跳过，看后续的介绍</em></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">// ButtonClick.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">plain</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"click"</span>&gt;</span></span><br><span class="line">    &#123;&#123; label &#125;&#125;</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    props: [<span class="hljs-string">'click'</span>, <span class="hljs-string">'label'</span>, <span class="hljs-string">'opt'</span>],</span></span><br><span class="line"><span class="hljs-undefined">    mounted () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ButtonClick mounted'</span>)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Title.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">  props: [<span class="hljs-string">'title'</span>]</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// ListPageAbstract.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">Title</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"title"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config &amp;&amp; config.filter"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">'form'</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">"filterForm"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.filter.conditions.indexOf('name') &gt;= 0"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"名字"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"name"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterForm.name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.filter.conditions.indexOf('phone') &gt;= 0"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"手机"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"date"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterForm.date"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.filter.conditions.indexOf('date') &gt;= 0"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"时间"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"date"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterForm.date"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.filter.conditions.indexOf('status') &gt;= 0"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"状态"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"status"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterForm.status"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请选择"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"option in statusOptions"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"option.text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"option.value"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"option.value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- &lt;div&gt;</span></span><br><span class="line"><span class="hljs-comment">        &lt;slot name="filter-slot"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="hljs-comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"config.filter.action"</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config"</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"list"</span> &gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in config.table.column"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">:prop</span>=<span class="hljs-string">"item.key"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"item.label"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.table.action"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"config.table.action.headerLabel"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">:click</span>=<span class="hljs-string">"config.table.action.click.bind(null, scope.row)"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"config.table.action.label"</span> <span class="hljs-attr">:opt</span>=<span class="hljs-string">"config.table.action"</span> /&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> Button <span class="hljs-keyword">from</span> <span class="hljs-string">'./ButtonClick.vue'</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> Title <span class="hljs-keyword">from</span> <span class="hljs-string">'./Title.vue'</span></span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">  components: &#123; Button, Title &#125;,</span></span><br><span class="line"><span class="hljs-javascript">  data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">      filterForm: &#123; &#125;,</span></span><br><span class="line"><span class="hljs-undefined">      statusOptions: [],</span></span><br><span class="line"><span class="hljs-undefined">      list: [],</span></span><br><span class="line"><span class="hljs-javascript">      title: <span class="hljs-literal">null</span>,</span></span><br><span class="line"><span class="hljs-javascript">      config: <span class="hljs-literal">null</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-javascript">  mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">this</span>.config = <span class="hljs-keyword">this</span>.createConfig()</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">this</span>.fetchOptions()</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">this</span>.fetchData()</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">    createConfig () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> config = &#123;&#125;</span></span><br><span class="line"><span class="hljs-undefined">      config.filter = &#123;</span></span><br><span class="line"><span class="hljs-javascript">        conditions: [ <span class="hljs-string">'name'</span>, <span class="hljs-string">'status'</span> ],</span></span><br><span class="line"><span class="hljs-javascript">        action: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.fetchData(<span class="hljs-keyword">this</span>.filterForm)</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-undefined">      config.table = &#123;</span></span><br><span class="line"><span class="hljs-undefined">        column: [</span></span><br><span class="line"><span class="hljs-javascript">          &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'name'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">'用户名'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">          &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'phone'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">'手机号码'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">          &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'status'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">'状态'</span> &#125;</span></span><br><span class="line"><span class="hljs-undefined">        ],</span></span><br><span class="line"><span class="hljs-undefined">        action: &#123;</span></span><br><span class="line"><span class="hljs-javascript">          headerLabel: <span class="hljs-string">'操作'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          label: <span class="hljs-string">'修改'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          click: <span class="hljs-keyword">this</span>.editRow</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> config</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    fetchOptions () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.statusOptions = [</span></span><br><span class="line"><span class="hljs-javascript">        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'status1'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'status2'</span> &#125;</span></span><br><span class="line"><span class="hljs-undefined">      ]</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> fetchData () &#123; &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    editRow (item) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`update data =&gt; <span class="hljs-subst">$&#123;item.name&#125;</span>`</span>)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">.title &#123;</span></span><br><span class="line"><span class="hljs-undefined">  color: red;</span></span><br><span class="line"><span class="hljs-undefined">  margin-bottom: 20px;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// AdminListPage.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> ListPageAbstract <span class="hljs-keyword">from</span> <span class="hljs-string">'./ListPageAbstract'</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 模拟ajax请求</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 仅做了名字的模糊查询，其他参数忽略</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span> (<span class="hljs-params">opt</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">let</span> list = [</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Admin Peter'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'313141414'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-10-10'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Admin Marry'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'123931873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status2'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-11-11'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Admin Sue'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'342391873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-01-01'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Admin Join'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'143391873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-12-12'</span> &#125;</span></span><br><span class="line"><span class="hljs-undefined">    ]</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">if</span> (opt.name) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      list = list.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.name.match(opt.name))</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">      resolve(list)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 1000)</span></span><br><span class="line"><span class="hljs-undefined">  &#125;)</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">  extends: ListPageAbstract,</span></span><br><span class="line"><span class="hljs-undefined">  data () &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">      title: <span class="hljs-string">'管理员列表'</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">    fetchOptions () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      ListPageAbstract.methods.fetchOptions.call(<span class="hljs-keyword">this</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'to do other thing'</span>)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> fetchData () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> list = <span class="hljs-keyword">await</span> search(<span class="hljs-keyword">this</span>.filterForm)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.list = list</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新页面就能呈现上述图一展示的样子和功能了。那么洋洋洒洒这么多代码做了些什么呢？</p><ul><li>Title.vue 用于显示页面的标题（之后我们用它测试下继承于ListPageAbstract.vue的组件如何重写css的问题）</li><li>ButtonClick.vue 展示操作按钮和执行操作事件</li><li>ListPageAbstract.vue 抽象的列表组件，这里是作为例子，具体方法定义的粗细程度根据具体情况调节</li><li>AdminListPage.vue 管理员列表的具体组件</li></ul><p>AdminListPage通过<a href="https://cn.vuejs.org/v2/api/#extends" target="_blank" rel="noopener">extends</a>继承了ListPageAbstract的模板、样式和其JS代码，通过部分的重写或完善，很容易的实现了一个页面，看上去很美好。那么新的问题来了，我们也发现ListPageAbstract定义筛选的内容是有限的，目前仅仅有name、phone、date和status，如果想扩展该怎么办呢？用过Vue的朋友或许此刻会想到<a href="https://cn.vuejs.org/v2/api/#slot" target="_blank" rel="noopener">Slot</a>，接下来我们注释掉ListPageAbstract.vue里关于<strong>filter-slot</strong>的注释，并为AdminListPage.vue添加相关slot代码。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// AdminListPage.vue add template </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"filter-slot"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"filter-slot"</span>&gt;</span></span><br><span class="line">    other input filter</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br></pre></td></tr></table></figure><p>刷新页面，页面仅仅留下了“other input filter”一串字符串，并没有实现我们的需求；也有人提出其它修改意见</p><p><img src="/images/vue-component-extends/4.jpg" alt="图四 除了“other input filter”其它都没了"></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// AdminListPage.vue </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"filter-slot"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">Page</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"filter-slot"</span>&gt;</span></span><br><span class="line">      other input filter</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">Page</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">export default &#123;</span><br><span class="line">  extends: ListPageAbstract,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Page: ListPageAbstract,</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然页面UI层是预期显示了，但是如果对ListPageAbstract的mounted方法打断点会发现，它被执行了2次，因为被实例化了2次，并且页面上的元素事件使用的是ListPageAbstract里的，而不是我们在Admin里面重写的，显然方法并不可行。关于Vue模板级别的继承扩展问题在github上有很多的吐槽，但并没有列为未来的新feature <a href="https://github.com/vuejs/vue/issues/6811" target="_blank" rel="noopener">#6811</a></p><p>既然我们讨论这个问题，自然也是可以解决的，在这我们不以filter查询条件的多少为例子，我们以更为简单的按钮为例，在列表里每一行的最后有一个“修改”按钮，而然我们在UserListPage里面，我们希望它变成一个“删除”按钮，并弹出确实删除的提示。新增ButtonPop.vue和UserListPage.vue</p><p><em>又是很多代码，没兴趣可跳过</em></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">// ButtonPop.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">plain</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span></span></span><br><span class="line"><span class="hljs-tag">      @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"dialogVisible = true"</span>&gt;</span>&#123;&#123; label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">title</span>=<span class="hljs-string">"提示"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">"dialogVisible"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">width</span>=<span class="hljs-string">"30%"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>确认删除数据吗？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"footer"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dialog-footer"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"dialogVisible = false"</span>&gt;</span>取 消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"deleteInfo"</span>&gt;</span>确 定<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">  props: [<span class="hljs-string">'click'</span>, <span class="hljs-string">'label'</span>, <span class="hljs-string">'opt'</span>],</span></span><br><span class="line"><span class="hljs-undefined">  data () &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">      dialogVisible: <span class="hljs-literal">false</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  mounted () &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ButtonPop mounted'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  methods: &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> deleteInfo () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.click()</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.dialogVisible = <span class="hljs-literal">false</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// UserListPage.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> ListPageAbstract <span class="hljs-keyword">from</span> <span class="hljs-string">'./ListPageAbstract.vue'</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> Button <span class="hljs-keyword">from</span> <span class="hljs-string">'./ButtonPop.vue'</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 模拟ajax请求</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 仅做了名字的模糊查询，其他参数忽略</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span> (<span class="hljs-params">opt</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">let</span> list = [</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'User Peter'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'313141414'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-10-10'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'User Marry'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'123931873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status2'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-11-11'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'User Sue'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'342391873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-01-01'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'User Join'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'143391873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-12-12'</span> &#125;</span></span><br><span class="line"><span class="hljs-undefined">    ]</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">if</span> (opt.name) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      list = list.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.name.match(opt.name))</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">      resolve(list)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 1000)</span></span><br><span class="line"><span class="hljs-undefined">  &#125;)</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">  extends: ListPageAbstract,</span></span><br><span class="line"><span class="hljs-undefined">  components: &#123; Button &#125;,</span></span><br><span class="line"><span class="hljs-javascript">  data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> &#123;&#125; &#125;,</span></span><br><span class="line"><span class="hljs-javascript">  mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">this</span>.title = <span class="hljs-string">'用户列表'</span></span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">    createConfig () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 用户名、创建时间、手机号、状态</span></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> config = ListPageAbstract.methods.createConfig.call(<span class="hljs-keyword">this</span>)</span></span><br><span class="line"><span class="hljs-javascript">      config.filter.conditions.splice(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'phone'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> table = config.table</span></span><br><span class="line"><span class="hljs-javascript">      table.column.push(&#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'date'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">'时间'</span> &#125;)</span></span><br><span class="line"><span class="hljs-undefined">      table.action = &#123;</span></span><br><span class="line"><span class="hljs-javascript">        headerLabel: <span class="hljs-string">'操作'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        label: <span class="hljs-string">'删除'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        click: <span class="hljs-keyword">this</span>.deleteRow</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> config</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> fetchData () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> list = <span class="hljs-keyword">await</span> search(<span class="hljs-keyword">this</span>.filterForm)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.list = list</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    deleteRow (item) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`delete date: <span class="hljs-subst">$&#123;item.name&#125;</span>`</span>)</span></span><br><span class="line"><span class="hljs-javascript">        setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.list.splice(<span class="hljs-keyword">this</span>.list.indexOf(item), <span class="hljs-number">1</span>)</span></span><br><span class="line"><span class="hljs-undefined">          resolve()</span></span><br><span class="line"><span class="hljs-undefined">        &#125;, 1000)</span></span><br><span class="line"><span class="hljs-undefined">      &#125;)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">.title &#123;</span></span><br><span class="line"><span class="hljs-undefined">  margin-bottom: 50px;</span></span><br><span class="line"><span class="hljs-undefined">  color: blue;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在修改下App.vue里面的Page引用，从AdminListPage改为UserListPage</p><p>刷新页面，就和图二的样子一样了。整个代码并不复杂，核心就是</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">components: &#123; Button &#125;</span><br></pre></td></tr></table></figure><p>它将父类的Button（ButtonClick）替换成了User页面需要的ButtonPop，实现了扩展。其实Filter查询条件也可以，只要我们做好组件的抽取等就行。</p><p><strong>阅读Vue的源码时候，在Vue组件实例化的过程中，会有很多对options的深层次merge，使得我们可以通过上诉方法实现对父组件的扩展。</strong></p><p>另外，细心的朋友观察代码或页面也发现“用户列表”4个字的颜色从红色变成了蓝色，与下面列表的间距也增大了不少，在User页面的style标签里就能很容易修改父组件的css样式。</p><p>在Vue中，mixin、slot都是非常好用的工具，或许我们有时候也能改变思路，通过组件的替换构建出一个更为容易扩展的框架。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做Web前端开发的时候会有大量的页面复用的地方，从UI布局到JS的逻辑。早年做后端开发的时候，我们通常可以通过面向对象的编程法式，使用抽象类、接口等等，那么现在前端是否也可以如此呢？&lt;/p&gt;
&lt;p&gt;答案自然是肯定的，所以我们找工作面试的时候常被问及关于JS继承的问题，随之ES6出现了期盼已久的Class，一切都在往更为成熟的方向发展。接下我们以&lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue&lt;/a&gt;为例，看看怎么去做继承这件事情。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://miser.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>前端错误捕获提交错误日志</title>
    <link href="https://miser.github.io/2018/10/23/js-capture-error/"/>
    <id>https://miser.github.io/2018/10/23/js-capture-error/</id>
    <published>2018-10-23T10:29:29.089Z</published>
    <updated>2019-01-18T13:49:31.622Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么需要捕获？"><a href="#为什么需要捕获？" class="headerlink" title="为什么需要捕获？"></a>为什么需要捕获？</h4><p>前端代码运行在客户端的浏览器里，当客户端（浏览器）出现任何问题，在没有错误日志的情况下，我们都是不知道问题发生在哪，我们只能依靠猜测或者自己不断尝试才知道，或者永远不知道问题。</p><h4 id="客户端怎么捕获？"><a href="#客户端怎么捕获？" class="headerlink" title="客户端怎么捕获？"></a>客户端怎么捕获？</h4><p>1.通过window.onerror，可惜只能获得基础的js错误，Promise、async/await 里的错误无法捕获，它收到同源决策的影响</p><p>2.Promise 通过<strong>catch</strong>方法</p><p>3.async/await 通过 <strong>try - catch</strong></p><p>4.Vue可以通过全局Vue.config.errorHandler去获得非Promise、async/await里的错误，可以理解为Vue里的window.onerror</p><a id="more"></a><h4 id="不同的捕获错误用法（测试环境-chrome-amp-https-jsbin-com）"><a href="#不同的捕获错误用法（测试环境-chrome-amp-https-jsbin-com）" class="headerlink" title="不同的捕获错误用法（测试环境 chrome &amp; https://jsbin.com）"></a>不同的捕获错误用法（测试环境 chrome &amp; <a href="https://jsbin.com）" target="_blank" rel="noopener">https://jsbin.com）</a></h4><h5 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onerror" target="_blank" rel="noopener">window.onerror</a></h5><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    message：错误信息（字符串）。可用于HTML onerror=""处理程序中的event。</span></span><br><span class="line"><span class="hljs-comment">    source：发生错误的脚本URL（字符串）</span></span><br><span class="line"><span class="hljs-comment">    lineno：发生错误的行号（数字）</span></span><br><span class="line"><span class="hljs-comment">    colno：发生错误的列号（数字）</span></span><br><span class="line"><span class="hljs-comment">    error：Error对象（对象）</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> data</span><br><span class="line"><span class="hljs-keyword">let</span> info = data.info</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Arguments] &#123;</span></span><br><span class="line"><span class="hljs-comment">  0: "Uncaught TypeError: Cannot read property 'info' of undefined",</span></span><br><span class="line"><span class="hljs-comment">  1: "yiveral.js",</span></span><br><span class="line"><span class="hljs-comment">  2: 6,</span></span><br><span class="line"><span class="hljs-comment">  3: 17,</span></span><br><span class="line"><span class="hljs-comment">  4: [object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>虽然<strong>onerror</strong>无法捕获Promise里的错误，但是如果Promise里面是被setTimeout包裹的js还是能捕获的</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">let</span> data</span><br><span class="line">     <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">  &#125;, <span class="hljs-number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">     timer()</span><br><span class="line">  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inner error'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'running then'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'outer error'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Arguments] &#123;</span></span><br><span class="line"><span class="hljs-comment">  0: "Uncaught TypeError: Cannot read property 'info' of undefined",</span></span><br><span class="line"><span class="hljs-comment">  1: "yiveral.js",</span></span><br><span class="line"><span class="hljs-comment">  2: 8,</span></span><br><span class="line"><span class="hljs-comment">  3: 22,</span></span><br><span class="line"><span class="hljs-comment">  4: [object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="Promise-catch"><a href="#Promise-catch" class="headerlink" title="Promise catch"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch" target="_blank" rel="noopener">Promise catch</a></h5><h5 id="Q：如果没有catch方法，是否能捕获Promise里的错误？"><a href="#Q：如果没有catch方法，是否能捕获Promise里的错误？" class="headerlink" title="Q：如果没有catch方法，是否能捕获Promise里的错误？"></a>Q：如果没有catch方法，是否能捕获Promise里的错误？</h5><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'onerror'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">  p().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'running then'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'try - catch'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 没有任何输出</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>我们通过上面的代码发现，Promise里的错误无论在<strong>try - catch</strong>还是<strong>onerror</strong>里都无法被捕获</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inner error'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'return inner error'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">  p().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'running then'</span>)</span><br><span class="line">  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'outer error'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'try - catch'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">"inner error"</span></span><br><span class="line"><span class="hljs-comment">"return inner error"</span></span><br><span class="line"><span class="hljs-comment">"running then"</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>通过上面代码发现，已经被捕获的错误代码，在外层不会再被捕获而是继续执行then里的方法，可见在一条Promise链上的错误，会被之后最近的<strong>catch</strong>捕获。</p><h5 id="async-await-通过-try-catch"><a href="#async-await-通过-try-catch" class="headerlink" title="async/await 通过 try - catch"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async/await</a> 通过 <strong>try - catch</strong></h5><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p()</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 没有任何输出</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>我们通过上面的代码发现，Promise构造函数里的错误并没有被<strong>onerror</strong>捕获</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="hljs-string">'resolve'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p()</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'get res'</span>)</span><br><span class="line">  errorFn()</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">get res</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>虽然Promise正常执行，但是当后续的代码出错<strong>onerror</strong>依旧没有被捕获</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p()</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">  &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'try - catch'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">"try - catch"</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>try - catch</strong>捕获了</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inner error'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'return inner error'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p()</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">  &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'try - catch'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">"inner error"</span></span><br><span class="line"><span class="hljs-comment">"return inner error"</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>从上面代码我们知道，如果Promise构造函数里的错误被它自己catch的话，那么 async/await 后续的 <strong>try - catch</strong>将不再对它捕获</p><h5 id="Vue-config-errorHandler"><a href="#Vue-config-errorHandler" class="headerlink" title="Vue.config.errorHandler"></a><a href="https://cn.vuejs.org/v2/api/index.html#errorHandler" target="_blank" rel="noopener">Vue.config.errorHandler</a></h5><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// handle error</span></span><br><span class="line">  <span class="hljs-comment">// `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span><br><span class="line">  <span class="hljs-comment">// 只在 2.2.0+ 可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</p></blockquote><p>我们该如何去理解官方对errorHandler的解释呢？通过 vue-cli构建工具，创建一个非常基础的vue项目，做一些实验。</p><p>测试代码库：<a href="https://github.com/miser/vue-capture-error" target="_blank" rel="noopener">https://github.com/miser/vue-capture-error</a></p><p>在main.js</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'vue errorHandler'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.normal()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    normal () &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> data</span><br><span class="line">      <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 刷新页面 console 输出</span></span><br><span class="line"><span class="hljs-comment">0: TypeError: Cannot read property 'info' of undefined at VueComponent.normal …</span></span><br><span class="line"><span class="hljs-comment">1: VueComponent &#123;_uid: 1, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: VueComponent, …&#125;</span></span><br><span class="line"><span class="hljs-comment">2: "created hook</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>从上面代码可以看出，errorHandler确实可以满足我们的需求，在一个统一的地方捕获代码的错误，但是真的如此吗？上文也提到errorHandler和window.onerror类似，那么当我们使用Promse或者async/await时会不会得愿以偿。</p><p>js中的异步很大一部分来自网络请求，那么在这我们用 <a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> （它做了一层ajax与Promise之间的封装）。</p><p>main.js里添加</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> request = axios.create()</span><br><span class="line">request.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> response</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.request = <span class="hljs-function">(<span class="hljs-params">args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(args).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch1()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetch1 () &#123;</span><br><span class="line">        Vue.request(<span class="hljs-string">'https://api1.github.com/'</span>)</span><br><span class="line">      .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(response)</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api.github.com 会返回 github的api列表，当我们拼错域名，比如上面代码中的api1.github.com时，那肯定是无法获得我们想要的，可是errorHandler并没有获得该错误，不过幸好，我们可以在全局统一的Vue.request里的catch方法去统一捕获网络层面的错误。那如果是非网络层面的呢？比如数据请求回来了，但是绑定数据的时候，后端因为业务的修改等原因并没有返回我们需要的字段，造成Promise.then方法的业务处理错误。</p><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch2()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetch2 () &#123;</span><br><span class="line">      Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">      .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">        <span class="hljs-keyword">let</span> info = data.api.info</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上诉代码运行后，errorHandler同样未能捕获错误，从vue的issue里面去查询关于捕获Promise或者async/await时，会得到作者的答复:</p><blockquote><p><a href="https://github.com/vuejs/vue/issues/6551" target="_blank" rel="noopener">https://github.com/vuejs/vue/issues/6551</a></p><p>Vue cannot capture errors that are thrown asynchronously, similar to how try… catch won’t catch async errors. It’s your responsibility to handle async errors properly, e.g. using Promise.catch  — @yyx990803</p></blockquote><p>那么该怎么办，不可能每个地方都加Promise.catch方法吧！</p><blockquote><p><a href="https://github.com/vuejs/vue/issues/7653" target="_blank" rel="noopener">https://github.com/vuejs/vue/issues/7653</a></p><p>@Doeke 在这个地方给出一个解决方案，通过全局mixin，给那些Promise方法外面包一层Promise，在这个外层Promise链上catch里面的错误，不过这样需要做代码的约定，就是原来的方法需要返回一个Promise对象。</p></blockquote><p>main.js里添加@Doeke的思路</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">  beforeCreate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> methods = <span class="hljs-keyword">this</span>.$options.methods || &#123;&#125;</span><br><span class="line">    <span class="hljs-built_in">Object</span>.entries(methods).forEach(<span class="hljs-function">(<span class="hljs-params">[key, method]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (method._asyncWrapped) <span class="hljs-keyword">return</span></span><br><span class="line">      <span class="hljs-keyword">const</span> wrappedMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> result = method.apply(<span class="hljs-keyword">this</span>, args)</span><br><span class="line">        <span class="hljs-keyword">const</span> resultIsPromise = result &amp;&amp; <span class="hljs-keyword">typeof</span> result.then === <span class="hljs-string">'function'</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!resultIsPromise) <span class="hljs-keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">          <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            resolve(<span class="hljs-keyword">await</span> result)</span><br><span class="line">          &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!error._handled) &#123;</span><br><span class="line">              <span class="hljs-keyword">const</span> errorHandler = Vue.config.errorHandler</span><br><span class="line">              errorHandler(error)</span><br><span class="line">              error._handled = <span class="hljs-literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            reject(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      wrappedMethod._asyncWrapped = <span class="hljs-literal">true</span></span><br><span class="line">      methods[key] = wrappedMethod</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch2()</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch3()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetch2 () &#123;</span><br><span class="line">      Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">          <span class="hljs-keyword">let</span> info = data.api.fetch2</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    fetch3 () &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">          <span class="hljs-keyword">let</span> info = data.api.fetch3</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过运行并观察console打印可以看出，fetch3的错误被errorHandler捕获，而fetch2的错误并没有。</p><p>那么Promise里的错误统一捕获的问题差不多应该解决了，那么async/await的呢？</p><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch4()</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch5()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="hljs-keyword">async</span> fetch4 () &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">      <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">      <span class="hljs-keyword">let</span> info = data.api.fetch4</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-keyword">async</span> fetch5 () &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">      <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">      <span class="hljs-keyword">let</span> info = data.api.fetch5</span><br><span class="line">      <span class="hljs-keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fetch4并没有返回Promise，fetch5返回的也不是Promise对象，但是当运行的时候我们会发现fetch4和fetch5的错误信息都被捕获了，这是为什么呢？因为async/await本身就是Promise的语法糖，在 <a href="https://babeljs.io" target="_blank" rel="noopener">babeljs</a> 官网的 “Try it out” 尝试用 async/await，你会发现最后编译后的代码就是在外包了一层Promise。</p><h4 id="在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）"><a href="#在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）" class="headerlink" title="在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）"></a>在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）</h4><p><strong>网络层</strong>：可以在axios.create创建的实例中</p><p><strong>逻辑层</strong>：非Promise本身就会被errorHandler捕获；Promise相关的可以通过全局mixin给返回Promise对象的方法做一个外层包装，统一catch并调用errorHandler处理（<strong><em>这个方法的是否有副作用还需要研究!</em></strong>）</p><h4 id="捕获的错误存放在哪？"><a href="#捕获的错误存放在哪？" class="headerlink" title="捕获的错误存放在哪？"></a>捕获的错误存放在哪？</h4><p><strong># 自己简易服务 ？</strong></p><p>感觉成本很大（人力和工时）</p><p><strong># 官方推荐的 <a href="https://sentry.io/" target="_blank" rel="noopener">Sentry</a>  </strong></p><p>注册后安装官方的JS SDK</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install raven-js --save</span><br></pre></td></tr></table></figure><p>修改main.js</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">import</span> Raven <span class="hljs-keyword">from</span> <span class="hljs-string">'raven-js'</span></span><br><span class="line"><span class="hljs-keyword">import</span> RavenVue <span class="hljs-keyword">from</span> <span class="hljs-string">'raven-js/plugins/vue'</span></span><br><span class="line"></span><br><span class="line">Raven</span><br><span class="line">  .config(<span class="hljs-string">'https://1dfc5e63808b41058675b4b3aed4cfb6@sentry.io/1298044'</span>) <span class="hljs-comment">// sentry token</span></span><br><span class="line">  .addPlugin(RavenVue, Vue)</span><br><span class="line">  .install()</span><br><span class="line"></span><br><span class="line">Vue.config.errorHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  Raven.captureException(err)</span><br><span class="line">&#125;</span><br><span class="line">Vue.request = <span class="hljs-function">(<span class="hljs-params">args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(args).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">      Raven.captureException(err)</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br></pre></td></tr></table></figure><p>修改App.vue （我们从最普通的js测试起）<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.normal()</span><br><span class="line">    <span class="hljs-comment">// this.fetch1()</span></span><br><span class="line">    <span class="hljs-comment">// this.fetch2()</span></span><br><span class="line">    <span class="hljs-comment">// this.fetch3()</span></span><br><span class="line">    <span class="hljs-comment">// this.fetch4()</span></span><br><span class="line">    <span class="hljs-comment">// this.fetch5()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br></pre></td></tr></table></figure></p><p>打开sentry页面查看<br><img src="/images/js-capture-error/1.png" alt="错误报告列表"><br><img src="/images/js-capture-error/2.jpg" alt="错误报告详情（模糊了IP部分）"><br>我们通过上面2张图片可以看出，sentry自带一个简单的issue管理功能，此外详情页面的错误栈已经方便我们知道问题出在哪里了。</p><p>测试fetch1的ajax请求错误<br><img src="/images/js-capture-error/3.jpg" alt="成功截获api1.github.com这个错误域名"></p><p>除了fetch2无法被捕获外（之前提过，它没有返回Promise对象），其它的都能被捕获。不过Promise和async/await的错误栈比较少。尤其是Promise.then里的错误，如下2张图的对比：</p><p><img src="/images/js-capture-error/4.jpg" alt="Promise.then里的错误"><br><img src="/images/js-capture-error/5.jpg" alt="async/await里的错误"></p><p>除了默认的数据的收集外，还能收集一些其他数据，比如用户信息</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Raven.setUser(&#123;</span><br><span class="line">    name: <span class="hljs-string">'miser name'</span>,</span><br><span class="line">    id: <span class="hljs-string">'miser id'</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/js-capture-error/6.jpg" alt="用户信息顺收集"></p><p><strong>我们测试了代码未被压缩的情况，如果代码压缩了呢？</strong></p><p><img src="/images/js-capture-error/7.jpg" alt="通过npm run build 压缩代码打开首页，一脸懵逼"></p><p>显然我们不能直观的获得错误定位，不过sentry提供<a href="https://github.com/google/closure-compiler/wiki/Source-Maps" target="_blank" rel="noopener">SourceMaps</a>存储服务，它能方便的debug被压缩的代码。</p><p>我们可以通过<a href="https://www.npmjs.com/package/webpack-sentry-plugin" target="_blank" rel="noopener">webpack-sentry-plugin</a>工具将整个上传过程写进webpack里，因为我们的实验环境是vue3，所以我们创建一个vue.config.js文件</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> SentryPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-sentry-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="hljs-keyword">new</span> SentryPlugin(&#123;</span><br><span class="line">        organization: <span class="hljs-string">'fe-org'</span>, <span class="hljs-comment">// 组织名称 类似公司名吧（一个用户下可以有多个组织）</span></span><br><span class="line">        project: <span class="hljs-string">'popcorn-vue'</span>, <span class="hljs-comment">// 项目名称 （一个组织下可以有多个项目）</span></span><br><span class="line">        apiKey: <span class="hljs-string">'17c7d61a800f495c803196e2c02cadeb1b41454247db4f06a5c54193510da150'</span>,</span><br><span class="line">        release: <span class="hljs-string">'1.2.4-beta'</span> <span class="hljs-comment">// 发布后的代码和这个对应，可以找到这个sourcemaps</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改main.js<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Raven</span><br><span class="line">  .config(<span class="hljs-string">'https://1dfc5e63808b41058675b4b3aed4cfb6@sentry.io/1298044'</span>, &#123;</span><br><span class="line">    release: <span class="hljs-string">'1.2.4-beta'</span> <span class="hljs-comment">// 新增</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .addPlugin(RavenVue, Vue)</span><br><span class="line">  .install()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>查看sentry里popcorn-vue项目中的<strong>版本</strong></p><p><img src="/images/js-capture-error/8.jpg" alt="1.2.4-beta是目前的，1.2.3-beta是以前版本"><br><img src="/images/js-capture-error/9.jpg" alt="点击 1.2.4-beta 进去，很容易找到刚刚上传的js和js.map文件"></p><p>我们打开build完的index.html，虽然错误成功捕获但依旧和上图的一样，无法被SourceMaps解析，大概的原因是js和js.map的目录结构问题。</p><p>这个issue <a href="https://github.com/getsentry/sentry-electron/issues/54" target="_blank" rel="noopener">https://github.com/getsentry/sentry-electron/issues/54</a> 是一个很经典的例子，它犯了2个错误</p><p>– 仅仅传了js.map而没有传被压缩的js文件，它们应该一一对应的上传到服务器上<br>– js和js.map目录路径不匹配</p><p>这2个原因都会导致无法正常解析被压缩的文件。</p><p>那么不直接通过浏览器打开index.html（file:///<strong>**</strong>/vue-capture-error/dist/index.html），通过nginx去模拟正式环境。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure></p><p>将build出的代码dist拷贝到nginx默认目录下 /usr/local/var/www/，打开浏览器<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>回到sentry中查看新的错误记录</p><p><img src="/images/js-capture-error/10.jpg" alt="已经很详细的记录了出错的方法"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;为什么需要捕获？&quot;&gt;&lt;a href=&quot;#为什么需要捕获？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要捕获？&quot;&gt;&lt;/a&gt;为什么需要捕获？&lt;/h4&gt;&lt;p&gt;前端代码运行在客户端的浏览器里，当客户端（浏览器）出现任何问题，在没有错误日志的情况下，我们都是不知道问题发生在哪，我们只能依靠猜测或者自己不断尝试才知道，或者永远不知道问题。&lt;/p&gt;
&lt;h4 id=&quot;客户端怎么捕获？&quot;&gt;&lt;a href=&quot;#客户端怎么捕获？&quot; class=&quot;headerlink&quot; title=&quot;客户端怎么捕获？&quot;&gt;&lt;/a&gt;客户端怎么捕获？&lt;/h4&gt;&lt;p&gt;1.通过window.onerror，可惜只能获得基础的js错误，Promise、async/await 里的错误无法捕获，它收到同源决策的影响&lt;/p&gt;
&lt;p&gt;2.Promise 通过&lt;strong&gt;catch&lt;/strong&gt;方法&lt;/p&gt;
&lt;p&gt;3.async/await 通过 &lt;strong&gt;try - catch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.Vue可以通过全局Vue.config.errorHandler去获得非Promise、async/await里的错误，可以理解为Vue里的window.onerror&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://miser.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS、JS文件对网页的影响</title>
    <link href="https://miser.github.io/2018/09/30/js-css-image-loading/"/>
    <id>https://miser.github.io/2018/09/30/js-css-image-loading/</id>
    <published>2018-09-30T10:18:33.475Z</published>
    <updated>2019-01-18T13:48:22.030Z</updated>
    
    <content type="html"><![CDATA[<p>我们常说浏览器是单线程的，那么我们在加载资源的时候页面是在等待加载完成呢？还是继续执行后续的操作？加载不同资源对浏览器的操作会有相同响应吗？我们可以通过一个一个简单的实验测试来了解。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><em>所有资源均在localhost，浏览器chrome 69，不同浏览器或版本会有少许不同</em></p><p>– css</p><ul><li>css1.css 2秒后返回 body { background-color: #444 }</li><li>css2.css 立即返回 body { font-size: 50px;font-weight: bold; }</li></ul><p>– js</p><ul><li>js1.js 1秒后返回 console.log(“js1.js loaded”) </li><li>js2.js 立即返回 console.log(“js2.js loaded”)</li><li>js3.js 3秒后返回 console.log(“js2.js loaded”)</li></ul><p>– image</p><ul><li>img1.png 3秒后 返回一张黄色js图片</li><li>img2.png 立即返回一张 nodejs图片</li></ul><p>服务器端代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> Koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> views = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-views'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Koa()</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">app.use(views(__dirname + <span class="hljs-string">'/views'</span>))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/css1.css'</span>, <span class="hljs-keyword">async</span> ctx =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    ctx.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/css'</span>)</span><br><span class="line">    ctx.body = <span class="hljs-string">'body &#123; background-color: #444 &#125;'</span></span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">2</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/css2.css'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/css'</span>)</span><br><span class="line">  ctx.body = <span class="hljs-string">'body &#123; font-size: 50px;font-weight: bold; &#125;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/js1.js'</span>, <span class="hljs-keyword">async</span> ctx =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">'console.log("js1.js loaded")'</span></span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/js2.js'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="hljs-string">'console.log("js2.js loaded")'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/js3.js'</span>, <span class="hljs-keyword">async</span> ctx =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">'console.log("js3.js loaded")'</span></span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">3</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/img1.png'</span>, <span class="hljs-keyword">async</span> ctx =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    ctx.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'image/png; charset=UTF-8'</span>)</span><br><span class="line">    ctx.body = fs.createReadStream(<span class="hljs-string">'1.png'</span>)</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">3</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/img2.png'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'image/png; charset=UTF-8'</span>)</span><br><span class="line">  ctx.body = fs.createReadStream(<span class="hljs-string">'2.png'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line">app.listen(<span class="hljs-number">3000</span>)</span><br></pre></td></tr></table></figure><h2 id="实验一：-CSS加载是否影响DOM解析"><a href="#实验一：-CSS加载是否影响DOM解析" class="headerlink" title="实验一： CSS加载是否影响DOM解析"></a>实验一： CSS加载是否影响DOM解析</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(el)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css1.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css2.css"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img1.png"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img2.png"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- console 输出</span></span><br><span class="line"><span class="hljs-comment">app元素对象</span></span><br><span class="line"><span class="hljs-comment">test: 1947.620849609375ms</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>从控制台的输出可以看到 app 元素会被正确输出，2秒左右再输出 test 的时间，可见<strong>CSS加载并不会阻碍DOM解析</strong>。</p><h2 id="实验二：-CSS加载是否影响JS执行和DOM渲染"><a href="#实验二：-CSS加载是否影响JS执行和DOM渲染" class="headerlink" title="实验二： CSS加载是否影响JS执行和DOM渲染"></a>实验二： CSS加载是否影响JS执行和DOM渲染</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css1.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css2.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img1.png"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img2.png"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- console 输出</span></span><br><span class="line"><span class="hljs-comment">js1.js loaded</span></span><br><span class="line"><span class="hljs-comment">js2.js loaded</span></span><br><span class="line"><span class="hljs-comment">(index):17 test: 1921.02099609375ms</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>当打开index.html页面后，会发现所有资源均同时发起了请求，页面会先处于白屏加载状态（DOM无法渲染），当2秒（左右）后页面除img1.png未渲染外，其它样式和图片均渲染。</p><p>从控制台的输出可以看出，虽然js比css快1秒左右加载完毕，但是此刻是处于阻塞状态并没有执行，当css加载完成后，才从上至下的执行（虽然js2.js比js1.js早加载好，但是执行的时候还是从上至下的），当css1.css加载完成后，页面立即渲染，图片img1.png晚1秒左右显示。可见<strong>CSS加载会阻碍JS执行和DOM的渲染</strong>。</p><h2 id="实验三：-JS加载是否影响DOM解析和渲染"><a href="#实验三：-JS加载是否影响DOM解析和渲染" class="headerlink" title="实验三： JS加载是否影响DOM解析和渲染"></a>实验三： JS加载是否影响DOM解析和渲染</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(el)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img1.png"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img2.png"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- console 输出</span></span><br><span class="line"><span class="hljs-comment">null</span></span><br><span class="line"><span class="hljs-comment">js3.js loaded</span></span><br><span class="line"><span class="hljs-comment">test: 2943.9951171875ms</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>我们仅引入一个js3.js文件，设置它的返回时间为3秒，从控制台的输出可以看到 app 元素没有被正确输出（输出null），3秒左右再输出 test 的时间，可见<strong>JS加载会阻碍DOM解析，既然解析都被影响自然必定影响渲染了</strong>。</p><h2 id="实验四：-DOM的DOMContentLoaded和onLoad事件"><a href="#实验四：-DOM的DOMContentLoaded和onLoad事件" class="headerlink" title="实验四： DOM的DOMContentLoaded和onLoad事件"></a>实验四： DOM的DOMContentLoaded和onLoad事件</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testonload'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testonload'</span>)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css1.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css2.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img1.png"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img2.png"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- console 输出</span></span><br><span class="line"><span class="hljs-comment">js1.js loaded</span></span><br><span class="line"><span class="hljs-comment">js2.js loaded</span></span><br><span class="line"><span class="hljs-comment">test: 1955.489990234375ms</span></span><br><span class="line"><span class="hljs-comment">testDOMContentLoaded: 1956.044189453125ms</span></span><br><span class="line"><span class="hljs-comment">testonload: 2964.078857421875ms</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>我们通过控制台会发现 testDOMContentLoaded 会在2秒左右打印出来，testonload会在3秒左右打印出来，由此可知<strong>DOMContentLoaded是js和css文件的加载后触发，onload是整个页面所有资源加载完后触发（比如图片等）</strong>。</p><h2 id="实验五：-script-async-属性"><a href="#实验五：-script-async-属性" class="headerlink" title="实验五： script async 属性"></a>实验五： script async 属性</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(el)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3个js文件都加上”async”,会发现输出顺序是</p><ul><li>testDOMContentLoaded 会立即打印出来</li><li>app元素对象</li><li>js2.js loaded</li><li>js1.js loaded</li><li>js3.js loaded</li></ul><p>之后我们将js1.js上的”async”移除，会发现输出顺序是</p><ul><li>el 为 null</li><li>js1.js loaded</li><li>testDOMContentLoaded 1秒左右时间</li><li>js2.js loaded</li><li>js3.js loaded</li></ul><p>之后我们将js3.js上的”async”移除，会发现输出顺序是</p><ul><li>el 为 null</li><li>js1.js loaded</li><li>js2.js loaded</li><li>js3.js loaded</li><li>testDOMContentLoaded 3秒左右时间</li></ul><p>可见<strong>async会打乱js的执行顺序，有async的js文件哪个先加载完哪个先执行，DOMContentLoaded的触发时间不在和async有关系，不会影响页面的渲染和解析</strong></p><h2 id="实验六：-script-defer-属性"><a href="#实验六：-script-defer-属性" class="headerlink" title="实验六： script defer 属性"></a>实验六： script defer 属性</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(el)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3个js文件都加上”defer”,会发现输出顺序是</p><ul><li>app元素对象</li><li>js1.js loaded</li><li>js2.js loaded</li><li>js3.js loaded</li><li>testDOMContentLoaded 3秒左右时间</li></ul><p>这和没有加defer和async时一样</p><p>之后我们将js1.js上的”defer”移除，会发现输出顺序是</p><ul><li>el 为 null</li><li>js1.js loaded</li><li>js2.js loaded</li><li>js3.js loaded</li><li>testDOMContentLoaded 3秒左右时间</li></ul><p>这和没有加defer和async时一样</p><p>之后我们将js3.js上的”defer”移除，会发现输出顺序是</p><ul><li>js1.js loaded</li><li>js3.js loaded</li><li>js2.js loaded</li><li>testDOMContentLoaded 3秒左右时间</li></ul><p>可见<strong>defer会打乱js的执行顺序，有defer的js文件会晚于没有的，但是它们（含有defer）依旧保持从上而下依次执行，DOMContentLoaded的触发时间晚于defer，不会影响页面的渲染和解析</strong></p><h2 id="实验七：-script-defer-amp-async-都加上-属性"><a href="#实验七：-script-defer-amp-async-都加上-属性" class="headerlink" title="实验七： script defer &amp; async 都加上 属性"></a>实验七： script defer &amp; async 都加上 属性</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3个js文件都加上”async”,会发现输出顺序是</p><ul><li>testDOMContentLoaded 会立即打印出来</li><li>js2.js loaded</li><li>js1.js loaded</li><li>js3.js loaded</li></ul><p>async优先级比defer高</p><h2 id="实验八：-动态创建script"><a href="#实验八：-动态创建script" class="headerlink" title="实验八： 动态创建script"></a>实验八： 动态创建script</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">var</span> appEl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-built_in">console</span>.log(appEl)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> head = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>]</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      script.type = <span class="hljs-string">'text/javascript'</span></span></span><br><span class="line"><span class="hljs-javascript">      script.src = <span class="hljs-string">'js'</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">'.js'</span></span></span><br><span class="line"><span class="hljs-undefined">      head.appendChild(script)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>testDOMContentLoaded 会立即打印出来</li><li>appEl 对象</li><li>js2.js loaded</li><li>js1.js loaded</li><li>js3.js loaded</li></ul><p>如果我们动态创建js1.js和js2.js，将js3.js依旧按照常规写法写在页面中的话</p><p>index.html<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">var</span> appEl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-built_in">console</span>.log(appEl)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> head = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>]</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      script.type = <span class="hljs-string">'text/javascript'</span></span></span><br><span class="line"><span class="hljs-javascript">      script.src = <span class="hljs-string">'js'</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">'.js'</span></span></span><br><span class="line"><span class="hljs-undefined">      head.appendChild(script)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>appEl 为 null 立即打印出来</li><li>js3.js loaded </li><li>testDOMContentLoaded 3秒左右会立即打印出来</li><li>js2.js loaded</li><li>js1.js loaded</li></ul><p>可见<strong>动态创建script基本是同时加载，哪个先加载完哪个先执行，但是他们都晚于DOMContentLoaded事件</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSS加载会阻塞DOM渲染和JS执行，但是不影响页DOM解析；JS加载会阻塞DOM解析和渲染，给script标签加上defer &amp; async属性将不再影响DOM解析和渲染，async 是哪个先返回先执行按个，defer会晚于常规标签同时按照含有defer属性的script加载的顺序执行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们常说浏览器是单线程的，那么我们在加载资源的时候页面是在等待加载完成呢？还是继续执行后续的操作？加载不同资源对浏览器的操作会有相同响应吗？我们可以通过一个一个简单的实验测试来了解。&lt;/p&gt;
    
    </summary>
    
      <category term="javascript" scheme="https://miser.github.io/categories/javascript/"/>
    
    
  </entry>
  
  <entry>
    <title>出差菲律宾</title>
    <link href="https://miser.github.io/2018/09/24/traveling-to-the-philippines/"/>
    <id>https://miser.github.io/2018/09/24/traveling-to-the-philippines/</id>
    <published>2018-09-24T07:45:00.000Z</published>
    <updated>2018-10-21T05:07:01.239Z</updated>
    
    <content type="html"><![CDATA[<p>入职没多久，因为菲律宾项目的版本更新，和一后端、一测试，三人组队前往当地打怪升级。</p><p><img src="/images/traveling-to-the-philippines/1.jpg" alt="准备起飞"></p><a id="more"></a><p>副本Loading三个半小时。</p><p><img src="/images/traveling-to-the-philippines/2.jpg" alt="到达副本"></p><h3 id="住和工"><a href="#住和工" class="headerlink" title="住和工"></a>住和工</h3><p>到达马尼拉的时候已经快晚上9点了，下飞机弄完电话卡连上网络，急忙打车去坐落在BGC的酒店——步行离公司5MIN，一个大套房3人住，好宽敞。</p><p>BGC近年来发展很快，类似上海的陆家嘴，许多大型跨国公司变迁至此（如HSBC,Google等）。</p><p>第二天，准时打开上班，新装修的办公室还是给人眼前一亮，大大小小的会议室、工作间、沙发、游戏室、健身房、食品吧台、甚至还有临时休息的房间。</p><p><img src="/images/traveling-to-the-philippines/3.jpg" alt="接下来几天躲在这会议室猥琐写代码别浪"></p><p><img src="/images/traveling-to-the-philippines/4.jpg" alt="蛮喜欢这灯"></p><p><img src="/images/traveling-to-the-philippines/7.jpg" alt="一角A"></p><p><img src="/images/traveling-to-the-philippines/8.jpg" alt="一角B"></p><p><img src="/images/traveling-to-the-philippines/6.jpg" alt="健身房"></p><p><img src="/images/traveling-to-the-philippines/9.jpg" alt="可以临时睡觉的地方"></p><h3 id="吃"><a href="#吃" class="headerlink" title="吃"></a>吃</h3><p>菲律宾的餐饮感觉还是偏西餐的，油炸类的偏多，行程中吃的比较多；中餐的话基本是港式、台湾的为主，第一天晚上夜宵就是著名的鼎泰丰，味道不错。这边的水，大多是生水，国人也许喝不惯，一般在BGC一顿饭花费在1500Php左右，好一点的日料什么的那就更贵了。</p><p><img src="/images/traveling-to-the-philippines/10.jpg" alt="鼎泰丰，中国风"></p><p><img src="/images/traveling-to-the-philippines/11.jpg" alt="厚实的汉堡A"></p><p><img src="/images/traveling-to-the-philippines/12.jpg" alt="厚实的汉堡B"></p><p><img src="/images/traveling-to-the-philippines/27.jpg" alt="厚实的汉堡C"></p><p><img src="/images/traveling-to-the-philippines/13.jpg" alt="油炸食品"></p><p><img src="/images/traveling-to-the-philippines/14.jpg" alt="网络咖啡店 「%」"></p><p><img src="/images/traveling-to-the-philippines/15.jpg" alt="五颜六色的水果"></p><p><img src="/images/traveling-to-the-philippines/16.jpg" alt="712Php 一公斤的三文鱼（人民币100不到）"></p><p><img src="/images/traveling-to-the-philippines/17.jpg" alt="一大袋才花了300不到Php"></p><p>因为回国航线有史诗级台风「山竹」经过，所以在菲律宾多待2天，有机会去海边逛逛随便去吃海鲜，我们去的市场感觉主要做国人生意，到处是中国人，东南亚的海鲜品种差不多，买的时候可以讨价还价。</p><p><img src="/images/traveling-to-the-philippines/19.jpg" alt="海鲜市场"></p><p><img src="/images/traveling-to-the-philippines/21.jpg" alt="鱼"></p><p><img src="/images/traveling-to-the-philippines/20.jpg" alt="蟹，不同大小不同的价格"></p><p><img src="/images/traveling-to-the-philippines/22.jpg" alt="三个男的对海鲜欲望不大，最后买了它，7000+ 还价到5500 其实还是贵了 T_T"></p><p><img src="/images/traveling-to-the-philippines/23.jpg" alt="成品A 不好吃"></p><p><img src="/images/traveling-to-the-philippines/24.jpg" alt="成品B 不好吃"></p><p><img src="/images/traveling-to-the-philippines/25.jpg" alt="成品C 不好吃"></p><p><img src="/images/traveling-to-the-philippines/26.jpg" alt="星爸爸 摩卡超大杯折合人民币才23不到，好便宜"></p><h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><p>对于我们这些初来乍到的，还是出租车比较靠谱，机场出来还是黄色（貌似机场特有）的出租车比较靠谱，虽然贵但是没发生坐地起价或者绕路等问题，之前同事来坐白色出租车虽然起步便宜但是最后付钱的时候比我们贵很多。或者用Grab打车（类似滴滴打车），价格合理。</p><p><img src="/images/traveling-to-the-philippines/28.jpg" alt="不知道是巧合还是当地出租车运行要求，灭火器放在左A柱这"></p><p>菲律宾特色<em>“吉普尼”</em>，五颜六色装饰夸张，是与黑色伦敦出租车和黄色纽约出租车齐名的交通工具，可惜没乘坐。</p><p><img src="/images/traveling-to-the-philippines/29.jpg" alt="吉普尼A"></p><p><img src="/images/traveling-to-the-philippines/30.jpg" alt="吉普尼B"></p><h3 id="周边"><a href="#周边" class="headerlink" title="周边"></a>周边</h3><p>在BGC的时候感觉道路很干净，路上没有什么垃圾，甚至找个垃圾桶都很难，常常领着一袋垃圾从A处到B处目的地才有垃圾桶扔，路上没看到有人抽烟等；去之前很担心安全问题，国内常有报道，到那里后感觉很多时候没必要过于担心。</p><p>谈不上安保能力多强，平时的安检还是很多的，进大楼、酒店、商场都有安检，类似上海地铁安检吧，机器扫描或者人工打开包看，人工看的话基本都是带手套或者用一个小木棍，避免直接与物品直接接触，避免不必要的麻烦。几天下来没有谁不做检查的，不像地铁安检经常有人不愿意或者争执，其实无论在菲律宾还是国内，安检只是防君子不防小人的（和门一样），但是它也是一道保护大家的屏障，所以我们应该尊重它，而不是敌对它。</p><p><img src="/images/traveling-to-the-philippines/31.jpg" alt="干净的街道"></p><p><img src="/images/traveling-to-the-philippines/34.jpg" alt="安检"></p><p><img src="/images/traveling-to-the-philippines/33.jpeg" alt="很多大楼门口的安保都有枪"></p><p><img src="/images/traveling-to-the-philippines/32.jpg" alt="不像国内ATM机，这的机器都是全露天的，没有小房间"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原本出差7天，后拜台风“山竹”所赐，多待了2天，得以有机会去海边或者更多地方逛逛。整体给我的感觉很不错，物价和上海总体差不多，若不是语言的不同，很多时候感觉自己是生活在魔都，当然天气也会常常提醒你:)。期待下次再去！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入职没多久，因为菲律宾项目的版本更新，和一后端、一测试，三人组队前往当地打怪升级。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/traveling-to-the-philippines/1.jpg&quot; alt=&quot;准备起飞&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="https://miser.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
  <entry>
    <title>一家公司的好坏，先看HR部门</title>
    <link href="https://miser.github.io/2018/07/20/the-quality-of-a-company-first-look-at-HR-department/"/>
    <id>https://miser.github.io/2018/07/20/the-quality-of-a-company-first-look-at-HR-department/</id>
    <published>2018-07-20T10:01:34.000Z</published>
    <updated>2018-10-19T06:24:07.636Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面对茫茫的公司，如何去判断一家公司是否靠谱呢？</strong></p><p>除非你关注一家公司很久了或有内线，不然光从面试过程中你真的很难说这家公司好与坏。我会比较看重HR部门，为什么？</p><p>1.我老婆就是资深HR，深知这个部门的重要性，和被忽视性。</p><p>2.如果整个面试沟通过程中，HR部门显得很薄弱，说明该公司的组织架构不清晰，处于混沌阶段，有风险。</p><p>3.如果HR部门的素质不够，那么入职了，我也觉得后续会有麻烦，比如交金、请假等等的沟通也比较头疼。</p><p>HR需要情商智商双在线，如果一家公司拥有这样的HR说明它重视这个部门，为看似不赚钱的部门买了不少单，说明公司盈利或者业务稳定。就如，肚子饿了，只要能填饱肚子基本什么都会吃（精力只有在业务赚钱上），而真的去吃山珍海味说明有钱（会有精力把其它相关部门做好）。好的HR是对公司和员工的双保险！<br><a id="more"></a><br><strong>一些小经历</strong></p><ul><li>记得很多年前，手上同时拿到了盛大创新院和某社交平台的offer，该平台HR电话问我意向，我说我去创新院，她接着问我地址，我说在浦东软件园（入职的项目组正好从总部搬出来）。这HR就很嘲讽的语气说盛大在张江怎么在什么软件园呢，一顿巴拉巴拉。从此之后该社交平台我就再也不用了，确实这几年这平台不怎么样了。</li><li>前几天去某中型公司（两、三百号人左右），技术上方向不太符合，HR都没把我送出门，我从很内部的会议室自己摸索着出门，从中感受出该公司的冷漠。</li><li>有时候HR太高冷了，毕竟不是聊技术有话题，又是伤感情的薪酬环节，不知道怎么聊了，之前聊得再愉快到了这戛然而止。</li><li>电话通知我拿到offer了，但是电话那头先把我贬下，然后提出薪资结构等等。既然我不好，为什么给我offer呢？此地无银三百两的告诉我你要我去，但要压我价嘛。其实很多时候既然能谈到这部基本双方都有意向了，薪资是一方面，还有其他，避重就轻的说点吸引人的东西，不是更好，增加砝码吗？一个HR在多次和面试者沟通后，还不知道面试者除了薪资还想要什么，那么是失败的。</li></ul><p><strong>面试别不耐烦，多与不同人聊是好事，也是学习</strong></p><p>聊得人越多，你越能知道公司和团队的素质，是否和自己匹配。</p><p>有些面试官做技术做产品太久了，不太和陌生人打交道，说的话、问的问题常常情商不在线，给我的感觉就是要花很长时间和团队磨合，一般自己心里会亮起警报。</p><p><strong>总结</strong></p><p>一场愉快的面试，是双方的尊重。面试者答应了就该准时出席，把自己所知所想告诉对方，自我的梳理和反思；面试官面了就该好好对待，可以从被面试者身上学到新的思维维度，把公司团队的产品介绍下，也算是一种推广。人与人相处，尤其是陌生人相处是需要有礼节的，你永远不知道坐在你对面的人，他背后有什么样的能量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;面对茫茫的公司，如何去判断一家公司是否靠谱呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除非你关注一家公司很久了或有内线，不然光从面试过程中你真的很难说这家公司好与坏。我会比较看重HR部门，为什么？&lt;/p&gt;
&lt;p&gt;1.我老婆就是资深HR，深知这个部门的重要性，和被忽视性。&lt;/p&gt;
&lt;p&gt;2.如果整个面试沟通过程中，HR部门显得很薄弱，说明该公司的组织架构不清晰，处于混沌阶段，有风险。&lt;/p&gt;
&lt;p&gt;3.如果HR部门的素质不够，那么入职了，我也觉得后续会有麻烦，比如交金、请假等等的沟通也比较头疼。&lt;/p&gt;
&lt;p&gt;HR需要情商智商双在线，如果一家公司拥有这样的HR说明它重视这个部门，为看似不赚钱的部门买了不少单，说明公司盈利或者业务稳定。就如，肚子饿了，只要能填饱肚子基本什么都会吃（精力只有在业务赚钱上），而真的去吃山珍海味说明有钱（会有精力把其它相关部门做好）。好的HR是对公司和员工的双保险！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="工作" scheme="https://miser.github.io/categories/%E5%B7%A5%E4%BD%9C/"/>
    
    
  </entry>
  
</feed>
