{"pages":[],"posts":[{"title":"Egg Cluster 简单介绍","text":"如果不清楚什么是Egg.js，希望能移步到它的官网简单看下。另外说它是约定大于配置的话，我只能说你真的不了解它，或者说不了解框架，哪个框架没有约定？毕竟没有规矩不成方圆，何况是逻辑性的程序呢？官方列出的特性如下： 1.提供基于 Egg 定制上层框架 的能力2.高度可扩展的插件机制3.内置多进程管理4.基于 Koa 开发，性能优异5.框架稳定，测试覆盖率高6.渐进式开发 第1条，它有那么Koa也有啊。第2条，它有，难道Koa、Express等就没有嘛？第4条，更好的补充了Koa不是更好吗？第5条，难道别的框架就不稳定了？第6条，前端鼓吹渐进式、后端也鼓吹，那究竟什么是渐进式呢？ 在我看来最吸引我的是第3条，内置多进程管理，这个在其它主流nodejs框架中是稀缺的特性，此文就简单聊聊它。 #从源码慢慢了解 egg-core: 定义了一个EggCore类，它继承KoaApplication，也就是特性中提到的第4条 基于Koa开发，性能优异 egg: 定义了一个继承于EggCore的EggApplication类，并且Application和Agent分别继承于EggApplication egg-cluster: 这个类库主要就是做多进程管理的工作 egg-cluster让Egg.js变得与众不同，看看它做了什么。 egg-cluster1234// egg-cluster index.js 唯一对外暴露的接口 startClusterexports.startCluster = function (options, callback) &#123; new Master(options).ready(callback)&#125; egg-cluster就是靠Master在管理egg里面的angent和workers（application）,另外它也是它们之间通信的中转站，看下官网给出的图解： Agent-Works怎么启动的？1234567891011121314151617181920212223242526class Master extends EventEmitter &#123; constructor(options) &#123; this.workerManager = new Manager(); this.messenger = new Messenger(this); // ... this.once('agent-start', this.forkAppWorkers.bind(this)); // ... detectPort((err, port) =&gt; &#123; // 试着找个可以用的port this.options.clusterPort = port; // 启动 agent this.forkAgentWorker(); &#125;); // ... &#125; forkAgentWorker() &#123; // ... childprocess.fork egg-cluster/lib/agent_worker.js const agentWorker = childprocess.fork(this.getAgentWorkerFile(), args, opt); // ... &#125; forkAppWorkers() &#123; // 将需要数量的 worker 一个个创建出来 // cluster.fork egg-cluster/lib/agent_worker.js 它们将监听同一个服务端口 // 创建 http或https服务 &#125;&#125; agent_worker.js主要逻辑就是创建egg类库里的Agent类，完成后发”agent-start”给父进程，触发Master的订阅创建Workers 1234// egg-cluster/lib/agent_worker.js// ...process.send(&#123; action: 'agent-start', to: 'master' &#125;); // ... Agent-Works怎么通信呢? (IPC) 在Master中维护着一个Messenger（egg-cluster/lib/utils/messenger.js）实例 EggApplication中维护了另一个Messenger（egg/lib/core/messenger.js）实例 由于Agent和Worker(Application)都继承EggApplication，它们调用Messenger的时候会send到创建它们的Master里，然后Master再根据传过来的参数send给不同的Agent或Worker，Master里的转发逻辑如下。 123456789101112131415161718192021222324// egg-cluster master.jsclass Master extends EventEmitter &#123; forkAppWorkers() &#123; // ... cluster.on('fork', worker =&gt; &#123; // ... worker.on('message', msg =&gt; &#123; if (typeof msg === 'string') msg = &#123; action: msg, data: msg &#125;; msg.from = 'app'; this.messenger.send(msg); &#125;); // ... &#125;) &#125; forkAgentWorker() &#123; // ... agentWorker.on('message', msg =&gt; &#123; if (typeof msg === 'string') msg = &#123; action: msg, data: msg &#125;; msg.from = 'agent'; this.messenger.send(msg); &#125;); // ... &#125;&#125; 1234567891011// egg messenger.jsclass Messenger extends EventEmitter &#123; send(action, data, to) &#123; sendmessage(process, &#123; action, data, to, &#125;); return this; &#125;&#125; 一条信息必定有from…to…信息 官网里提到的“多进程研发模式增强” n * m 个连接导致大量连接资源“浪费” 减少Master转发带来的额外性能消耗 另外，egg的作者们担心不当的IPC通信把Master搞挂，从而整个服务异常 所以还有一种socket通信方式（使用了另一个库cluster-client）： 将Agent作为Leader，从服务端获取数据，并做缓存 将Worker作为Follower，订阅Agent获取的数据 典型的场景有，Leader（Agent）获取disconf里的配置、获取euerka里的服务等，Follower（Worker）使用这些配置和服务。 cluster-client 源码一瞥1234567891011121314151617181920212223242526272829class ClusterClient extends Base &#123; // ... async [init]() &#123; const name = this.options.name; const port = this.options.port; let server; if (this.options.isLeader === true) &#123; server = await ClusterServer.create(name, port); if (!server) &#123; throw new Error(`create \"$&#123;name&#125;\" leader failed, the port:$&#123;port&#125; is occupied by other`); &#125; &#125; else if (this.options.isLeader === false) &#123; // wait for leader active await ClusterServer.waitFor(port, this.options.maxWaitTime); &#125; else &#123; debug('[ClusterClient:%s] init cluster client, try to seize the leader on port:%d', name, port); server = await ClusterServer.create(name, port); &#125; if (server) &#123; this[innerClient] = new Leader(Object.assign(&#123; server &#125;, this.options)); debug('[ClusterClient:%s] has seized port %d, and serves as leader client.', name, port); &#125; else &#123; this[innerClient] = new Follower(this.options); debug('[ClusterClient:%s] gives up seizing port %d, and serves as follower client.', name, port); &#125; // ... &#125;&#125; port数值就是上文开始处通过detectPort获取的clusterPort数值 然后net.create 创建TCP服务，之后所有的Leader和Follower都会走它提供的服务进行socket通信 Leader获取数据触发publish，传给订阅的Follower中 cluster-client源码是很复杂的，中间还涉及到专递数据的格式，进行数据包的解析等等，这边就不扩展介绍了，有兴趣可以自己撸源码。 #总结Egg.js的进程管理和通信自然不会像文章里说的那么简单，但大体如此。弄清楚它们的工作原理对开发程序、插件、中间件有很大的帮助，个人认为这个才是这个框架的精髓之处。","link":"/2019/01/18/egg-cluster/"},{"title":"出差菲律宾","text":"入职没多久，因为菲律宾项目的版本更新，和一后端、一测试，三人组队前往当地打怪升级。 副本Loading三个半小时。 住和工到达马尼拉的时候已经快晚上9点了，下飞机弄完电话卡连上网络，急忙打车去坐落在BGC的酒店——步行离公司5MIN，一个大套房3人住，好宽敞。 BGC近年来发展很快，类似上海的陆家嘴，许多大型跨国公司变迁至此（如HSBC,Google等）。 第二天，准时打开上班，新装修的办公室还是给人眼前一亮，大大小小的会议室、工作间、沙发、游戏室、健身房、食品吧台、甚至还有临时休息的房间。 吃菲律宾的餐饮感觉还是偏西餐的，油炸类的偏多，行程中吃的比较多；中餐的话基本是港式、台湾的为主，第一天晚上夜宵就是著名的鼎泰丰，味道不错。这边的水，大多是生水，国人也许喝不惯，一般在BGC一顿饭花费在1500Php左右，好一点的日料什么的那就更贵了。 因为回国航线有史诗级台风「山竹」经过，所以在菲律宾多待2天，有机会去海边逛逛随便去吃海鲜，我们去的市场感觉主要做国人生意，到处是中国人，东南亚的海鲜品种差不多，买的时候可以讨价还价。 行对于我们这些初来乍到的，还是出租车比较靠谱，机场出来还是黄色（貌似机场特有）的出租车比较靠谱，虽然贵但是没发生坐地起价或者绕路等问题，之前同事来坐白色出租车虽然起步便宜但是最后付钱的时候比我们贵很多。或者用Grab打车（类似滴滴打车），价格合理。 菲律宾特色“吉普尼”，五颜六色装饰夸张，是与黑色伦敦出租车和黄色纽约出租车齐名的交通工具，可惜没乘坐。 周边在BGC的时候感觉道路很干净，路上没有什么垃圾，甚至找个垃圾桶都很难，常常领着一袋垃圾从A处到B处目的地才有垃圾桶扔，路上没看到有人抽烟等；去之前很担心安全问题，国内常有报道，到那里后感觉很多时候没必要过于担心。 谈不上安保能力多强，平时的安检还是很多的，进大楼、酒店、商场都有安检，类似上海地铁安检吧，机器扫描或者人工打开包看，人工看的话基本都是带手套或者用一个小木棍，避免直接与物品直接接触，避免不必要的麻烦。几天下来没有谁不做检查的，不像地铁安检经常有人不愿意或者争执，其实无论在菲律宾还是国内，安检只是防君子不防小人的（和门一样），但是它也是一道保护大家的屏障，所以我们应该尊重它，而不是敌对它。 总结原本出差7天，后拜台风“山竹”所赐，多待了2天，得以有机会去海边或者更多地方逛逛。整体给我的感觉很不错，物价和上海总体差不多，若不是语言的不同，很多时候感觉自己是生活在魔都，当然天气也会常常提醒你:)。期待下次再去！","link":"/2018/09/24/traveling-to-the-philippines/"},{"title":"一家公司的好坏，先看HR部门","text":"面对茫茫的公司，如何去判断一家公司是否靠谱呢？ 除非你关注一家公司很久了或有内线，不然光从面试过程中你真的很难说这家公司好与坏。我会比较看重HR部门，为什么？ 1.我老婆就是资深HR，深知这个部门的重要性，和被忽视性。 2.如果整个面试沟通过程中，HR部门显得很薄弱，说明该公司的组织架构不清晰，处于混沌阶段，有风险。 3.如果HR部门的素质不够，那么入职了，我也觉得后续会有麻烦，比如交金、请假等等的沟通也比较头疼。 HR需要情商智商双在线，如果一家公司拥有这样的HR说明它重视这个部门，为看似不赚钱的部门买了不少单，说明公司盈利或者业务稳定。就如，肚子饿了，只要能填饱肚子基本什么都会吃（精力只有在业务赚钱上），而真的去吃山珍海味说明有钱（会有精力把其它相关部门做好）。好的HR是对公司和员工的双保险！一些小经历 记得很多年前，手上同时拿到了盛大创新院和某社交平台的offer，该平台HR电话问我意向，我说我去创新院，她接着问我地址，我说在浦东软件园（入职的项目组正好从总部搬出来）。这HR就很嘲讽的语气说盛大在张江怎么在什么软件园呢，一顿巴拉巴拉。从此之后该社交平台我就再也不用了，确实这几年这平台不怎么样了。 前几天去某中型公司（两、三百号人左右），技术上方向不太符合，HR都没把我送出门，我从很内部的会议室自己摸索着出门，从中感受出该公司的冷漠。 有时候HR太高冷了，毕竟不是聊技术有话题，又是伤感情的薪酬环节，不知道怎么聊了，之前聊得再愉快到了这戛然而止。 电话通知我拿到offer了，但是电话那头先把我贬下，然后提出薪资结构等等。既然我不好，为什么给我offer呢？此地无银三百两的告诉我你要我去，但要压我价嘛。其实很多时候既然能谈到这部基本双方都有意向了，薪资是一方面，还有其他，避重就轻的说点吸引人的东西，不是更好，增加砝码吗？一个HR在多次和面试者沟通后，还不知道面试者除了薪资还想要什么，那么是失败的。 面试别不耐烦，多与不同人聊是好事，也是学习 聊得人越多，你越能知道公司和团队的素质，是否和自己匹配。 有些面试官做技术做产品太久了，不太和陌生人打交道，说的话、问的问题常常情商不在线，给我的感觉就是要花很长时间和团队磨合，一般自己心里会亮起警报。 总结 一场愉快的面试，是双方的尊重。面试者答应了就该准时出席，把自己所知所想告诉对方，自我的梳理和反思；面试官面了就该好好对待，可以从被面试者身上学到新的思维维度，把公司团队的产品介绍下，也算是一种推广。人与人相处，尤其是陌生人相处是需要有礼节的，你永远不知道坐在你对面的人，他背后有什么样的能量。","link":"/2018/07/20/the-quality-of-a-company-first-look-at-HR-department/"},{"title":"Eggjs Boot","text":"#PrefaceThis article will introduce the boot of Eggjs that is a Node.js web framework. It is based on Koa and can satisfy your requirement through a large of plugins and middleware, even a your own framework. It is very important to create a cluster, an agent process and some worker processes when it is running. The cluster makes it stronger. Next, we can understand it by reading the source code. Eggjs has a few major libs, egg-core、egg、egg-cluster、egg-bin、egg-scripts and so on. egg-core: it extends Koa and is as a parent object of every agent and worker. egg: it defines some actions for agent and worker, you can almost use these actions to create an app of a single process. egg-cluster: it creates a cluster and manages them. egg-scripts and Egg-bin: their job is run the whole app in a different environment. Tips: We will discuss Eggjs with basing 2.x.x version. #Scan Libs Code* The directory and the code segment are not whole content after this post, these major are only for a better explanation. egg-core123456— lib — / loader (dir) — mixin (dir) — utils (dir) egg.js lifecycle.js The above is the directory structure of egg-core.The egg.js and folder of the loader are important to point for this lib. See egg.js 12345678910111213141516171819202122232425262728293031323334const KoaApplication = require('koa')const Lifecycle = require('./lifecycle')class EggCore extends KoaApplication &#123; constructor(options = &#123;&#125;) &#123; // ... this.lifecycle = new Lifecycle(&#123; baseDir: options.baseDir, app: this, logger: this.console &#125;) const Loader = this[EGG_LOADER] assert(Loader, \"Symbol.for('egg#loader') is required\") this.loader = new Loader(&#123; baseDir: options.baseDir, app: this, plugins: options.plugins, logger: this.console, serverScope: options.serverScope, env: options.env &#125;) // ... &#125; beforeStart(scope) &#123; this.lifecycle.registerBeforeStart(scope) &#125; ready(flagOrFunction) &#123; return this.lifecycle.ready(flagOrFunction) &#125; get [EGG_LOADER]() &#123; return require('./loader/egg_loader') &#125;&#125; First, we can know why it is called that bases on Koa because EggCore extends KoaApplication. Second, it defines a few new fields in the construction function, such as lifecycle and loader. The loader field helps app for creating important feature include config、plugin、controller、extend、router、middleware、service and so on, it will load some js file in the special directory when the app is starting. Another side, both beforeStart and ready often are called when we need to write some plugins. egg123456789101112— / app— / config— / lib - / core - / messenger - / jsdoc - / loader - agent.js - application.js - egg.js - start.js- index.js There is an egg.js file that is the same name in the egg-core, but it bases on EggCore Class and extends the lifecycle field, creates new messenger field and cluster field and dumps app config info. See egg.js 123456789101112131415161718192021222324252627282930313233343536373839404142const EggCore = require('egg-core').EggCoreconst cluster = require('cluster-client')const Messenger = require('./core/messenger')class EggApplication extends EggCore &#123; constructor(options = &#123;&#125;) &#123; this.loader.loadConfig() this.messenger = Messenger.create(this) // trigger serverDidReady hook when all app workers // and agent worker is ready this.messenger.once('egg-ready', () =&gt; &#123; this.lifecycle.triggerServerDidReady() &#125;) this.ready(() =&gt; process.nextTick(() =&gt; &#123; const dumpStartTime = Date.now() this.dumpConfig() this.dumpTiming() this.coreLogger.info( '[egg:core] dump config after ready, %s', ms(Date.now() - dumpStartTime) ) &#125;) ) this.cluster = (clientClass, options) =&gt; &#123; options = Object.assign(&#123;&#125;, this.config.clusterClient, options, &#123; singleMode: this.options.mode === 'single', // cluster need a port that can't conflict on the environment port: this.options.clusterPort, // agent worker is leader, app workers are follower isLeader: this.type === 'agent', logger: this.coreLogger &#125;) const client = cluster(clientClass, options) this._patchClusterClient(client) return client &#125; &#125;&#125; See agent.js and application.js 12345678910111213141516171819202122232425262728293031// agent.jsconst EggApplication = require('./egg')const AgentWorkerLoader = require('./loader').AgentWorkerLoaderconst EGG_LOADER = Symbol.for('egg#loader')class Agent extends EggApplication &#123; constructor(options = &#123;&#125;) &#123; options.type = 'agent' super(options) this.loader.load() &#125; get [EGG_LOADER]() &#123; return AgentWorkerLoader &#125;&#125;// application.jsconst EggApplication = require('./egg')const AgentWorkerLoader = require('./loader').AppWorkerLoaderconst EGG_LOADER = Symbol.for('egg#loader')class Application extends EggApplication &#123; constructor(options = &#123;&#125;) &#123; options.type = 'application' super(options) this.loader.load() &#125; get [EGG_LOADER]() &#123; return AppWorkerLoader &#125;&#125; We can see that they override the _EGG_LOADER_ property, which uses to create a new loader field in the construction of EggCore that is their parent class. Finally, they call the load function. We have the base application code. rNext, look a few of libs for starting web app. egg-scripts and egg-binBoth these libs start the web app in a different environment. Egg-scripts is easier and more clear, uses the production environment. Egg-bin has much code for helping debug, dev, test and so on, we usually use it in the dev, debug or test environment. We almost don’t know them at most of time. 1234567891011// package.json&#123; \"scripts\": &#123; \"start\": \"env egg-scripts start\", \"dev\": \"env egg-bin dev\", \"stop\": \"egg-scripts stop\", \"debug\": \"egg-bin debug\", \"test\": \"npm run lint -- --fix &amp;&amp; npm run test-local\", \"test-local\": \"env egg-bin test\", \"cov\": \"egg-bin cov\"&#125; The scripts command of this eggjs app conforms to the above description. egg-clusterThe cluster is an important feature for Eggjs. This lib is a bridge for connecting one single agent process and many workers processes. It like a manager. 123456- / lib - / utils - agent_worker.js - app_worker.js - master.js- index.js I had written an article about egg-cluster in Chinese. I always think this is the core of Eggjs, so I will explain the whole Eggjs framework around it. #From start to getting the first requestWhat happens when we input npm run dev or npm start in the terminal? egg-scripts(prod): it can require framework by child_process.spawn and calls startCluster function. egg-bin(dev): it can require framework by child_process.fork and calls startCluster function. [parent process]: The command of running is in one process called the parent process. The system will create a new process called the master process when the parent process requires a framework.As usual, the framework is the file path of Eggjs.If you want to use a custom framework, you can add a param in the command, such as --framework { your path } Pseudo Code 123456789// egg-scripts// parent processconst spawn = require('child_process').spawn // create new processspawn('node', 'require(&#123;&#123; framework path &#125;&#125;).startCluster(...)', options))// egg-bin// parent processconst cp = require('child_process')cp.fork('require(&#123;&#123; framework path &#125;&#125;).startCluster(...)', args, options) // create new process Egg-scripts uses spawn function to require framework while egg-scripts calls fork function.The latter is a special case of the former. Egg-bin has more code than egg-scripts, these features help us for developing or debug the app. We have two processes. In general, this newly created process is called the master process. Why is the master process called birdge? 12// egg index.jsexports.startCluster = require('egg-cluster').startCluster Actually, we exec egg-cluster‘s startCluster function when we require the framework. We open index.js file in the egg-cluster lib. First, it is real enter point for whole web app. 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106// index.jsconst Master = require('./lib/master')exports.startCluster = function(options, callback) &#123; new Master(options).ready(callback)&#125;// ./lib/master.jsconst ready = require('get-ready')const detectPort = require('detect-port')const Manager = require('./utils/manager')const Messenger = require('./utils/messenger')class Master extends EventEmitter &#123; constructor(options) &#123; super() this.options = parseOptions(options) this.workerManager = new Manager() this.messenger = new Messenger(this) ready.mixin(this) this.ready(() =&gt; &#123; this.isStarted = true const action = 'egg-ready' this.messenger.send(&#123; action, to: 'parent', data: &#123; port: this[REALPORT], address: this[APP_ADDRESS] &#125; &#125;) this.messenger.send(&#123; action, to: 'app', data: this.options &#125;) this.messenger.send(&#123; action, to: 'agent', data: this.options &#125;) // start check agent and worker status if (this.isProduction) &#123; this.workerManager.startCheck() &#125; &#125;) // fork app workers after agent started this.once('agent-start', this.forkAppWorkers.bind(this)) detectPort((err, port) =&gt; &#123; /* istanbul ignore if */ if (err) &#123; err.name = 'ClusterPortConflictError' err.message = '[master] try get free port error, ' + err.message this.logger.error(err) process.exit(1) &#125; this.options.clusterPort = port this.forkAgentWorker() &#125;) &#125; forkAppWorkers() &#123; // ... cluster.on('fork', worker =&gt; &#123; // ... worker.on('message', msg =&gt; &#123; if (typeof msg === 'string') msg = &#123; action: msg, data: msg &#125;; msg.from = 'app'; this.messenger.send(msg); &#125;); // ... &#125;) &#125; forkAgentWorker() &#123; // ... agentWorker.on('message', msg =&gt; &#123; if (typeof msg === 'string') msg = &#123; action: msg, data: msg &#125;; msg.from = 'agent'; this.messenger.send(msg); &#125;); // ... &#125;&#125;// the callback of ready function will be trigger after all major boots had been loaded// forkAgentWorkerconst agent = new Agent(options)agent.ready(err =&gt; &#123; if (err) return process.send(&#123; action: 'agent-start', to: 'master' &#125;)&#125;)// fork a single workerconst app = new Application(options);function startServer(err) &#123; let server; if (options.https) &#123; const httpsOptions = Object.assign(&#123;&#125;, options.https, &#123; key: fs.readFileSync(options.https.key), cert: fs.readFileSync(options.https.cert), &#125;); server = require('https').createServer(httpsOptions, app.callback()); &#125; else &#123; server = require('http').createServer(app.callback()); &#125; // emit `server` event in app app.emit('server', server); server.listen(...args);&#125;app.ready(startServer); On the other hand, this web will be constructed during creating a Master object. workerManager: it will hold on all worker porcesses. messenger: we make master a transit station that helps process for communicating (IPC). If you read more code, you can get it. I have said above that it is a bridge. I have write an article(Chinese)) about it. The Master maintains a Messenger instance (egg-cluster/lib/utils/messenger.js) EggApplication maintain the other Messenge instance （egg/lib/core/messenger.js） Both the agent and worker process base on EggApplication, them can send info to the master process creating them when calling Messenger. The master process is according to entering params to transmit to the agent or worker, you read forkAppWorkers and forkAgentWorker function in the master ready.mixin &amp; this.ready: ‘get-ready’ often is used by the official when an object need trigger a few callbacks after it whole initializes. Here it will broadcast an event to the parent, workers and then agent process, telling them that I am ok. detectPort: apply for an available port, default is 7001.If Successly, it will fork an agent process and register a callback message for new created an agent object. [agent process]: create new Agent and run loadPlugin, loadConfig, loadAgentExtend, loadContextExtend, and loadCustomAgent. loadPlugin: find all plugin, record their dir paths =&gt; this.dirs loadConfig: merge all config, the config content of the app level is more priority than the framework and the latter is more priority than the plugin. loadAgentExtend: load and merge all of the extending of agent object (app &gt; plugin &gt; core) loadContextExtend: load and merge all of the extending of context object (app &gt; plugin &gt; core) loadCustomAgent: it is important that the lifecycle of app boot will be serially triggered. This lifecycle field is defined in EggCore constructor, we can look at the whole process in the yellow background under the image.【Application Startup Configuration(official)】. It help you for better writing a few plugins. Last, all major boots had been loaded, the agent process will trigger function registered in the callback array, such as sending &#39;agent-start&#39; to the master process. [master process]: start to fork a few worker processes in accordance with specifying or using the default being CPU kernel count after the master process get &#39;agent-start&#39; message from the agent process. It will open a new relatable load, we take a single worker process example. [a single worker process]: create new Agent and run loadPlugin, loadConfig, loadApplicationExtend, loadRequestExtend, loadResponseExtend, loadContextExtend, loadHelperExtend, loadCustomApp, loadService, loadMiddleware, loadController, loadRouter, and loadCustomLoader. loadPlugin: same as the agent loadConfig: same as the agent loadApplicationExtend: same as the agent (app &gt; plugin &gt; core) loadRequestExtend: load and merge all of the extending of request object (app &gt; plugin &gt; core) loadResponseExtend: load and merge all of the extending of response object (app &gt; plugin &gt; core) loadContextExtend: same as the agent loadHelperExtend: load and merge all of the extending of helper object (app &gt; plugin &gt; core) loadCustomApp: same as the agent （app &gt; plugin） loadService: load and merge all of the extending of helper object （app &gt; plugin） loadMiddleware: load middlewares and iterate them =&gt; mw, if it conforms the middleware standard, it will be used with app.use(mw) （app &gt; plugin &gt; core） loadController: iterate all controllers’ functions =&gt; key, wrap a function, make it be a middleware function and is bound to controller.xxx.xxx (only app). This middleware will be triggered when getting a new request, the Controller is defined in the app/controller directory and the key is it’s function. 123456789function methodToMiddleware(Controller, key) &#123; return function classControllerMiddleware(...args) &#123; const controller = new Controller(this); if (!this.app.config.controller || !this.app.config.controller.supportParams) &#123; args = [ this ]; &#125; return utils.callFn(controller[key], args, controller); &#125;;&#125; loadRouter: it makes request’s path associated with the controllers’ function that has been become to middleware (only app) loadCustomLoader: load ourselves function to create some built-in objects for app object or other.Customloader [master process]: it listens to all worker processes and triggers the master’s ready once they have finished booting. send egg-ready to the parent process, the agent process, the app worker processes Last, traverse BOOTS and run serverDidReady function of each item. It is the whole boot for Eggjs framework but doesn’t include, such as restarting a worker process when it exits or disconnects, shuting down… Second, every process is alone if we have not the master. It like a bridge organizing all island, from creation to IPC. What happens when web app get an Http request? We only discuss Eggjs code in the applaction layer. :) The agent can’t deal with any request because it doesn’t listen port. All request always hand over to workers. We look at creating worker code, it will run a app.callback function and listen port when it has booted. This callback is the members of Appliaction in Koa. If server get new request, it will create a new context and handle it. In Eggjs, this handleRequest function has been overwrited. Last, the framework will iterate over all middleware under the current route including the converted controller’s function. 1234567891011121314151617181920212223242526272829303132// koa/lib/applicationclass Application extends Emitter &#123; callback() &#123; const fn = compose(this.middleware); if (!this.listenerCount('error')) this.on('error', this.onerror); const handleRequest = (req, res) =&gt; &#123; const ctx = this.createContext(req, res); return this.handleRequest(ctx, fn); &#125;; return handleRequest; &#125; handleRequest(ctx, fnMiddleware) &#123; const res = ctx.res; res.statusCode = 404; const onerror = err =&gt; ctx.onerror(err); const handleResponse = () =&gt; respond(ctx); onFinished(res, onerror); return fnMiddleware(ctx).then(handleResponse).catch(onerror); &#125;&#125;// egg/lib/applicationclass Application extends EggApplication &#123; handleRequest(ctx, fnMiddleware) &#123; this.emit('request', ctx) super.handleRequest(ctx, fnMiddleware) onFinished(ctx.res, () =&gt; this.emit('response', ctx)) &#125;&#125; In summary, we have know how to boot web app and deal with request in Eggjs. When we know it, we can easily write some plugins and middlewares to finish the business requirements.","link":"/2019/05/09/egg-boot/"},{"title":"CSS、JS文件对网页的影响","text":"我们常说浏览器是单线程的，那么我们在加载资源的时候页面是在等待加载完成呢？还是继续执行后续的操作？加载不同资源对浏览器的操作会有相同响应吗？我们可以通过一个一个简单的实验测试来了解。 环境所有资源均在localhost，浏览器chrome 69，不同浏览器或版本会有少许不同 – css css1.css 2秒后返回 body { background-color: #444 } css2.css 立即返回 body { font-size: 50px;font-weight: bold; } – js js1.js 1秒后返回 console.log(“js1.js loaded”) js2.js 立即返回 console.log(“js2.js loaded”) js3.js 3秒后返回 console.log(“js2.js loaded”) – image img1.png 3秒后 返回一张黄色js图片 img2.png 立即返回一张 nodejs图片 服务器端代码： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263const Koa = require('koa')const Router = require('koa-router')const views = require('koa-views')const fs = require('fs')const app = new Koa()const router = new Router()app.use(views(__dirname + '/views'))router.get('/', async (ctx, next) =&gt; &#123; await ctx.render('index.html')&#125;)router.get('/css1.css', async ctx =&gt; new Promise(resolve =&gt; &#123; setTimeout(function () &#123; ctx.set('Content-Type', 'text/css') ctx.body = 'body &#123; background-color: #444 &#125;' resolve() &#125;, 1000 * 2)&#125;))router.get('/css2.css', async ctx =&gt; &#123; ctx.set('Content-Type', 'text/css') ctx.body = 'body &#123; font-size: 50px;font-weight: bold; &#125;'&#125;)router.get('/js1.js', async ctx =&gt; new Promise(resolve =&gt; &#123; setTimeout(function () &#123; ctx.body = 'console.log(\"js1.js loaded\")' resolve() &#125;, 1000)&#125;))router.get('/js2.js', async ctx =&gt; &#123; ctx.body = 'console.log(\"js2.js loaded\")'&#125;)router.get('/js3.js', async ctx =&gt; new Promise(resolve =&gt; &#123; setTimeout(function () &#123; ctx.body = 'console.log(\"js3.js loaded\")' resolve() &#125;, 1000 * 3)&#125;))router.get('/img1.png', async ctx =&gt; new Promise(resolve =&gt; &#123; setTimeout(function () &#123; ctx.set('Content-Type', 'image/png; charset=UTF-8') ctx.body = fs.createReadStream('1.png') resolve() &#125;, 1000 * 3)&#125;))router.get('/img2.png', async ctx =&gt; &#123; ctx.set('Content-Type', 'image/png; charset=UTF-8') ctx.body = fs.createReadStream('2.png')&#125;)app .use(router.routes()) .use(router.allowedMethods())app.listen(3000) 实验一： CSS加载是否影响DOM解析index.html 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('test') &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; setTimeout(function() &#123; const el = document.getElementById('app') console.log(el) &#125;, 0) &lt;/script&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css1.css\" /&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css2.css\" /&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt; &lt;img style=\"width: 100px\" src=\"/img1.png\" /&gt; &lt;img style=\"width: 100px\" src=\"/img2.png\" /&gt;&lt;/body&gt;&lt;script type=\"text/javascript\"&gt; console.timeEnd('test')&lt;/script&gt;&lt;/html&gt;&lt;!-- console 输出app元素对象test: 1947.620849609375ms--&gt; 从控制台的输出可以看到 app 元素会被正确输出，2秒左右再输出 test 的时间，可见CSS加载并不会阻碍DOM解析。 实验二： CSS加载是否影响JS执行和DOM渲染index.html 123456789101112131415161718192021222324252627&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('test') &lt;/script&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css1.css\" /&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css2.css\" /&gt; &lt;script type=\"text/javascript\" src=\"/js1.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/js2.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt; &lt;img style=\"width: 100px\" src=\"/img1.png\" /&gt; &lt;img style=\"width: 100px\" src=\"/img2.png\" /&gt;&lt;/body&gt;&lt;script type=\"text/javascript\"&gt; console.timeEnd('test')&lt;/script&gt;&lt;/html&gt;&lt;!-- console 输出js1.js loadedjs2.js loaded(index):17 test: 1921.02099609375ms--&gt; 当打开index.html页面后，会发现所有资源均同时发起了请求，页面会先处于白屏加载状态（DOM无法渲染），当2秒（左右）后页面除img1.png未渲染外，其它样式和图片均渲染。 从控制台的输出可以看出，虽然js比css快1秒左右加载完毕，但是此刻是处于阻塞状态并没有执行，当css加载完成后，才从上至下的执行（虽然js2.js比js1.js早加载好，但是执行的时候还是从上至下的），当css1.css加载完成后，页面立即渲染，图片img1.png晚1秒左右显示。可见CSS加载会阻碍JS执行和DOM的渲染。 实验三： JS加载是否影响DOM解析和渲染index.html 123456789101112131415161718192021222324252627282930&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('test') &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; setTimeout(function() &#123; const el = document.getElementById('app') console.log(el) &#125;, 0) &lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/js3.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt; &lt;img style=\"width: 100px\" src=\"/img1.png\" /&gt; &lt;img style=\"width: 100px\" src=\"/img2.png\" /&gt;&lt;/body&gt;&lt;script type=\"text/javascript\"&gt; console.timeEnd('test')&lt;/script&gt;&lt;/html&gt;&lt;!-- console 输出nulljs3.js loadedtest: 2943.9951171875ms--&gt; 我们仅引入一个js3.js文件，设置它的返回时间为3秒，从控制台的输出可以看到 app 元素没有被正确输出（输出null），3秒左右再输出 test 的时间，可见JS加载会阻碍DOM解析，既然解析都被影响自然必定影响渲染了。 实验四： DOM的DOMContentLoaded和onLoad事件index.html 123456789101112131415161718192021222324252627282930313233343536373839&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('test') console.time('testDOMContentLoaded') console.time('testonload') &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; document.addEventListener('DOMContentLoaded', function () &#123; console.timeEnd('testDOMContentLoaded') &#125;, false) window.onload = function () &#123; console.timeEnd('testonload') &#125; &lt;/script&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css1.css\" /&gt; &lt;link rel=\"stylesheet\" type=\"text/css\" href=\"/css2.css\" /&gt; &lt;script type=\"text/javascript\" src=\"/js1.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\" src=\"/js2.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt; &lt;img style=\"width: 100px\" src=\"/img1.png\" /&gt; &lt;img style=\"width: 100px\" src=\"/img2.png\" /&gt;&lt;/body&gt;&lt;script type=\"text/javascript\"&gt; console.timeEnd('test')&lt;/script&gt;&lt;/html&gt;&lt;!-- console 输出js1.js loadedjs2.js loadedtest: 1955.489990234375mstestDOMContentLoaded: 1956.044189453125mstestonload: 2964.078857421875ms--&gt; 我们通过控制台会发现 testDOMContentLoaded 会在2秒左右打印出来，testonload会在3秒左右打印出来，由此可知DOMContentLoaded是js和css文件的加载后触发，onload是整个页面所有资源加载完后触发（比如图片等）。 实验五： script async 属性index.html 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('testDOMContentLoaded') &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; document.addEventListener('DOMContentLoaded', function () &#123; console.timeEnd('testDOMContentLoaded') &#125;, false) &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; setTimeout(function() &#123; const el = document.getElementById('app') console.log(el) &#125;, 0) &lt;/script&gt; &lt;script async type=\"text/javascript\" src=\"/js1.js\"&gt;&lt;/script&gt; &lt;script async type=\"text/javascript\" src=\"/js2.js\"&gt;&lt;/script&gt; &lt;script async type=\"text/javascript\" src=\"/js3.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3个js文件都加上”async”,会发现输出顺序是 testDOMContentLoaded 会立即打印出来 app元素对象 js2.js loaded js1.js loaded js3.js loaded 之后我们将js1.js上的”async”移除，会发现输出顺序是 el 为 null js1.js loaded testDOMContentLoaded 1秒左右时间 js2.js loaded js3.js loaded 之后我们将js3.js上的”async”移除，会发现输出顺序是 el 为 null js1.js loaded js2.js loaded js3.js loaded testDOMContentLoaded 3秒左右时间 可见async会打乱js的执行顺序，有async的js文件哪个先加载完哪个先执行，DOMContentLoaded的触发时间不在和async有关系，不会影响页面的渲染和解析 实验六： script defer 属性index.html 1234567891011121314151617181920212223242526&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('testDOMContentLoaded') &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; document.addEventListener('DOMContentLoaded', function () &#123; console.timeEnd('testDOMContentLoaded') &#125;, false) &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; setTimeout(function() &#123; const el = document.getElementById('app') console.log(el) &#125;, 0) &lt;/script&gt; &lt;script defer type=\"text/javascript\" src=\"/js1.js\"&gt;&lt;/script&gt; &lt;script defer type=\"text/javascript\" src=\"/js2.js\"&gt;&lt;/script&gt; &lt;script defer type=\"text/javascript\" src=\"/js3.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3个js文件都加上”defer”,会发现输出顺序是 app元素对象 js1.js loaded js2.js loaded js3.js loaded testDOMContentLoaded 3秒左右时间 这和没有加defer和async时一样 之后我们将js1.js上的”defer”移除，会发现输出顺序是 el 为 null js1.js loaded js2.js loaded js3.js loaded testDOMContentLoaded 3秒左右时间 这和没有加defer和async时一样 之后我们将js3.js上的”defer”移除，会发现输出顺序是 js1.js loaded js3.js loaded js2.js loaded testDOMContentLoaded 3秒左右时间 可见defer会打乱js的执行顺序，有defer的js文件会晚于没有的，但是它们（含有defer）依旧保持从上而下依次执行，DOMContentLoaded的触发时间晚于defer，不会影响页面的渲染和解析 实验七： script defer &amp; async 都加上 属性index.html 1234567891011121314151617181920&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('testDOMContentLoaded') &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; document.addEventListener('DOMContentLoaded', function () &#123; console.timeEnd('testDOMContentLoaded') &#125;, false) &lt;/script&gt; &lt;script async defer type=\"text/javascript\" src=\"/js1.js\"&gt;&lt;/script&gt; &lt;script async defer type=\"text/javascript\" src=\"/js2.js\"&gt;&lt;/script&gt; &lt;script async defer type=\"text/javascript\" src=\"/js3.js\"&gt;&lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; 3个js文件都加上”async”,会发现输出顺序是 testDOMContentLoaded 会立即打印出来 js2.js loaded js1.js loaded js3.js loaded async优先级比defer高 实验八： 动态创建scriptindex.html 12345678910111213141516171819202122232425262728293031&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('testDOMContentLoaded') &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; document.addEventListener('DOMContentLoaded', function () &#123; console.timeEnd('testDOMContentLoaded') &#125;, false) setTimeout(function () &#123; var appEl = document.getElementById('app') console.log(appEl) &#125;, 0) &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; var head = document.getElementsByTagName('head')[0] for (var i = 0; i &lt; 3; i++) &#123; var script = document.createElement('script') script.type = 'text/javascript' script.src = 'js' + (i + 1) + '.js' head.appendChild(script) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; testDOMContentLoaded 会立即打印出来 appEl 对象 js2.js loaded js1.js loaded js3.js loaded 如果我们动态创建js1.js和js2.js，将js3.js依旧按照常规写法写在页面中的话 index.html1234567891011121314151617181920212223242526272829303132&lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt; &lt;title&gt;&lt;/title&gt; &lt;script type=\"text/javascript\"&gt; console.time('testDOMContentLoaded') &lt;/script&gt; &lt;script type=\"text/javascript\"&gt; document.addEventListener('DOMContentLoaded', function () &#123; console.timeEnd('testDOMContentLoaded') &#125;, false) setTimeout(function () &#123; var appEl = document.getElementById('app') console.log(appEl) &#125;, 0) &lt;/script&gt; &lt;script type=\"text/javascript\" src=\"js3.js\"&gt;&lt;/script&gt; &lt;script type=\"text/javascript\"&gt; var head = document.getElementsByTagName('head')[0] for (var i = 0; i &lt; 2; i++) &#123; var script = document.createElement('script') script.type = 'text/javascript' script.src = 'js' + (i + 1) + '.js' head.appendChild(script) &#125; &lt;/script&gt;&lt;/head&gt;&lt;body&gt; &lt;div id=\"app\"&gt;hello world&lt;/div&gt;&lt;/body&gt;&lt;/html&gt; appEl 为 null 立即打印出来 js3.js loaded testDOMContentLoaded 3秒左右会立即打印出来 js2.js loaded js1.js loaded 可见动态创建script基本是同时加载，哪个先加载完哪个先执行，但是他们都晚于DOMContentLoaded事件 总结CSS加载会阻塞DOM渲染和JS执行，但是不影响页DOM解析；JS加载会阻塞DOM解析和渲染，给script标签加上defer &amp; async属性将不再影响DOM解析和渲染，async 是哪个先返回先执行按个，defer会晚于常规标签同时按照含有defer属性的script加载的顺序执行","link":"/2018/09/30/js-css-image-loading/"},{"title":"Vue Component 继承与复用","text":"在做Web前端开发的时候会有大量的页面复用的地方，从UI布局到JS的逻辑。早年做后端开发的时候，我们通常可以通过面向对象的编程法式，使用抽象类、接口等等，那么现在前端是否也可以如此呢？ 答案自然是肯定的，所以我们找工作面试的时候常被问及关于JS继承的问题，随之ES6出现了期盼已久的Class，一切都在往更为成熟的方向发展。接下我们以Vue为例，看看怎么去做继承这件事情。 需求描述简单实现2个列表页面，一个是管理员列表、一个用户列表 从上可以看出2个页面整体页面结构相同，在具体细节上会有些少于不同，第一反应就是使用前文提到的继承之类的东西去实现它。 环境 Vue 版本 2.5 Element-UI （仅仅使得Demo看上去不那么丑） 测试代码 步骤通过vue cli工具创建项目1vue create vue-component-extedns 此刻我们可以拥有一个Vue的默认开发目录结构和代码，我开始对其进行修改 引入Element-UI 123456789101112// main.js import Vue from 'vue'import ElementUI from 'element-ui'import 'element-ui/lib/theme-chalk/index.css'import App from './App.vue'Vue.config.productionTip = falseVue.use(ElementUI)new Vue(&#123; render: h =&gt; h(App)&#125;).$mount('#app') 在components目录下分别创建ListPageAbstract.vue、AdminPageAbstract.vue、ButtonClick.vue和Title.vue 下面代码很多可以先跳过，看后续的介绍 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103104105106107108109110111112113114115116117118119120121122123124125126127128129130131132133134135136137138139140141142143144145146147148149150151152153154155156157158159160161162163164165166167168169170// ButtonClick.vue&lt;template&gt;&lt;div&gt; &lt;el-button size=\"small\" plain type=\"primary\" @click.stop=\"click\"&gt; &#123;&#123; label &#125;&#125; &lt;/el-button&gt;&lt;/div&gt;&lt;/template&gt;&lt;script type=\"text/javascript\"&gt; export default &#123; props: ['click', 'label', 'opt'], mounted () &#123; console.log('ButtonClick mounted') &#125; &#125;&lt;/script&gt;// Title.vue&lt;template&gt; &lt;div class=\"title\"&gt;&#123;&#123; title &#125;&#125;&lt;/div&gt;&lt;/template&gt;&lt;script type=\"text/javascript\"&gt;export default &#123; props: ['title']&#125;&lt;/script&gt;// ListPageAbstract.vue&lt;template&gt; &lt;div&gt; &lt;Title :title=\"title\" /&gt; &lt;div&gt; &lt;el-form v-if=\"config &amp;&amp; config.filter\" ref='form' :inline=\"true\" :model=\"filterForm\"&gt; &lt;el-form-item v-if=\"config.filter.conditions.indexOf('name') &gt;= 0\" label=\"名字\" prop=\"name\"&gt; &lt;el-input v-model=\"filterForm.name\"&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item v-if=\"config.filter.conditions.indexOf('phone') &gt;= 0\" label=\"手机\" prop=\"date\"&gt; &lt;el-input v-model=\"filterForm.date\"&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item v-if=\"config.filter.conditions.indexOf('date') &gt;= 0\" label=\"时间\" prop=\"date\"&gt; &lt;el-input v-model=\"filterForm.date\"&gt;&lt;/el-input&gt; &lt;/el-form-item&gt; &lt;el-form-item v-if=\"config.filter.conditions.indexOf('status') &gt;= 0\" label=\"状态\" prop=\"status\"&gt; &lt;el-select v-model=\"filterForm.status\" placeholder=\"请选择\"&gt; &lt;el-option v-for=\"option in statusOptions\" :label=\"option.text\" :value=\"option.value\" :key=\"option.value\"&gt;&lt;/el-option&gt; &lt;/el-select&gt; &lt;/el-form-item&gt; &lt;!-- &lt;div&gt; &lt;slot name=\"filter-slot\"&gt;&lt;/slot&gt; &lt;/div&gt; --&gt; &lt;el-form-item&gt; &lt;el-button type=\"primary\" @click.stop=\"config.filter.action\"&gt;提交&lt;/el-button&gt; &lt;/el-form-item&gt; &lt;/el-form&gt; &lt;/div&gt; &lt;el-table v-if=\"config\" :data=\"list\" &gt; &lt;el-table-column v-for=\"(item, index) in config.table.column\" :key=\"index\" :prop=\"item.key\" :label=\"item.label\"&gt; &lt;/el-table-column&gt; &lt;el-table-column v-if=\"config.table.action\" :label=\"config.table.action.headerLabel\"&gt; &lt;template slot-scope=\"scope\"&gt; &lt;Button :click=\"config.table.action.click.bind(null, scope.row)\" :label=\"config.table.action.label\" :opt=\"config.table.action\" /&gt; &lt;/template&gt; &lt;/el-table-column&gt; &lt;/el-table&gt; &lt;/div&gt;&lt;/template&gt;&lt;script type=\"text/javascript\"&gt;import Button from './ButtonClick.vue'import Title from './Title.vue'export default &#123; components: &#123; Button, Title &#125;, data: function () &#123; return &#123; filterForm: &#123; &#125;, statusOptions: [], list: [], title: null, config: null &#125; &#125;, mounted: function () &#123; this.config = this.createConfig() this.fetchOptions() this.fetchData() &#125;, methods: &#123; createConfig () &#123; let config = &#123;&#125; config.filter = &#123; conditions: [ 'name', 'status' ], action: () =&gt; &#123; this.fetchData(this.filterForm) &#125; &#125; config.table = &#123; column: [ &#123; key: 'name', label: '用户名' &#125;, &#123; key: 'phone', label: '手机号码' &#125;, &#123; key: 'status', label: '状态' &#125; ], action: &#123; headerLabel: '操作', label: '修改', click: this.editRow &#125; &#125; return config &#125;, fetchOptions () &#123; this.statusOptions = [ &#123; value: 1, text: 'status1' &#125;, &#123; value: 2, text: 'status2' &#125; ] &#125;, async fetchData () &#123; &#125;, editRow (item) &#123; console.log(`update data =&gt; $&#123;item.name&#125;`) &#125; &#125;&#125;&lt;/script&gt;&lt;style type=\"text/css\"&gt;.title &#123; color: red; margin-bottom: 20px;&#125;&lt;/style&gt;// AdminListPage.vue&lt;script type=\"text/javascript\"&gt;import ListPageAbstract from './ListPageAbstract'// 模拟ajax请求// 仅做了名字的模糊查询，其他参数忽略function search (opt) &#123; return new Promise((resolve) =&gt; &#123; let list = [ &#123; name: 'Admin Peter', phone: '313141414', status: 'status1', date: '2018-10-10' &#125;, &#123; name: 'Admin Marry', phone: '123931873', status: 'status2', date: '2018-11-11' &#125;, &#123; name: 'Admin Sue', phone: '342391873', status: 'status1', date: '2018-01-01' &#125;, &#123; name: 'Admin Join', phone: '143391873', status: 'status1', date: '2018-12-12' &#125; ] if (opt.name) &#123; list = list.filter(item =&gt; item.name.match(opt.name)) &#125; setTimeout(() =&gt; &#123; resolve(list) &#125;, 1000) &#125;)&#125;export default &#123; extends: ListPageAbstract, data () &#123; return &#123; title: '管理员列表' &#125; &#125;, methods: &#123; fetchOptions () &#123; ListPageAbstract.methods.fetchOptions.call(this) console.log('to do other thing') &#125;, async fetchData () &#123; let list = await search(this.filterForm) this.list = list &#125; &#125;&#125;&lt;/script&gt; 刷新页面就能呈现上述图一展示的样子和功能了。那么洋洋洒洒这么多代码做了些什么呢？ Title.vue 用于显示页面的标题（之后我们用它测试下继承于ListPageAbstract.vue的组件如何重写css的问题） ButtonClick.vue 展示操作按钮和执行操作事件 ListPageAbstract.vue 抽象的列表组件，这里是作为例子，具体方法定义的粗细程度根据具体情况调节 AdminListPage.vue 管理员列表的具体组件 AdminListPage通过extends继承了ListPageAbstract的模板、样式和其JS代码，通过部分的重写或完善，很容易的实现了一个页面，看上去很美好。那么新的问题来了，我们也发现ListPageAbstract定义筛选的内容是有限的，目前仅仅有name、phone、date和status，如果想扩展该怎么办呢？用过Vue的朋友或许此刻会想到Slot，接下来我们注释掉ListPageAbstract.vue里关于filter-slot的注释，并为AdminListPage.vue添加相关slot代码。 1234567// AdminListPage.vue add template &lt;template slot=\"filter-slot\"&gt; &lt;div slot=\"filter-slot\"&gt; other input filter &lt;/div&gt;&lt;/template&gt;&lt;script type=\"text/javascript\"&gt; 刷新页面，页面仅仅留下了“other input filter”一串字符串，并没有实现我们的需求；也有人提出其它修改意见 123456789101112131415// AdminListPage.vue &lt;template slot=\"filter-slot\"&gt; &lt;Page&gt; &lt;div slot=\"filter-slot\"&gt; other input filter &lt;/div&gt; &lt;/Page&gt;&lt;/template&gt;export default &#123; extends: ListPageAbstract, components: &#123; Page: ListPageAbstract, &#125; // ...&#125; 虽然页面UI层是预期显示了，但是如果对ListPageAbstract的mounted方法打断点会发现，它被执行了2次，因为被实例化了2次，并且页面上的元素事件使用的是ListPageAbstract里的，而不是我们在Admin里面重写的，显然方法并不可行。关于Vue模板级别的继承扩展问题在github上有很多的吐槽，但并没有列为未来的新feature #6811 既然我们讨论这个问题，自然也是可以解决的，在这我们不以filter查询条件的多少为例子，我们以更为简单的按钮为例，在列表里每一行的最后有一个“修改”按钮，而然我们在UserListPage里面，我们希望它变成一个“删除”按钮，并弹出确实删除的提示。新增ButtonPop.vue和UserListPage.vue 又是很多代码，没兴趣可跳过 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172737475767778798081828384858687888990919293949596979899100101102103// ButtonPop.vue&lt;template&gt; &lt;div&gt; &lt;el-button size=\"small\" plain type=\"primary\" @click.stop=\"dialogVisible = true\"&gt;&#123;&#123; label &#125;&#125;&lt;/el-button&gt; &lt;el-dialog title=\"提示\" :visible.sync=\"dialogVisible\" width=\"30%\"&gt; &lt;span&gt;确认删除数据吗？&lt;/span&gt; &lt;span slot=\"footer\" class=\"dialog-footer\"&gt; &lt;el-button @click=\"dialogVisible = false\"&gt;取 消&lt;/el-button&gt; &lt;el-button type=\"primary\" @click=\"deleteInfo\"&gt;确 定&lt;/el-button&gt; &lt;/span&gt; &lt;/el-dialog&gt; &lt;/div&gt;&lt;/template&gt;&lt;script type=\"text/javascript\"&gt;export default &#123; props: ['click', 'label', 'opt'], data () &#123; return &#123; dialogVisible: false &#125; &#125;, mounted () &#123; console.log('ButtonPop mounted') &#125;, methods: &#123; async deleteInfo () &#123; await this.click() this.dialogVisible = false &#125; &#125;&#125;&lt;/script&gt;// UserListPage.vue&lt;script type=\"text/javascript\"&gt;import ListPageAbstract from './ListPageAbstract.vue'import Button from './ButtonPop.vue'// 模拟ajax请求// 仅做了名字的模糊查询，其他参数忽略function search (opt) &#123; return new Promise((resolve) =&gt; &#123; let list = [ &#123; name: 'User Peter', phone: '313141414', status: 'status1', date: '2018-10-10' &#125;, &#123; name: 'User Marry', phone: '123931873', status: 'status2', date: '2018-11-11' &#125;, &#123; name: 'User Sue', phone: '342391873', status: 'status1', date: '2018-01-01' &#125;, &#123; name: 'User Join', phone: '143391873', status: 'status1', date: '2018-12-12' &#125; ] if (opt.name) &#123; list = list.filter(item =&gt; item.name.match(opt.name)) &#125; setTimeout(() =&gt; &#123; resolve(list) &#125;, 1000) &#125;)&#125;export default &#123; extends: ListPageAbstract, components: &#123; Button &#125;, data: function () &#123; return &#123;&#125; &#125;, mounted: function () &#123; this.title = '用户列表' &#125;, methods: &#123; createConfig () &#123; // 用户名、创建时间、手机号、状态 let config = ListPageAbstract.methods.createConfig.call(this) config.filter.conditions.splice(1, 0, 'phone') let table = config.table table.column.push(&#123; key: 'date', label: '时间' &#125;) table.action = &#123; headerLabel: '操作', label: '删除', click: this.deleteRow &#125; return config &#125;, async fetchData () &#123; let list = await search(this.filterForm) this.list = list &#125;, deleteRow (item) &#123; return new Promise((resolve, reject) =&gt; &#123; console.log(`delete date: $&#123;item.name&#125;`) setTimeout(() =&gt; &#123; this.list.splice(this.list.indexOf(item), 1) resolve() &#125;, 1000) &#125;) &#125; &#125;&#125;&lt;/script&gt;&lt;style type=\"text/css\"&gt;.title &#123; margin-bottom: 50px; color: blue;&#125;&lt;/style&gt; 然后在修改下App.vue里面的Page引用，从AdminListPage改为UserListPage 刷新页面，就和图二的样子一样了。整个代码并不复杂，核心就是 1components: &#123; Button &#125; 它将父类的Button（ButtonClick）替换成了User页面需要的ButtonPop，实现了扩展。其实Filter查询条件也可以，只要我们做好组件的抽取等就行。 阅读Vue的源码时候，在Vue组件实例化的过程中，会有很多对options的深层次merge，使得我们可以通过上诉方法实现对父组件的扩展。 另外，细心的朋友观察代码或页面也发现“用户列表”4个字的颜色从红色变成了蓝色，与下面列表的间距也增大了不少，在User页面的style标签里就能很容易修改父组件的css样式。 在Vue中，mixin、slot都是非常好用的工具，或许我们有时候也能改变思路，通过组件的替换构建出一个更为容易扩展的框架。","link":"/2018/11/17/vue-component-extends/"},{"title":"前端错误捕获提交错误日志","text":"为什么需要捕获？前端代码运行在客户端的浏览器里，当客户端（浏览器）出现任何问题，在没有错误日志的情况下，我们都是不知道问题发生在哪，我们只能依靠猜测或者自己不断尝试才知道，或者永远不知道问题。 客户端怎么捕获？1.通过window.onerror，可惜只能获得基础的js错误，Promise、async/await 里的错误无法捕获，它收到同源决策的影响 2.Promise 通过catch方法 3.async/await 通过 try - catch 4.Vue可以通过全局Vue.config.errorHandler去获得非Promise、async/await里的错误，可以理解为Vue里的window.onerror 不同的捕获错误用法（测试环境 chrome &amp; https://jsbin.com）window.onerror123456789window.onerror = function(message, source, lineno, colno, error) &#123; /* message：错误信息（字符串）。可用于HTML onerror=\"\"处理程序中的event。 source：发生错误的脚本URL（字符串） lineno：发生错误的行号（数字） colno：发生错误的列号（数字） error：Error对象（对象） */&#125; 12345678910111213141516window.onerror = function () &#123; console.log(arguments)&#125;let datalet info = data.info/* console 输出[object Arguments] &#123; 0: \"Uncaught TypeError: Cannot read property 'info' of undefined\", 1: \"yiveral.js\", 2: 6, 3: 17, 4: [object Error] &#123; ... &#125;&#125;*/ 虽然onerror无法捕获Promise里的错误，但是如果Promise里面是被setTimeout包裹的js还是能捕获的 12345678910111213141516171819202122232425262728293031323334353637window.onerror = function () &#123; console.log(arguments)&#125;function timer () &#123; setTimeout(function () &#123; let data let info = data.info &#125;, 100)&#125;function p() &#123; return new Promise(function (resolve, reject) &#123; timer() &#125;).catch(function (error) &#123; console.log(error) console.log('inner error') &#125;)&#125;p().then(function() &#123; console.log('running then')&#125;).catch(function(error)&#123; console.log(error) console.log('outer error')&#125;)/* console 输出[object Arguments] &#123; 0: \"Uncaught TypeError: Cannot read property 'info' of undefined\", 1: \"yiveral.js\", 2: 8, 3: 22, 4: [object Error] &#123; ... &#125;&#125;*/ Promise catchQ：如果没有catch方法，是否能捕获Promise里的错误？1234567891011121314151617181920212223242526window.onerror = function () &#123; console.log(arguments) console.log('onerror')&#125;function errorFn () &#123; let data let info = data.info&#125;function p() &#123; return new Promise(function (resolve, reject) &#123; errorFn() &#125;)&#125;try &#123; p().then(function(res) &#123; console.log('running then') &#125;)&#125; catch (e) &#123; console.log(e) console.log('try - catch')&#125;/* console 没有任何输出*/ 我们通过上面的代码发现，Promise里的错误无论在try - catch还是onerror里都无法被捕获 123456789101112131415161718192021222324252627282930313233function errorFn () &#123; let data let info = data.info&#125;function p() &#123; return new Promise(function (resolve, reject) &#123; errorFn() &#125;).catch(function (error) &#123; console.log(error) console.log('inner error') return 'return inner error' &#125;)&#125;try &#123; p().then(function(res) &#123; console.log(res) console.log('running then') &#125;).catch(function(error)&#123; console.log(error) console.log('outer error') &#125;)&#125; catch (e) &#123; console.log(e) console.log('try - catch')&#125;/* console 输出[object Error] &#123; ... &#125;\"inner error\"\"return inner error\"\"running then\"*/ 通过上面代码发现，已经被捕获的错误代码，在外层不会再被捕获而是继续执行then里的方法，可见在一条Promise链上的错误，会被之后最近的catch捕获。 async/await 通过 try - catch123456789101112131415161718192021window.onerror = function () &#123; console.log(arguments)&#125;function errorFn () &#123; let data let info = data.info&#125;function p() &#123; return new Promise(function (resolve, reject) &#123; errorFn() &#125;)&#125;(async function () &#123; let res = await p() console.log(res)&#125;)()/* console 没有任何输出*/ 我们通过上面的代码发现，Promise构造函数里的错误并没有被onerror捕获 1234567891011121314151617181920212223window.onerror = function () &#123; console.log(arguments)&#125;function errorFn () &#123; let data let info = data.info&#125;function p() &#123; return new Promise(function (resolve, reject) &#123; resolve('resolve') &#125;)&#125;(async function () &#123; let res = await p() console.log('get res') errorFn()&#125;)()/* console 输出get res*/ 虽然Promise正常执行，但是当后续的代码出错onerror依旧没有被捕获 123456789101112131415161718192021222324function errorFn () &#123; let data let info = data.info&#125;function p() &#123; return new Promise(function (resolve, reject) &#123; errorFn() &#125;)&#125;(async function () &#123; try &#123; let res = await p() console.log(res) &#125; catch (e) &#123; console.log(e) console.log('try - catch') &#125;&#125;)()/* console 输出[object Error] &#123; ... &#125;\"try - catch\"*/ try - catch捕获了 1234567891011121314151617181920212223242526272829function errorFn () &#123; let data let info = data.info&#125;function p() &#123; return new Promise(function (resolve, reject) &#123; errorFn() &#125;).catch(function (error) &#123; console.log(error) console.log('inner error') return 'return inner error' &#125;)&#125;(async function () &#123; try &#123; let res = await p() console.log(res) &#125; catch (e) &#123; console.log(e) console.log('try - catch') &#125;&#125;)()/* console 输出[object Error] &#123; ... &#125;\"inner error\"\"return inner error\"*/ 从上面代码我们知道，如果Promise构造函数里的错误被它自己catch的话，那么 async/await 后续的 try - catch将不再对它捕获 Vue.config.errorHandler12345Vue.config.errorHandler = function (err, vm, info) &#123; // handle error // `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子 // 只在 2.2.0+ 可用&#125; 指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。 我们该如何去理解官方对errorHandler的解释呢？通过 vue-cli构建工具，创建一个非常基础的vue项目，做一些实验。 测试代码库：https://github.com/miser/vue-capture-error 在main.js 1234Vue.config.errorHandler = function (err, vm, info) &#123; console.log(arguments) console.log('vue errorHandler')&#125; 在App.vue 12345678910111213141516171819&#123; // ... created () &#123; this.normal() &#125;, methods: &#123; normal () &#123; let data let info = data.info &#125; &#125; // ... &#125;/* 刷新页面 console 输出0: TypeError: Cannot read property 'info' of undefined at VueComponent.normal …1: VueComponent &#123;_uid: 1, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: VueComponent, …&#125;2: \"created hook*/ 从上面代码可以看出，errorHandler确实可以满足我们的需求，在一个统一的地方捕获代码的错误，但是真的如此吗？上文也提到errorHandler和window.onerror类似，那么当我们使用Promse或者async/await时会不会得愿以偿。 js中的异步很大一部分来自网络请求，那么在这我们用 axios （它做了一层ajax与Promise之间的封装）。 main.js里添加 1234567891011121314const request = axios.create()request.interceptors.response.use(response =&gt; &#123; return response&#125;)Vue.request = (args) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; request(args).then(res =&gt; &#123; resolve(res) &#125;).catch(err =&gt; &#123; reject(err) &#125;) &#125;)&#125; 在App.vue 123456789101112131415&#123; // ... created () &#123; this.fetch1() &#125;, methods: &#123; fetch1 () &#123; Vue.request('https://api1.github.com/') .then(response =&gt; &#123; console.log(response) &#125;) &#125; &#125; // ... &#125; api.github.com 会返回 github的api列表，当我们拼错域名，比如上面代码中的api1.github.com时，那肯定是无法获得我们想要的，可是errorHandler并没有获得该错误，不过幸好，我们可以在全局统一的Vue.request里的catch方法去统一捕获网络层面的错误。那如果是非网络层面的呢？比如数据请求回来了，但是绑定数据的时候，后端因为业务的修改等原因并没有返回我们需要的字段，造成Promise.then方法的业务处理错误。 在App.vue 12345678910111213141516&#123; // ... created () &#123; this.fetch2() &#125;, methods: &#123; fetch2 () &#123; Vue.request('https://api.github.com/') .then(response =&gt; &#123; let data = response.data let info = data.api.info &#125;) &#125; &#125; // ... &#125; 上诉代码运行后，errorHandler同样未能捕获错误，从vue的issue里面去查询关于捕获Promise或者async/await时，会得到作者的答复: https://github.com/vuejs/vue/issues/6551 Vue cannot capture errors that are thrown asynchronously, similar to how try… catch won’t catch async errors. It’s your responsibility to handle async errors properly, e.g. using Promise.catch — @yyx990803 那么该怎么办，不可能每个地方都加Promise.catch方法吧！ https://github.com/vuejs/vue/issues/7653 @Doeke 在这个地方给出一个解决方案，通过全局mixin，给那些Promise方法外面包一层Promise，在这个外层Promise链上catch里面的错误，不过这样需要做代码的约定，就是原来的方法需要返回一个Promise对象。 main.js里添加@Doeke的思路 12345678910111213141516171819202122232425262728Vue.mixin(&#123; beforeCreate: function () &#123; const methods = this.$options.methods || &#123;&#125; Object.entries(methods).forEach(([key, method]) =&gt; &#123; if (method._asyncWrapped) return const wrappedMethod = function (...args) &#123; const result = method.apply(this, args) const resultIsPromise = result &amp;&amp; typeof result.then === 'function' if (!resultIsPromise) return result return new Promise(async (resolve, reject) =&gt; &#123; try &#123; resolve(await result) &#125; catch (error) &#123; if (!error._handled) &#123; const errorHandler = Vue.config.errorHandler errorHandler(error) error._handled = true &#125; reject(error) &#125; &#125;) &#125; wrappedMethod._asyncWrapped = true methods[key] = wrappedMethod &#125;) &#125;&#125;) 在App.vue 123456789101112131415161718192021222324&#123; // ... created () &#123; this.fetch2() this.fetch3() &#125;, methods: &#123; fetch2 () &#123; Vue.request('https://api.github.com/') .then(response =&gt; &#123; let data = response.data let info = data.api.fetch2 &#125;) &#125;, fetch3 () &#123; return Vue.request('https://api.github.com/') .then(response =&gt; &#123; let data = response.data let info = data.api.fetch3 &#125;) &#125; &#125; // ... &#125; 通过运行并观察console打印可以看出，fetch3的错误被errorHandler捕获，而fetch2的错误并没有。 那么Promise里的错误统一捕获的问题差不多应该解决了，那么async/await的呢？ 在App.vue 123456789101112131415161718192021&#123; // ... created () &#123; this.fetch4() this.fetch5() &#125;, methods: &#123; async fetch4 () &#123; let response = await Vue.request('https://api.github.com/') let data = response.data let info = data.api.fetch4 &#125;, async fetch5 () &#123; let response = await Vue.request('https://api.github.com/') let data = response.data let info = data.api.fetch5 return response &#125; &#125; // ... &#125; fetch4并没有返回Promise，fetch5返回的也不是Promise对象，但是当运行的时候我们会发现fetch4和fetch5的错误信息都被捕获了，这是为什么呢？因为async/await本身就是Promise的语法糖，在 babeljs 官网的 “Try it out” 尝试用 async/await，你会发现最后编译后的代码就是在外包了一层Promise。 在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）网络层：可以在axios.create创建的实例中 逻辑层：非Promise本身就会被errorHandler捕获；Promise相关的可以通过全局mixin给返回Promise对象的方法做一个外层包装，统一catch并调用errorHandler处理（这个方法的是否有副作用还需要研究!） 捕获的错误存放在哪？# 自己简易服务 ？ 感觉成本很大（人力和工时） # 官方推荐的 Sentry 注册后安装官方的JS SDK 1npm install raven-js --save 修改main.js 1234567891011121314151617181920212223// ...import Raven from 'raven-js'import RavenVue from 'raven-js/plugins/vue'Raven .config('https://1dfc5e63808b41058675b4b3aed4cfb6@sentry.io/1298044') // sentry token .addPlugin(RavenVue, Vue) .install()Vue.config.errorHandler = function (err, vm, info) &#123; Raven.captureException(err)&#125;Vue.request = (args) =&gt; &#123; return new Promise((resolve, reject) =&gt; &#123; request(args).then(res =&gt; &#123; resolve(res) &#125;).catch(err =&gt; &#123; Raven.captureException(err) reject(err) &#125;) &#125;)&#125;// ... 修改App.vue （我们从最普通的js测试起）12345678910// ...created () &#123; this.normal() // this.fetch1() // this.fetch2() // this.fetch3() // this.fetch4() // this.fetch5()&#125;// ... 打开sentry页面查看我们通过上面2张图片可以看出，sentry自带一个简单的issue管理功能，此外详情页面的错误栈已经方便我们知道问题出在哪里了。 测试fetch1的ajax请求错误 除了fetch2无法被捕获外（之前提过，它没有返回Promise对象），其它的都能被捕获。不过Promise和async/await的错误栈比较少。尤其是Promise.then里的错误，如下2张图的对比： 除了默认的数据的收集外，还能收集一些其他数据，比如用户信息 1234Raven.setUser(&#123; name: 'miser name', id: 'miser id' &#125;) 我们测试了代码未被压缩的情况，如果代码压缩了呢？ 显然我们不能直观的获得错误定位，不过sentry提供SourceMaps存储服务，它能方便的debug被压缩的代码。 我们可以通过webpack-sentry-plugin工具将整个上传过程写进webpack里，因为我们的实验环境是vue3，所以我们创建一个vue.config.js文件 1234567891011121314const SentryPlugin = require('webpack-sentry-plugin')module.exports = &#123; configureWebpack: &#123; plugins: [ new SentryPlugin(&#123; organization: 'fe-org', // 组织名称 类似公司名吧（一个用户下可以有多个组织） project: 'popcorn-vue', // 项目名称 （一个组织下可以有多个项目） apiKey: '17c7d61a800f495c803196e2c02cadeb1b41454247db4f06a5c54193510da150', release: '1.2.4-beta' // 发布后的代码和这个对应，可以找到这个sourcemaps &#125;) ] &#125;&#125; 修改main.js123456Raven .config('https://1dfc5e63808b41058675b4b3aed4cfb6@sentry.io/1298044', &#123; release: '1.2.4-beta' // 新增 &#125;) .addPlugin(RavenVue, Vue) .install() 1npm run build 查看sentry里popcorn-vue项目中的版本 我们打开build完的index.html，虽然错误成功捕获但依旧和上图的一样，无法被SourceMaps解析，大概的原因是js和js.map的目录结构问题。 这个issue https://github.com/getsentry/sentry-electron/issues/54 是一个很经典的例子，它犯了2个错误 – 仅仅传了js.map而没有传被压缩的js文件，它们应该一一对应的上传到服务器上– js和js.map目录路径不匹配 这2个原因都会导致无法正常解析被压缩的文件。 那么不直接通过浏览器打开index.html（file:///**/vue-capture-error/dist/index.html），通过nginx去模拟正式环境。12brew install nginxnginx 将build出的代码dist拷贝到nginx默认目录下 /usr/local/var/www/，打开浏览器http://localhost:8080 回到sentry中查看新的错误记录","link":"/2018/10/23/js-capture-error/"}],"tags":[],"categories":[{"name":"javascript","slug":"javascript","link":"/categories/javascript/"},{"name":"工作","slug":"工作","link":"/categories/工作/"}]}