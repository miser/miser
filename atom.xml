<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miser 胡言</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://miser.github.io/"/>
  <updated>2020-04-22T02:38:28.944Z</updated>
  <id>https://miser.github.io/</id>
  
  <author>
    <name>Miser</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Node.js 监控中心架构迭代</title>
    <link href="https://miser.github.io/2020/04/03/monitor-hub/"/>
    <id>https://miser.github.io/2020/04/03/monitor-hub/</id>
    <published>2020-04-02T23:17:29.367Z</published>
    <updated>2020-04-22T02:38:28.944Z</updated>
    
    <content type="html"><![CDATA[<p>之前写了一篇<a href="https://miser.github.io/2020/02/21/node-perf-heapdump-flame-graph/">收集 Node.js 应用的内存堆栈快照和 CPU 火焰图</a>文章，其中的架构非常粗糙，但是初步算是满足了现在的监控需求。不过随着业务的增长，单台<strong>TCP Server</strong>可定无法满足高可用的需求，一旦出现问题那就没办法持续使用了，所以需要一个重新设计和改造。</p><a id="more"></a><p><img src="/images/monitor-hub/image-20200403185942130.png" alt="粗糙的1.0版本"></p><p><strong>大致流程介绍：</strong></p><p>一个 Docker 中，可能运行多个 Node.js 进程，比如 Egg.js 框架，另外<code>Helper Process</code>是用来做火焰图采集的，前面的文章提到过，目前它的功能相对单一应该被优化。</p><p>所有的 Node.js 进程都会被看做事一个<code>Client</code>通过 TCP 长连接连入<code>Server</code>，他们做双向通信，Client 将心跳和监控数据（CPU、内存、EventLoop、GC 等）源源不断送入 Server 中，Server 将对用的数据存入到 ES 中。</p><p>用户通过<code>Admin Web</code>可以查看每个应用的基础数据图表，发送生成内存堆栈信息和 CPU 火焰图的信息给指定的 Client，Client 生成文件后上传到<code>FS</code>（文件系统），之后 Admin Web 去 FS 上抓取该文件。</p><p><strong>Q:为什么是这样一个粗糙的设计？</strong></p><ul><li>以快速上线去生产验证可用性为目标之一，尽量减少对其它系统的依赖，依赖<code>ES</code>是为了存数据、<code>FS</code>是为了存文件，过多的依赖对于部署上线还是测试链路都是增加成本，在人力有限的情况下拖的越久越容易杀死项目。</li></ul><p><strong>Q:为什么用长链接而不是短链接？</strong></p><ul><li>长链接的好处在简单模型下有个最大的好处就是我不需要去维护客户端是否存活，因为一旦客户端挂了，那么它就会自动断开，既能发送监控警报，又不需要做相关的治理工作，治理工作又是一个细活。</li><li>另外客户端没有将数据集中定时批量发送，而是每次取到相关数据就发送给 Server。为了减少开销就用了长链接，自定义的协议传输效率也高。</li><li>在开发过程中，长链接的开发模型比短连接复杂很多，不容易维护。</li></ul><p><strong>Q:目前遇到的问题和思考</strong></p><ul><li>单机 Server 一旦挂了就没办法继续监控，导致的风险极大，需要做集群，但是长链接并不适合做扩展，所以必须长改短。</li><li>如果 Server 是集群，那势必需要 Client 去找到它，那么将引入<code>服务注册和发现</code>功能，比如 Eureka、Consul 等，将 Client、Server 和 Admin Web 连入。</li><li>有了 Eureka、Consul 之类中间件，其实 Admin Web 可以直接通过它找到 Client，不过为了功能单一性，还是让 Server 转发用户命令。</li><li>之前的 Helper Process 是在做火焰图时候临时加入，所有的<code>Worker Process</code>都是平等的 Client，在启动它的时候存在竞争问题，哪里一个 Client 去启动它呢？可以做一个类似 Egg.js 的启动命令，有 Master 进程、数个 Worker 进程已经一个 Helper Process。当然在 Egg.js 框架里，完全可以用 Agent 进程代替它，写个相关插件即可。</li><li>如果所有的 Client 和 Helper Process 都在 Master 下，那么我们可以通过 Helper Process 代理将所有的 Client 基础数据批量上传到 Server，通过父进程 Master 做转发，这样也减轻了不断传数据的性能瓶颈；另外所有的 Client 注册到注册中心也不合适，也可以通过 Helper Process 代理，这样每个 Docker 就一个服务注册了。</li><li>生成文件的过程是漫长的，不可能让短链接一直等，所以需要一个消息列队去通知 Admin Web，XXXX Client 的 XXXX 文件已经好了，让它去 FS 上拉取，需要引入 RMQ 等。</li><li>为 Admin Web 可以方便获取 Client 列表，可以将注册中心里的服务信息格式处理后存在 Redis 中，这样就引入了 Redis，如果不平凡刷新这个列表可以每次读取注册中心里的数据做格式处理。</li></ul><p><img src="/images/monitor-hub/image-20200403210837664.png" alt="迭代2.0版本"></p><p><strong>综上思考</strong>，Server 依旧做信息的存储和命令的转发工作，Admin Web 依旧是操作命令的入口，而整个 Client 端偏向 Egg.js 的风格。渐渐的整个监控中心就变得像一个微服务集群那样存在和运行，不同阶段有不同阶段的任务目标，讲不定之后会有新的挑战需要迭代。</p>]]></content>
    
    <summary type="html">
    
      为了更好的做BFF层，最近看了一些网关资料，Node.js的网关类库相对薄弱很多。Express Gateway，背靠强大的Express社区，很多现成的中间件可以运用其中，省去了不少开发成本和风险。
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://miser.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://miser.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>libuv &amp; Node.js EventLoop （一）</title>
    <link href="https://miser.github.io/2020/03/01/v8-libuv-timer-event-loop/"/>
    <id>https://miser.github.io/2020/03/01/v8-libuv-timer-event-loop/</id>
    <published>2020-02-29T21:39:36.647Z</published>
    <updated>2020-04-22T02:38:01.589Z</updated>
    
    <content type="html"><![CDATA[<p>在网络上查询<a href="https://libuv.org/" target="_blank" rel="noopener">libuv</a>和EventLoop相关信息的时候，经常看到不同的文章所表达的意思差距较多，主要原因有二吧：</p><ul><li>它们的<code>libuv</code>和<code>V8</code>大版本不同，导致具体的实现略有差异</li><li>另外它们的代码错综复杂，又是大多数JavaScript工作者不擅长的C/C++，只是从上而下的看，或许一些细节无法完全理解或是认知的分歧</li></ul><p>与其受他人影响，不如自己来好好梳理下。</p><p><strong>版本</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// libuv</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_MAJOR 1</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_MINOR 33</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_PATCH 1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// V8</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_MAJOR_VERSION 7</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_MINOR_VERSION 8</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_BUILD_NUMBER 279</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_PATCH_LEVEL 17</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Node.js</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_MAJOR_VERSION 14</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_MINOR_VERSION 0</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_PATCH_VERSION 0</span></span><br></pre></td></tr></table></figure><p>没有列出具体版本号的代码分析都是耍流氓，2010年的代码和2020年的代码可能差距甚远，“上古”分析固然在当时是对的，但是在今日也许是错误的。</p><a id="more"></a><p><br></p><p><br></p><h3 id="libuv-amp-EventLoop文档比较"><a href="#libuv-amp-EventLoop文档比较" class="headerlink" title="libuv &amp; EventLoop文档比较"></a>libuv &amp; EventLoop文档比较</h3><p><img src="/images/v8-libuv-timer-event-loop/loop_iteration.png" alt="_images/loop_iteration.png"></p><p>上图出自<code>libuv</code>的<a href="http://docs.libuv.org/en/v1.x/design.html#the-i-o-loop" target="_blank" rel="noopener">The I/O loop</a>介绍，具体的信息可以看其文档。</p><p><img src="/images/v8-libuv-timer-event-loop/image-20200301145547994.png" alt="image-20200301145547994"></p><p>上图出自<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained" target="_blank" rel="noopener">Event Loop Explained</a>，两者的各个阶段基本是对应的。哪怕是很多其它自行画的图解中，也基本差不多，但唯独<code>pending callbacks</code>阶段，我看到很多文章里面把它标为<code>I/O callbacks</code>，不知道是不是历史原因，但是就从二者的目前文档解释来看是不妥的。</p><blockquote><p>Pending callbacks are called. All I/O callbacks are called right after polling for I/O, for the most part. There are cases, however, in which calling such a callback is deferred for the next loop iteration. If the previous iteration deferred any I/O callback it will be run at this point. —— libuv</p></blockquote><p><strong>libuv</strong>里的<code>pending callbacks</code>：大多数的I/O callbacks应该在polling阶段完成，有部分会被延迟到下一个pending callbacks阶段执行。</p><p><br></p><blockquote><p>This phase executes callbacks for some system operations such as types of TCP errors. For example if a TCP socket receives <code>ECONNREFUSED</code> when attempting to connect, some *nix systems want to wait to report the error. This will be queued to execute in the <strong>pending callbacks</strong> phase. —— Node.js</p></blockquote><p><strong>Node.js</strong>里的<code>pending callbacks</code>：这个阶段会执行系统上发生的一些错误而导致的callbacks，如TCP错误。</p><p>我觉得<code>pending callbacks</code>比较合理，一方面如libuv所说，它是一部分延迟的I/O回调，在Node.js里面指的是一些系统上的错误（这些错误也是I/O引起的）。而大多数的I/O操作其实是在 <code>poll</code>阶段。</p><p><br></p><p><br></p><h2 id="libuv的大致流程代码"><a href="#libuv的大致流程代码" class="headerlink" title="libuv的大致流程代码"></a>libuv的大致流程代码</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uv_run</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123; <span class="hljs-comment">// 默认 mode 是 UV_RUN_DEFAULT</span></span><br><span class="line">  <span class="hljs-keyword">int</span> timeout;</span><br><span class="line">  <span class="hljs-keyword">int</span> r;</span><br><span class="line">  <span class="hljs-keyword">int</span> ran_pending;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 是否还存在alive的事件</span></span><br><span class="line">  r = uv__loop_alive(loop);</span><br><span class="line">  <span class="hljs-keyword">if</span> (!r)</span><br><span class="line">    uv__update_time(loop); <span class="hljs-comment">// 存在的话更新当前的时间，可以把这个时间理解为libuv里面统一的时间，方便触发定时任务</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (r != <span class="hljs-number">0</span> &amp;&amp; loop-&gt;stop_flag == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    uv__update_time(loop); <span class="hljs-comment">// 和libuv图里的 Update loop time对应</span></span><br><span class="line">    uv__run_timers(loop); <span class="hljs-comment">// 执行 timers 阶段</span></span><br><span class="line">    ran_pending = uv__run_pending(loop); <span class="hljs-comment">// 执行pending 阶段；返回0表示空，1表示有；</span></span><br><span class="line">    uv__run_idle(loop); <span class="hljs-comment">// idle 阶段； Node.js里面不太关心</span></span><br><span class="line">    uv__run_prepare(loop); <span class="hljs-comment">// prepare 阶段； Node.js里面不太关心</span></span><br><span class="line"></span><br><span class="line">    timeout = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化阻塞 poll 阶段的超时时间</span></span><br><span class="line">    <span class="hljs-keyword">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class="line">      timeout = uv_backend_timeout(loop); <span class="hljs-comment">// 算出阻塞 poll 阶段的超时时间</span></span><br><span class="line">    <span class="hljs-comment">// 根据timers里最近的超时时间算出一个差值 diff = loop.time - min.timeout</span></span><br><span class="line">    <span class="hljs-comment">// 如果 diff &gt;= 0 , timeout = 0</span></span><br><span class="line">    <span class="hljs-comment">// 否则 timeout = min(diff, INT_MAX)</span></span><br><span class="line">    </span><br><span class="line">    uv__io_poll(loop, timeout); <span class="hljs-comment">// 执行 poll 阶段</span></span><br><span class="line">    uv__run_check(loop); <span class="hljs-comment">// 执行 check 阶段</span></span><br><span class="line">    uv__run_closing_handles(loop); <span class="hljs-comment">// 执行 close 阶段</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// mode 默认 UV_RUN_DEFAULT 所以不执行下面</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class="line">      uv__update_time(loop);</span><br><span class="line">      uv__run_timers(loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 查看是否还有alive事件</span></span><br><span class="line">    r = uv__loop_alive(loop);</span><br><span class="line">    <span class="hljs-keyword">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class="line"><span class="hljs-comment">   * dirtying a cache line.</span></span><br><span class="line"><span class="hljs-comment">   */</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (loop-&gt;stop_flag != <span class="hljs-number">0</span>)</span><br><span class="line">    loop-&gt;stop_flag = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>uv_run</code>方法同样表达了之前图的循环流程，接下来我们看看各个阶段的具体执行方法。</p><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uv__run_timers</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">heap_node</span>* <span class="hljs-title">heap_node</span>;</span> <span class="hljs-comment">// timers 里的都是按照最小堆存放的</span></span><br><span class="line">  <span class="hljs-keyword">uv_timer_t</span>* handle;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (;;) &#123;</span><br><span class="line">    heap_node = heap_min(timer_heap(loop)); <span class="hljs-comment">// 从堆顶取出一个</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (heap_node == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 不存在就退出</span></span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    handle = container_of(heap_node, <span class="hljs-keyword">uv_timer_t</span>, heap_node); </span><br><span class="line">    <span class="hljs-keyword">if</span> (handle-&gt;timeout &gt; loop-&gt;time) <span class="hljs-comment">// 触发时间没达到也退出</span></span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    uv_timer_stop(handle);</span><br><span class="line">    uv_timer_again(handle);</span><br><span class="line">    </span><br><span class="line">    handle-&gt;timer_cb(handle); <span class="hljs-comment">// 执行回调</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>timers里存放的事件都是最小堆的数据结构排列的，不断的取出根节点比较当前的<code>loop-&gt;time</code>就能知道是执行还是退出，<strong>那么这里的<code>handle-&gt;timer_cb</code>是我们平时JavaScript里的setTimeout回调吗？</strong>后续解答</p><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">uv__run_pending</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE pq;</span><br><span class="line">  <span class="hljs-keyword">uv__io_t</span>* w;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (QUEUE_EMPTY(&amp;loop-&gt;pending_queue))</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  QUEUE_MOVE(&amp;loop-&gt;pending_queue, &amp;pq);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (!QUEUE_EMPTY(&amp;pq)) &#123; <span class="hljs-comment">// 双向链表，为空就跳出</span></span><br><span class="line">    q = QUEUE_HEAD(&amp;pq);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line">    w = QUEUE_DATA(q, <span class="hljs-keyword">uv__io_t</span>, pending_queue);</span><br><span class="line">    w-&gt;cb(loop, w, POLLOUT); <span class="hljs-comment">// 执行回调</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>libuv里面事件很多是由双向链表构建而成，等着被一个个执行，双向链表的好处就是插入很容易。</p><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_LOOP_WATCHER_DEFINE(name, type)                                    \</span></span><br><span class="line"><span class="hljs-keyword">void</span> uv__run_#<span class="hljs-meta">#name(uv_loop_t* loop) &#123;                                      \</span></span><br><span class="line">    uv_#<span class="hljs-meta">#name##_t* h;                                                         \</span></span><br><span class="line">    QUEUE <span class="hljs-built_in">queue</span>;                                                              \</span><br><span class="line">    QUEUE* q;                                                                 \</span><br><span class="line">    QUEUE_MOVE(&amp;loop-&gt;name##_handles, &amp;<span class="hljs-built_in">queue</span>);                                \</span><br><span class="line">    <span class="hljs-keyword">while</span> (!QUEUE_EMPTY(&amp;<span class="hljs-built_in">queue</span>)) &#123;                                            \</span><br><span class="line">      q = QUEUE_HEAD(&amp;<span class="hljs-built_in">queue</span>);                                                 \</span><br><span class="line">      h = QUEUE_DATA(q, uv_##name##<span class="hljs-keyword">_t</span>, <span class="hljs-built_in">queue</span>);                                \</span><br><span class="line">      QUEUE_REMOVE(q);                                                        \</span><br><span class="line">      QUEUE_INSERT_TAIL(&amp;loop-&gt;name##_handles, q);                            \</span><br><span class="line">      h-&gt;name##_cb(h);                                                        \</span><br><span class="line">    &#125;                                                                         \</span><br><span class="line">  &#125;     </span><br><span class="line"></span><br><span class="line">UV_LOOP_WATCHER_DEFINE(prepare, PREPARE)</span><br><span class="line">UV_LOOP_WATCHER_DEFINE(check, CHECK)</span><br><span class="line">UV_LOOP_WATCHER_DEFINE(idle, IDLE)</span><br></pre></td></tr></table></figure><p><code>UV_LOOP_WATCHER_DEFINE</code>宏直接初始化了<code>prepare</code>、<code>check</code>和<code>idle</code>3个阶段，都是双向链表。</p><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// uv__io_poll 太长了，不重要的代码已经移除</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uv__io_poll</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop, <span class="hljs-keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (loop-&gt;nfds == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 没有需要执行的 直接退出</span></span><br><span class="line">    assert(QUEUE_EMPTY(&amp;loop-&gt;watcher_queue));</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 将loop-&gt;watcher_queue列队里的待观察的文件描述符绑定到epoll上</span></span><br><span class="line">  <span class="hljs-keyword">while</span> (!QUEUE_EMPTY(&amp;loop-&gt;watcher_queue)) &#123;</span><br><span class="line">    q = QUEUE_HEAD(&amp;loop-&gt;watcher_queue);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line"></span><br><span class="line">    w = QUEUE_DATA(q, <span class="hljs-keyword">uv__io_t</span>, watcher_queue);</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (w-&gt;events == <span class="hljs-number">0</span>)</span><br><span class="line">      op = EPOLL_CTL_ADD; <span class="hljs-comment">// 添加</span></span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">      op = EPOLL_CTL_MOD; <span class="hljs-comment">// 修改</span></span><br><span class="line"></span><br><span class="line">    epoll_ctl(loop-&gt;backend_fd, op, w-&gt;fd, &amp;e) <span class="hljs-comment">// epoll_ctl 底层的系统函数，将文件描述符关联起来</span></span><br><span class="line"></span><br><span class="line">    w-&gt;events = w-&gt;pevents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sigmask = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span> (loop-&gt;flags &amp; UV_LOOP_BLOCK_SIGPROF) &#123;</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line">    sigaddset(&amp;sigset, SIGPROF);</span><br><span class="line">    sigmask |= <span class="hljs-number">1</span> &lt;&lt; (SIGPROF - <span class="hljs-number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  base = loop-&gt;time;</span><br><span class="line">  real_timeout = timeout;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (;;) &#123;</span><br><span class="line">    nfds = epoll_wait(loop-&gt;backend_fd,</span><br><span class="line">                        events,</span><br><span class="line">                        ARRAY_SIZE(events),</span><br><span class="line">                        timeout);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> (nfds == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 超时，没有新的事件准备好</span></span><br><span class="line">      assert(timeout != <span class="hljs-number">-1</span>); <span class="hljs-comment">// -1 表示不会超时，而nfds为0表示超时，存在矛盾所以抛出异常</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">0</span>) <span class="hljs-comment">// 退出</span></span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-keyword">goto</span> update_timeout; <span class="hljs-comment">// 重新更新时间 准备下次循环 epoll_wait </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (nfds == <span class="hljs-number">-1</span>) &#123; <span class="hljs-comment">// 出错</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (errno == ENOSYS) &#123;</span><br><span class="line">        <span class="hljs-comment">/* epoll_wait() or epoll_pwait() failed, try the other system call. */</span></span><br><span class="line">        assert(no_epoll_wait == <span class="hljs-number">0</span> || no_epoll_pwait == <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (errno != EINTR)</span><br><span class="line">        <span class="hljs-built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">-1</span>)</span><br><span class="line">        <span class="hljs-keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">goto</span> update_timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    have_signals = <span class="hljs-number">0</span>;</span><br><span class="line">    nevents = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers] = (<span class="hljs-keyword">void</span>*) events;</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers + <span class="hljs-number">1</span>] = (<span class="hljs-keyword">void</span>*) (<span class="hljs-keyword">uintptr_t</span>) nfds;</span><br><span class="line">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nfds; i++) &#123;</span><br><span class="line">      pe = events + i;</span><br><span class="line">      fd = pe-&gt;data.fd;</span><br><span class="line">      w = loop-&gt;watchers[fd];</span><br><span class="line">      w-&gt;cb(loop, w, pe-&gt;events); <span class="hljs-comment">// 这个for循环很长，这里我简化了，其实就是准备好的IO就执行回调</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">0</span>)</span><br><span class="line">      <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">-1</span>)</span><br><span class="line">      <span class="hljs-keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">update_timeout:</span><br><span class="line">    assert(timeout &gt; <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    real_timeout -= (loop-&gt;time - base);</span><br><span class="line">    <span class="hljs-keyword">if</span> (real_timeout &lt;= <span class="hljs-number">0</span>)</span><br><span class="line">      <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    timeout = real_timeout;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__io_poll</code>里的timeout参数是根据<code>timers</code>里的最近一次定时时间计算出来的。方法内部使用了<code>epoll</code>，是IO多路复用的一个概念。一共有三种：<code>select</code>、<code>poll</code>和<code>epoll</code>。</p><blockquote><p>epoll是<a href="https://baike.baidu.com/item/Linux内核" target="_blank" rel="noopener">Linux内核</a>为处理大批量<a href="https://baike.baidu.com/item/文件描述符/9809582" target="_blank" rel="noopener">文件描述符</a>而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量<a href="https://baike.baidu.com/item/并发连接/3763280" target="_blank" rel="noopener">并发连接</a>中只有少量活跃的情况下的系统<a href="https://baike.baidu.com/item/CPU/120556" target="_blank" rel="noopener">CPU</a>利用率。另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。epoll除了提供select/poll那种IO事件的水平触发（Level Triggered）外，还提供了边缘触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少epoll_wait/epoll_pwait的调用，提高应用程序效率。 ——百度百科</p></blockquote><p>我觉得libuv使用epoll主要是因为支持其自身的异步特点</p><ul><li>epoll监控的文件描述符远远大于select/poll</li><li>在大量并发的时候epoll性能远远高于select/poll，而少量异步select/poll相对好点。Node.js利用了libuv的高并发特点。</li></ul><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">uv__run_closing_handles</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">uv_handle_t</span>* p;</span><br><span class="line">  <span class="hljs-keyword">uv_handle_t</span>* q;</span><br><span class="line"></span><br><span class="line">  p = loop-&gt;closing_handles;</span><br><span class="line">  loop-&gt;closing_handles = <span class="hljs-literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (p) &#123;</span><br><span class="line">    q = p-&gt;next_closing;</span><br><span class="line">    uv__finish_close(p);</span><br><span class="line">    p = q;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个个触发<code>close</code>回调</p><p><br></p><p>上述就是libuv各个阶段的大体流程，<code>poll</code>最为复杂，还有很多东西可以留着细品。</p><p><br></p><p><br></p><h2 id="Node-js-setTimeout"><a href="#Node-js-setTimeout" class="headerlink" title="Node.js setTimeout"></a>Node.js setTimeout</h2><p>上文中提到<strong>那么这里的<code>handle-&gt;timer_cb</code>是我们平时JavaScript里的setTimeout回调吗？回答：不是的</strong></p><p>看看Node.js里面如何具体实现这个<code>setTimemout</code>方法的</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTimeout</span>(<span class="hljs-params">callback, after, arg1, arg2, arg3</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> args = [arg1, arg2, arg3]; <span class="hljs-comment">// 简化了代码</span></span><br><span class="line">  <span class="hljs-keyword">const</span> timeout = <span class="hljs-keyword">new</span> Timeout(callback, after, args, <span class="hljs-literal">false</span>);</span><br><span class="line">  active(timeout);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> timeout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Timeout</span>(<span class="hljs-params">callback, after, args, isRepeat</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 省略了部分代码</span></span><br><span class="line">  after *= <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">if</span> (!(after &gt;= <span class="hljs-number">1</span> &amp;&amp; after &lt;= TIMEOUT_MAX)) &#123;</span><br><span class="line">    after = <span class="hljs-number">1</span>; <span class="hljs-comment">// 定时验证不过 就为1 </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">this</span>._idleTimeout = after;</span><br><span class="line">  <span class="hljs-keyword">this</span>._onTimeout = callback;</span><br><span class="line">  <span class="hljs-keyword">this</span>._timerArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">active</span>(<span class="hljs-params">item</span>) </span>&#123;</span><br><span class="line">  insert(item, <span class="hljs-literal">true</span>, getLibuvNow());  <span class="hljs-comment">// getLibuvNow 获取 loop-&gt;time时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params">item, refed, start</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> msecs = item._idleTimeout;</span><br><span class="line">  <span class="hljs-keyword">if</span> (msecs &lt; <span class="hljs-number">0</span> || msecs === <span class="hljs-literal">undefined</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Truncate so that accuracy of sub-millisecond timers is not assumed.</span></span><br><span class="line">  msecs = <span class="hljs-built_in">Math</span>.trunc(msecs);</span><br><span class="line"></span><br><span class="line">  item._idleStart = start;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Use an existing list if there is one, otherwise we need to make a new one.</span></span><br><span class="line">  <span class="hljs-comment">// timerListMap 是一个键值对，key 是定时时间，value 是一个TimersList</span></span><br><span class="line">  <span class="hljs-keyword">var</span> list = timerListMap[msecs];</span><br><span class="line">  <span class="hljs-keyword">if</span> (list === <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> expiry = start + msecs; <span class="hljs-comment">// 过期时间</span></span><br><span class="line">    timerListMap[msecs] = list = <span class="hljs-keyword">new</span> TimersList(expiry, msecs); <span class="hljs-comment">// 双向链表</span></span><br><span class="line">    timerListQueue.insert(list); <span class="hljs-comment">// timerListQueue 用数组实现的最小堆</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (nextExpiry &gt; expiry) &#123;</span><br><span class="line">      scheduleTimer(msecs); <span class="hljs-comment">// 如果此次定时任务的有效时间小的话，调用 V8 scheduleTimer</span></span><br><span class="line">      nextExpiry = expiry;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ... 这边简略代码</span></span><br><span class="line">  L.append(list, item); <span class="hljs-comment">// 将setTimeout创建的Timeout对象添加到list尾部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码，我们也可以看出JavaScript层面也有一个维护timers的最小堆，并没有吧具体的某个setTimeout注册到V8里面，只是将定时时间告诉了V8<code>scheduleTimer(msecs);</code>，下面是V8相关代码。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// timers.cc</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ScheduleTimer</span><span class="hljs-params">(<span class="hljs-keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">auto</span> env = Environment::GetCurrent(args);</span><br><span class="line">  env-&gt;ScheduleTimer(args[<span class="hljs-number">0</span>]-&gt;IntegerValue(env-&gt;context()).FromJust());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// env.cc</span></span><br><span class="line"><span class="hljs-keyword">void</span> Environment::ScheduleTimer(<span class="hljs-keyword">int64_t</span> duration_ms) &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (started_cleanup_) <span class="hljs-keyword">return</span>;</span><br><span class="line">  uv_timer_start(timer_handle(), RunTimers, duration_ms, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">void</span> Environment::RunTimers(<span class="hljs-keyword">uv_timer_t</span>* handle) &#123;</span><br><span class="line">  Environment* env = Environment::from_timer_handle(handle);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">// timers_callback_function 从何而来呢？</span></span><br><span class="line">  Local&lt;Function&gt; cb = env-&gt;timers_callback_function();</span><br><span class="line">  <span class="hljs-keyword">do</span> &#123;</span><br><span class="line">    ret = cb-&gt;Call(env-&gt;context(), process, <span class="hljs-number">1</span>, &amp;arg);</span><br><span class="line">  &#125; <span class="hljs-keyword">while</span> (ret.IsEmpty() &amp;&amp; env-&gt;can_call_into_js());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// uv/timer.c</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uv_timer_start</span><span class="hljs-params">(<span class="hljs-keyword">uv_timer_t</span>* handle,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                   uv_timer_cb cb,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                   <span class="hljs-keyword">uint64_t</span> timeout,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                   <span class="hljs-keyword">uint64_t</span> repeat)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 给uv_timer_t对象初始化相关属性</span></span><br><span class="line">  <span class="hljs-comment">// 并没有JavaScript层面的回调方法，具体的回调也只是C++的RunTimers</span></span><br><span class="line">  handle-&gt;timer_cb = cb;</span><br><span class="line">  handle-&gt;timeout = clamped_timeout;</span><br><span class="line">  handle-&gt;repeat = repeat;</span><br><span class="line">  handle-&gt;start_id = handle-&gt;loop-&gt;timer_counter++;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 将uv_timer_t添加到timer_heap上</span></span><br><span class="line">  heap_insert(timer_heap(handle-&gt;loop),</span><br><span class="line">              (struct heap_node*) &amp;handle-&gt;heap_node,</span><br><span class="line">              timer_less_than);</span><br><span class="line">  uv__handle_start(handle);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V8部分注册在timers阶段的是一个C++的回调方法</strong>，其内部是执行<code>timers_callback_function</code>方法，它从何来来？</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// timers.cc</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetupTimers</span><span class="hljs-params">(<span class="hljs-keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  CHECK(args[<span class="hljs-number">0</span>]-&gt;IsFunction());</span><br><span class="line">  CHECK(args[<span class="hljs-number">1</span>]-&gt;IsFunction());</span><br><span class="line">  <span class="hljs-keyword">auto</span> env = Environment::GetCurrent(args);</span><br><span class="line"></span><br><span class="line">  env-&gt;set_immediate_callback_function(args[<span class="hljs-number">0</span>].As&lt;Function&gt;()); <span class="hljs-comment">// 注册了immediate回调</span></span><br><span class="line">  env-&gt;set_timers_callback_function(args[<span class="hljs-number">1</span>].As&lt;Function&gt;()); <span class="hljs-comment">// 注册了timers回调</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// node.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123;</span><br><span class="line">  setupTaskQueue,</span><br><span class="line">  queueMicrotask</span><br><span class="line">&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'internal/process/task_queues'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> &#123; nextTick, runNextTicks &#125; = setupTaskQueue();</span><br><span class="line">process.nextTick = nextTick;</span><br><span class="line">process._tickCallback = runNextTicks;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; getTimerCallbacks &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'internal/timers'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> &#123; setupTimers &#125; = internalBinding(<span class="hljs-string">'timers'</span>); <span class="hljs-comment">// c++ SetupTimers 方法传到了JavaScript层</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; processImmediate, processTimers &#125; = getTimerCallbacks(runNextTicks);</span><br><span class="line">setupTimers(processImmediate, processTimers);</span><br></pre></td></tr></table></figure><p>我们通过上述代码看到在<code>node.js</code>里面会将<code>processImmediate</code>和<code>processTimers</code>这两个JavaScript方法注册到对应的C++回调里，之后执行<code>timers_callback_function</code>其实就是执行<code>processTimers</code>方法。</p><p>另外，需要注意<code>微任务</code>相关的代码会被带到<code>getTimerCallbacks</code>。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTimerCallbacks</span>(<span class="hljs-params">runNextTicks</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processImmediate</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 之后文章在做介绍</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processTimers</span>(<span class="hljs-params">now</span>) </span>&#123;</span><br><span class="line">    nextExpiry = <span class="hljs-literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> list;</span><br><span class="line">    <span class="hljs-keyword">let</span> ranAtLeastOneList = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (list = timerListQueue.peek()) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (list.expiry &gt; now) &#123; <span class="hljs-comment">// 当前列表的过期时间大于now(libuv loop-&gt;time), 还没有到过期或到触发时间</span></span><br><span class="line">        nextExpiry = list.expiry; <span class="hljs-comment">// nextExpiry 设置为 当前列表的过期时间</span></span><br><span class="line">        <span class="hljs-keyword">return</span> refCount &gt; <span class="hljs-number">0</span> ? nextExpiry : -nextExpiry;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span> (ranAtLeastOneList)</span><br><span class="line">        runNextTicks(); <span class="hljs-comment">// 微任务会被触发</span></span><br><span class="line">      <span class="hljs-keyword">else</span></span><br><span class="line">        ranAtLeastOneList = <span class="hljs-literal">true</span>;</span><br><span class="line">      listOnTimeout(list, now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listOnTimeout</span>(<span class="hljs-params">list, now</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> msecs = list.msecs;</span><br><span class="line"></span><br><span class="line">    debug(<span class="hljs-string">'timeout callback %d'</span>, msecs);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> diff, timer;</span><br><span class="line">    <span class="hljs-keyword">let</span> ranAtLeastOneTimer = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (timer = L.peek(list)) &#123; <span class="hljs-comment">// 如果不是一个空的list，持续执行</span></span><br><span class="line">      <span class="hljs-comment">// _idleStart 是插入libuv (loop-&gt;time)的时间</span></span><br><span class="line">      <span class="hljs-comment">// now 是当前libuv 执行此次callback的时间</span></span><br><span class="line">      diff = now - timer._idleStart; </span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// Check if this loop iteration is too early for the next timer.</span></span><br><span class="line">      <span class="hljs-comment">// This happens if there are more timers scheduled for later in the list.</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (diff &lt; msecs) &#123;</span><br><span class="line">        list.expiry = <span class="hljs-built_in">Math</span>.max(timer._idleStart + msecs, now + <span class="hljs-number">1</span>);</span><br><span class="line">        list.id = timerListId++;</span><br><span class="line">        timerListQueue.percolateDown(<span class="hljs-number">1</span>);</span><br><span class="line">        debug(<span class="hljs-string">'%d list wait because diff is %d'</span>, msecs, diff);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (ranAtLeastOneTimer)</span><br><span class="line">        runNextTicks(); <span class="hljs-comment">// 微任务会被触发</span></span><br><span class="line">      <span class="hljs-keyword">else</span></span><br><span class="line">        ranAtLeastOneTimer = <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// The actual logic for when a timeout happens.</span></span><br><span class="line">      L.remove(timer);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">const</span> asyncId = timer[async_id_symbol];</span><br><span class="line">      <span class="hljs-keyword">if</span> (!timer._onTimeout) &#123;</span><br><span class="line">        <span class="hljs-keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> args = timer._timerArgs;</span><br><span class="line">        <span class="hljs-keyword">if</span> (args === <span class="hljs-literal">undefined</span>)</span><br><span class="line">          timer._onTimeout(); <span class="hljs-comment">// _onTimeout setTimeout 回调</span></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">          timer._onTimeout(...args);</span><br><span class="line">      &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (list === timerListMap[msecs]) &#123;</span><br><span class="line">      <span class="hljs-keyword">delete</span> timerListMap[msecs];</span><br><span class="line">      timerListQueue.shift();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">    processImmediate,</span><br><span class="line">    processTimers</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码很长，但是很容易理解，就是根据<code>libuv</code>的时间，将到期的定时任务一一执行了，格外需要注意的是微任务的执行<code>runNextTicks</code>，<strong>每次setTimeout的callback之后都会将<code>微任务</code>清空，而不是网上很多文章说的timer阶段之后将微任务清空，这个改动在Node.js 11版本</strong></p><blockquote><p>Timers<br>Interval timers will be rescheduled even if previous interval threw an error. #20002<br><strong>nextTick queue will be run after each immediate and timer. <a href="https://github.com/nodejs/node/pull/22842" target="_blank" rel="noopener">#22842</a></strong></p></blockquote><p>具体的原因是希望和浏览器里的行为更为一直，下面的代码在11之前和之后的执行结果略有不同。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'time1'</span>);</span><br><span class="line">  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'promise1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'time2'</span>);</span><br><span class="line">  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'promise2'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 11之后</span></span><br><span class="line"><span class="hljs-comment">time1</span></span><br><span class="line"><span class="hljs-comment">promise1</span></span><br><span class="line"><span class="hljs-comment">time2</span></span><br><span class="line"><span class="hljs-comment">promise2</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 11之前</span></span><br><span class="line"><span class="hljs-comment">time1</span></span><br><span class="line"><span class="hljs-comment">time2</span></span><br><span class="line"><span class="hljs-comment">promise1</span></span><br><span class="line"><span class="hljs-comment">promise2</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，libuv和Node.js EventLoop关于<code>各个阶段</code>和<code>setTimeout</code>的实现已经做了简单介绍。具体的还是需要看各自版本的代码而定，不能轻易去“相信”网上的介绍，比如最后一个例子就很容易在不同版本出现不同的执行结果。之后，有时间介绍 <code>nextTick</code>的回调实现，这个比较复杂。</p>]]></content>
    
    <summary type="html">
    
      libuv和Node.js EventLoop关于各个阶段和setTimeout的实现已经做了简单介绍。具体的还是需要看各自版本的代码而定，不能轻易去“相信”网上的介绍，比如最后一个例子就很容易在不同版本出现不同的执行结果。之后，有时间介绍 `nextTick`的回调实现，这个比较复杂。
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://miser.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://miser.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>收集Node.js应用的内存堆栈快照和CPU火焰图</title>
    <link href="https://miser.github.io/2020/02/21/node-perf-heapdump-flame-graph/"/>
    <id>https://miser.github.io/2020/02/21/node-perf-heapdump-flame-graph/</id>
    <published>2020-02-20T23:31:54.489Z</published>
    <updated>2020-04-22T02:37:13.067Z</updated>
    
    <content type="html"><![CDATA[<p>如果你在一家对数据安全性很高的公司工作，团队规定不允许提交数据到第三方服务上，甚至连服务器内存、CPU使用情况等监控数据都不行，那对于像<a href="https://cn.aliyun.com/product/nodejs" target="_blank" rel="noopener">Alinode</a>这样监控和排查问题的大杀器基本都是无福享用了。大多数情况不得不面临自己开发一套类似监控体制去为生产环境保驾护航。</p><a id="more"></a><p><br></p><p><br></p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><em>Node.js是单进程的，即使像Egg.js这样的项目存在Agent、多个Worker进程，但依旧应该把它们分为独立的进程对待，所以监控的粒度是进程级别。</em></p><h4 id="基础数据"><a href="#基础数据" class="headerlink" title="基础数据"></a>基础数据</h4><ul><li>进程级别：内存、CPU、EventLoop、GC、调用该系统的时间消耗、该系统调用它人系统的时间消耗等。</li><li>系统级别：负载均衡 （<code>os.loadavg()</code>）</li></ul><p>上述这些数据，有些Node.js API直接暴露出来，有些需要写C++扩展去调用底层的V8 API来获取，好在市面上存在比较多的此类类库，比如<a href="https://github.com/RuntimeTools/appmetrics" target="_blank" rel="noopener">IBM appmetrics</a>就不错，它还有很多额外的监控数据可以收集，<code>主动</code>定时将它们提交到Elasticsearch，在用Grafana加载出来，还是很容易做到的。</p><p><br></p><h4 id="内存堆栈快照"><a href="#内存堆栈快照" class="headerlink" title="内存堆栈快照"></a>内存堆栈快照</h4><ul><li>通过多份内存堆栈快照可以帮助我们定位内存溢出的原因。</li></ul><h4 id="CPU火焰图"><a href="#CPU火焰图" class="headerlink" title="CPU火焰图"></a><a href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html" target="_blank" rel="noopener">CPU火焰图</a></h4><ul><li>通过它可以让我们知道是代码的哪部分导致CPU非常繁忙。</li></ul><p>上面这2个文件在系统调优和排查问题时起到至关重要的帮助，但是它们都是以文件的形式存储，又不像<code>基础数据</code>那么简易可以直接塞进DB里；另外获取这些资源过程是影响应用性能的，比如<code>内存堆栈快照</code>因为要罗列出所有的堆栈对象相互之间的关系和字节大小需要一定的计算量和时间，在此过程中系统处于无法响应的状态。为此，我们需要设计一套方法，在需要的时候去通知对应的Node.js进程，<code>被动</code>生成这些文件，而不是向先前那样<code>主动</code>收集。</p><p><br></p><p><br></p><h2 id="命令-amp-传输"><a href="#命令-amp-传输" class="headerlink" title="命令&amp;传输"></a>命令&amp;传输</h2><p>我们需要通过一些方法，告诉对应的Node.js进程该干些什么事情，是生成内存堆栈快照还是CPU火焰图，又或是别的什么。需要一个发送<code>命令</code>的地方，也需要一种方式将命令发送给指定的Node.js进程。将一个个孤立的Node.js进程连接起来有很多方式，比如TCP，或者HTTP。</p><p>我个人比较倾向用TCP，长链、双向、数据帧也轻巧很多，等等。像下图那样将他们连起来，<strong>仅用来示意，具体细节会有些不同，简单的粗暴将单箭头表示HTTP，双箭头表示TCP双向。</strong></p><p><img src="/images/node-perf-heapdump-flame-graph/connection_01.png" alt="连接示意图"></p><ul><li><strong>命令发送：</strong>一般会有一个Web界面，通过按钮提交命令请求。</li><li><strong>Hub：</strong>一个TCP服务，接受命令并将其转发到对应的Node.js进程上。</li><li><strong>Node.js Process:</strong> 可能一台服务器（或者Docker等）就一个Node.js进程，如Express；也有可能如Egg.js一样是多个Node.js进程。</li><li><strong>DFS：</strong>因为现在的服务基本都是部署在像Docker这样虚拟机上的，服务出现问题或人工原因很容易随时被系统销毁导致生产的快照或火焰图丢失，所以需要有个文件服务器持久化它们，因此一旦文件生产后就推送到文件服务器上待使用者去下载它们。</li></ul><p><br></p><p><br></p><h2 id="内存堆栈快照-1"><a href="#内存堆栈快照-1" class="headerlink" title="内存堆栈快照"></a>内存堆栈快照</h2><p>Node.js Process监听到发来的<code>命令</code>，通过调用<a href="https://www.npmjs.com/package/heapdump" target="_blank" rel="noopener">heapdump</a>很容易获得内存堆栈快照，再将文件推送到DFS上。如果想像<code>Alinode</code>那样自动又直接显示内存信息的话，改下<a href="https://github.com/ChromeDevTools/devtools-frontend" target="_blank" rel="noopener">devtools-frontend</a>，将其加入到系统中即可。</p><p><img src="/images/node-perf-heapdump-flame-graph/heapdump_01.png" alt="devtools 自动加载内存快照"></p><p><br></p><p><br></p><h2 id="CPU火焰图-1"><a href="#CPU火焰图-1" class="headerlink" title="CPU火焰图"></a>CPU火焰图</h2><p>火焰图比其它的数据麻烦很多，官方有专门的<a href="https://nodejs.org/zh-cn/docs/guides/diagnostics-flamegraph/" target="_blank" rel="noopener">文档</a>说明了整个流程，总的来说需要<a href="http://www.brendangregg.com/perf.html" target="_blank" rel="noopener">perf</a>和<a href="https://github.com/brendangregg/FlameGraph" target="_blank" rel="noopener">FlameGraph</a>这两个工具，具体的方法随意Google都能查到很多，就不多叙述了，关键是如何将它融入到上述的框架中呢？</p><p>假设和之前一样，Node.js进程用<code>socket.on(&quot;readable&quot;,callback)</code> 或 <code>socket.on(&quot;data&quot;,callback)</code>接受命令，并在callback中开启一个新的进程来执行<code>perf</code>等shell脚本，那么生成的火焰图不准确，为何？</p><p>Node.js是单进程，JavaScript部分是事件循环，密集计算会阻塞其它的操作，比如运行一个<code>斐波那契数列</code>计算。此刻，其它的异步任务就算完成也无法得到执行，比如底层IO获得了命令，但是由于JavaScript堵塞了而无法执行<code>callback</code>创建新进程执行shell脚本。等到<code>斐波那契数列</code>执行完后，callback才被执行。而我们火焰图需要排查的就是什么导致CPU一直繁忙的嗡嗡作响，而上述的问题就是密集的斐波那契数列计算，但是由于JavaScript的执行机制而有可能错过了开启perf的时机。大多数的时候，我们都是发现进程阻塞了或者CPU一直处于繁忙而去主动命令进程开启<code>perf</code>排查问题，所以这个方法获得的数据并不准确。</p><p>如果当前进程一直进程因为繁忙而无法执行新的JavaScript命令，那么我们是否可以通过一个简单的辅助进程来帮忙开启shell脚本呢？</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>因为perf需要Linux环境，我们可以通过Docker在本地启动一个Node.js容器实验下，以Node.js 12为例。</p><p>下载完对应版本的Node.js Docker后，通过下面命令开启一个新的容器，必须带<code>--privileged</code>不然无法使用perf。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged -itd node:12-buster /bin/bash // 启动</span><br><span class="line"></span><br><span class="line">docker attach xxxx  // 进入</span><br></pre></td></tr></table></figure><p>进入Docker容器后安装<code>perf</code></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install linux-perf</span><br><span class="line"></span><br><span class="line">perf_4.19 // 执行该命令查看是否安装成功，不同的linux内核版本对应不同的perf版本</span><br></pre></td></tr></table></figure><p><a href="https://github.com/miser/test-perf" target="_blank" rel="noopener">代码</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123;fork &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>)</span><br><span class="line">fork(<span class="hljs-string">'./helper'</span>)</span><br><span class="line"></span><br><span class="line">fibonacci(<span class="hljs-number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fibonacci</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> n;</span><br><span class="line">  <span class="hljs-keyword">return</span> fibonacci(n<span class="hljs-number">-1</span>) + fibonacci(n<span class="hljs-number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// helper.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> &#123; spawn, exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> unzipper = <span class="hljs-built_in">require</span>(<span class="hljs-string">"unzipper"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> perfCMD = <span class="hljs-string">'perf_4.19'</span></span><br><span class="line"><span class="hljs-keyword">const</span> perfTime = <span class="hljs-number">60</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execCMD</span>(<span class="hljs-params">cmd, callback</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    exec(cmd, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'shell: '</span>,cmd)</span><br><span class="line">      <span class="hljs-keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">`执行的错误: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span>(callback) &#123;</span><br><span class="line">        callback(stdout, stderr, resolve, reject);</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flame</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.nodes = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>._init().catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _init () &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> zipFilePath = path.join(<span class="hljs-string">'.'</span>, <span class="hljs-string">'FlameGraph.zip'</span>)</span><br><span class="line">      <span class="hljs-keyword">const</span> saveDir = process.cwd();</span><br><span class="line">      fs.createReadStream(zipFilePath)</span><br><span class="line">        .pipe(unzipper.Extract(&#123; <span class="hljs-attr">path</span>: saveDir &#125;))</span><br><span class="line">        .on(<span class="hljs-string">"error"</span>, reject)</span><br><span class="line">        .on(<span class="hljs-string">"finish"</span>, () =&gt; &#123;</span><br><span class="line">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"zip finish"</span>);</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`chmod 700 ./FlameGraph/stackcollapse-perf.pl`</span>;</span><br><span class="line">      <span class="hljs-keyword">return</span> execCMD(cmd);</span><br><span class="line">    &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`chmod 700 ./FlameGraph/flamegraph.pl`</span>;</span><br><span class="line">      <span class="hljs-keyword">return</span> execCMD(cmd);</span><br><span class="line">    &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`ps -ef|grep node|grep -v grep|grep -v FlameGraph|awk '&#123;print $2&#125;'`</span>;</span><br><span class="line">      <span class="hljs-keyword">return</span> execCMD(cmd, (stdout, stderr, resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.nodes = stdout.split(<span class="hljs-string">'\n'</span>).filter( <span class="hljs-function"><span class="hljs-params">pid</span> =&gt;</span> pid &amp;&amp; pid != process.pid)</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _chownMapFile()&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`chown root /tmp/perf-<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.nodes[<span class="hljs-number">0</span>]&#125;</span>.map &amp;&amp; <span class="hljs-subst">$&#123;perfCMD&#125;</span> script &gt; nodestacks`</span>;</span><br><span class="line">    execCMD(cmd).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>._genFlameGraph();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _genFlameGraph()&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`./FlameGraph/stackcollapse-perf.pl &lt; nodestacks | ./FlameGraph/flamegraph.pl --colors js &gt; node-flamegraph-<span class="hljs-subst">$&#123;process.pid&#125;</span>.svg`</span></span><br><span class="line">    execCMD(cmd).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'had completed'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  record() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`<span class="hljs-subst">$&#123;perfCMD&#125;</span> record -F 99 -p <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.nodes[<span class="hljs-number">0</span>]&#125;</span> -g -- sleep <span class="hljs-subst">$&#123;perfTime&#125;</span>`</span>;</span><br><span class="line">    execCMD(cmd).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> t = <span class="hljs-number">1000</span> * (perfTime + <span class="hljs-number">5</span>);</span><br><span class="line">      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>._chownMapFile()</span><br><span class="line">      &#125;, <span class="hljs-number">1000</span> * (perfTime + <span class="hljs-number">5</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> flame = <span class="hljs-keyword">new</span> Flame();</span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 模拟收到tcp命令</span></span><br><span class="line">  flame.record();</span><br><span class="line">&#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"test-perf"</span>,</span><br><span class="line">  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,</span><br><span class="line">  <span class="hljs-attr">"description"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">  <span class="hljs-attr">"main"</span>: <span class="hljs-string">"index.js"</span>,</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"dev"</span>: <span class="hljs-string">"node --perf-basic-prof index.js"</span>,</span><br><span class="line">    <span class="hljs-attr">"clear"</span>: <span class="hljs-string">"rm isolate-* &amp; rm node-flamegraph-*.svg &amp; rm -rf FlameGraph"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-attr">"keywords"</span>: [],</span><br><span class="line">  <span class="hljs-attr">"author"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"ISC"</span>,</span><br><span class="line">  <span class="hljs-attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"unzipper"</span>: <span class="hljs-string">"^0.10.8"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js: 创建一个辅助进程；执行斐波那契数列计算</li><li>hepler.js: 将压缩的FlameGraph.zip解压 =&gt; 给相关文件执行权限 =&gt; 获得当前系统中除自己以外的Node.js进程号（因为可能是多个，所以是个数组，例子中假设就一个进程）=&gt; 定时模拟获得生成火焰图的命令 =&gt; 执行 perf record =&gt; 延迟5秒后生成火焰图</li><li>package.json: 启动 index.js 需要加上<code>--perf-basic-prof</code>命令行参数；另外还需要<code>unzipper</code>类包</li></ul><p>将他们通过docker cp 从本地上传到docker中，并执行npm i安装依赖。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev // 开始实验</span><br></pre></td></tr></table></figure><p>随着一阵的风扇狂响（CPU密集计算）之后，火焰图也生成好了，大致如下：</p><p><img src="/images/node-perf-heapdump-flame-graph/node-flamegraph.png" alt="CPU火焰图"></p><p>之前的框架也做部分调整，每个容器需要一个Helper.js进程</p><p><img src="/images/node-perf-heapdump-flame-graph/connection_02.png" alt="调整后的框架"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我觉得程序员和程序猿之间的差别就在有没有一套好的监控体系和善用监控调优及排查问题的方法。如果没办法使用现成的第三方服务，往往需要自己动手去搭建，无论业务多么繁忙，唯有趁手的“兵器”才能取得真经，这是需要据理力争的东西。只有水下的冰够厚，水上的冰山才能更高。</p>]]></content>
    
    <summary type="html">
    
      如果你在一家对数据安全性很高的公司工作，团队规定不允许提交数据到第三方服务上，甚至连服务器内存、CPU使用情况等监控数据都不行，那对于像Alinode这样监控和排查问题的大杀器基本都是无福享用了。大多数情况不得不面临自己开发一套类似监控体制去为生产环境保驾护航。
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://miser.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://miser.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>V8是如何怎么处理JavaScript的</title>
    <link href="https://miser.github.io/2020/02/08/v8-parser-compiler-javascript/"/>
    <id>https://miser.github.io/2020/02/08/v8-parser-compiler-javascript/</id>
    <published>2020-02-08T01:18:53.485Z</published>
    <updated>2020-04-22T02:38:07.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文介绍的内容已经算是<code>旧闻</code>了，17年的时候就有大量的文章介绍过了，只是2020年伊始的疫情把人困在家里实在无聊，重新翻来几个视频打发下时间，以下文字算是简单梳理，更多的瑰宝需要我们自己翻阅资料研究，<strong>文章中的很多数据应该都过时了吧，仅用来参考吧。</strong></p></blockquote><p><strong>Parer</strong>和<strong>Compiler</strong>是2个重要的过程和概念，理解它们可以帮助开发者根据业务需求写出对V8或其它JavaScript引擎更为“友善”的代码，毕竟花在这两个过程中的成本是巨大的。</p><p><img src="/images/v8-parser-compiler/v8-pare-compile-cost.png" alt="国外几大网站花在Parser上的时间大约在15-20%"></p><a id="more"></a><h1 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a><strong>Parser</strong></h1><p><img src="/images/v8-parser-compiler/parser-phase.png" alt="红色部分就是接下来讨论的Parser部分"></p><p><strong>解析速率大约为 <code>1 MB / s</code></strong></p><p><br></p><h4 id="V8的Parser分2次解析："><a href="#V8的Parser分2次解析：" class="headerlink" title="V8的Parser分2次解析："></a><strong>V8的Parser分2次解析：</strong></h4><p><code>Layze（Pre-Parsing）：</code></p><ul><li>跳过还未被使用的代码</li><li>不会生成<code>AST</code>，会产生不带有变量引用和声明的<code>Scopes</code>信息</li><li>解析速度是Eage的2倍</li><li>根据JavaScript规范抛出一些特定的错误</li></ul><p><code>Eage（Full-Parsing）：</code></p><ul><li>解析那些被使用的代码</li><li>生成<code>AST</code></li><li>构建具体的<code>Scopes</code>信息，变量的引用、声明等</li><li>抛出所有的语法错误</li></ul><p><br></p><h4 id="Q-为什么会有2次解析？"><a href="#Q-为什么会有2次解析？" class="headerlink" title="Q:为什么会有2次解析？"></a>Q:为什么会有2次解析？</h4><p>如果都是用Full-Parsing的话，那么整个解析会非常漫长浪费时间。我们通过DevTools的<code>coverage</code>工具可以发现页面上大量的代码并没有被使用</p><p><br></p><h4 id="Q-2次解析会有什么负面影响？"><a href="#Q-2次解析会有什么负面影响？" class="headerlink" title="Q:2次解析会有什么负面影响？"></a>Q:2次解析会有什么负面影响？</h4><p>如果代码已经被Pre-Parsing解析过了，当被执行的时候还是会被Full-Parser解析一次那么开销是: <code>0.5 * parse + 1 * parse = 1.5 parse</code> 从某个角度来说更复杂了、开销更大了。鱼和熊掌不可兼得！</p><p><br></p><h4 id="Q-什么样的代码会被-Pre-Parsing-处理，什么样的会被-Full-Parsing-处理？"><a href="#Q-什么样的代码会被-Pre-Parsing-处理，什么样的会被-Full-Parsing-处理？" class="headerlink" title="Q:什么样的代码会被 Pre-Parsing 处理，什么样的会被 Full-Parsing 处理？"></a>Q:什么样的代码会被 <code>Pre-Parsing</code> 处理，什么样的会被 <code>Full-Parsing</code> 处理？</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>; <span class="hljs-comment">// Top-Level 顶层的代码都是 Full-Parsing</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 立即执行函数表达式 IIFE = Immediately Invoked Function Expression</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eager</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;)(); <span class="hljs-comment">// 函数体是 Full-Parsing</span></span><br><span class="line">                   </span><br><span class="line"><span class="hljs-comment">// 顶层的函数非IIFE</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazy</span>(<span class="hljs-params"></span>) </span>&#123;...&#125; <span class="hljs-comment">// 函数体是 Pre-Parsing</span></span><br><span class="line"></span><br><span class="line">lazy(); <span class="hljs-comment">// -&gt; Full-Parsing 开始解析和编译！</span></span><br><span class="line">                 </span><br><span class="line"><span class="hljs-comment">// 强制触发Full-Parsing解析</span></span><br><span class="line">!<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eager2</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eager3</span>(<span class="hljs-params"></span>) </span>&#123;...&#125; <span class="hljs-comment">// All eager</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">let</span> f1 = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazy</span>(<span class="hljs-params"></span>) </span>&#123; ... &#125;; <span class="hljs-comment">// 函数体是 Pre-Parsing</span></span><br><span class="line">              </span><br><span class="line"><span class="hljs-keyword">let</span> f2 = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazy</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;(); <span class="hljs-comment">// 先触发了lazy 解析, 然后又eager解析</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="Q-如何强制Full-Parsing-（eager-）？"><a href="#Q-如何强制Full-Parsing-（eager-）？" class="headerlink" title="Q:如何强制Full-Parsing （eager ）？"></a>Q:如何强制Full-Parsing （eager ）？</h4><ul><li>lazy 预编译由前2位首字母决定；所以如果我们想跳过 lazy 触发 eager 编译，我们应该在前面加位操作符，例如’!|~’。</li><li>使用 <a href="https://github.com/nolanlawson/optimize-js" target="_blank" rel="noopener">optimize-js</a> 重新编译代码，具体的性改变可以参考它Github里的测试数据</li></ul><p><br></p><h4 id="Q-什么是连续重新解析"><a href="#Q-什么是连续重新解析" class="headerlink" title="Q:什么是连续重新解析"></a>Q:什么是连续重新解析</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazy_outer</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// lazy parse this</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner2</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lazy_outer(); <span class="hljs-comment">// lazy parsing inner &amp; inner2</span></span><br><span class="line">inner(); <span class="hljs-comment">// lazy parsing inner &amp; inner2 (3rd time!)</span></span><br></pre></td></tr></table></figure><p>从上可知，大量的深度内嵌的代码对解析有着性能影响，每一层的深度调用都会引发新一轮的<code>Pre-Parsing</code>。</p><p><br></p><h4 id="Q-既然Parser阶段会性能消耗很大，我们该怎么优化代码？"><a href="#Q-既然Parser阶段会性能消耗很大，我们该怎么优化代码？" class="headerlink" title="Q:既然Parser阶段会性能消耗很大，我们该怎么优化代码？"></a>Q:既然Parser阶段会性能消耗很大，我们该怎么优化代码？</h4><ol><li><strong>尽量减少代码</strong>，可以通过DevTools的<code>coverage</code>工具查看当前页面代码的使用率。</li><li>V8会缓存Parser阶段的结果并保存72小时，如果bundle中间有部分代码被修改了，那么整个bundle的Parser缓存都会失效，所以把经常变动的打包在一起，非经常变动的在一起，比如公共类库和业务代码分离。</li></ol><p><br></p><h4 id="Q-如何评估当前网站代码的Parser时间呢？（包括后面将的Compiler时间）"><a href="#Q-如何评估当前网站代码的Parser时间呢？（包括后面将的Compiler时间）" class="headerlink" title="Q:如何评估当前网站代码的Parser时间呢？（包括后面将的Compiler时间）"></a>Q:如何评估当前网站代码的Parser时间呢？（包括后面将的Compiler时间）</h4><p>1.使用 <code>chrome://tracing/</code>工具，我们以<a href="http://aimianwu.com" target="_blank" rel="noopener">爱眠物</a>为例</p><p>2.打开tracing界面，点击左上角的<code>Record</code>按钮</p><p>3.在弹出的界面中选择<code>Web developer</code>和在Edit categories里面选择<code>v8.runtime_stats</code></p><p>4.在新的Tab中输入 <a href="http://aimianwu.com" target="_blank" rel="noopener">http://aimianwu.com</a> ，回到tracing Tab</p><p>5.等待数据采集完成，然后”停止”记录</p><p>6.选择对应的Process和数据</p><p><img src="/images/v8-parser-compiler/parse-time.png" alt=""></p><p><img src="/images/v8-parser-compiler/parse-time-1.png" alt=""></p><p>7.查看V8里的Parse和Compile数据</p><p><img src="/images/v8-parser-compiler/parse-time-2.png" alt=""></p><p><br></p><p><br></p><h1 id="Compiler-Pipeline"><a href="#Compiler-Pipeline" class="headerlink" title="Compiler Pipeline"></a><strong>Compiler Pipeline</strong></h1><p>随着V8的迭代，整个Compiler Pipeline也在发生翻天覆地的变化。最近的一次大更新是在V8 5.9版本，用 Ignition + TurboFan 代替了从2010一直服务的Full-codegen + Crankshaft组合，当然整个过程也不是一蹴而就的，中间夹杂着特殊的版本， Ignition + TurboFan 、Full-codegen + Crankshaft它们以特殊的方式共存了一段时间，因为一开始TurboFan的性能无法满足需求，可以看<a href="https://docs.google.com/presentation/d/1chhN90uB8yPaIhx_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g18d89eb289_1_389" target="_blank" rel="noopener">这个PPT</a>。</p><p><br></p><h4 id="Q-为什么做了替换？官方介绍"><a href="#Q-为什么做了替换？官方介绍" class="headerlink" title="Q:为什么做了替换？官方介绍"></a>Q:为什么做了替换？<a href="https://v8.dev/blog/launching-ignition-and-turbofan" target="_blank" rel="noopener">官方介绍</a></h4><p>因为老的版本比较激进，直接将JavaScript翻译成了机器码，在执行性能上确实很快，但是带来了几个大问题</p><ul><li>直接将JavaScript编译成机器码既费时间又费内存，几乎占用了V8约1/3的堆内存，导致实际可被使用的内存减少；另外由于复杂的设计导致Crankshaft重复编译代码，拖累性能。</li><li>Crankshaft没有友善处理 try、catch、finally 等关键词 ；维护成本高，需要为多个芯片架构提供优化代码，但性能提升不够明显；对ES新的语法特性支持不够好、也无法支持WebAssembly；<br>在PC端老的组合感受还好，但是在移动端随着网页的不断复杂化，该组合的启动时间和性能慢慢有些力不从心了。</li></ul><p><br></p><h4 id="Q-什么样的代码对-V8-Compiler-友好？"><a href="#Q-什么样的代码对-V8-Compiler-友好？" class="headerlink" title="Q:什么样的代码对 V8 Compiler 友好？"></a>Q:什么样的代码对 V8 Compiler 友好？</h4><p>虽然JavaScript是动态语言，如橡皮泥一样随意被开发者“随意”塑造、快速开发出一个又一个应用，但是没有规矩就会带来混乱，增加编译器的优化负担，目前在V8中优化工作由TurboFan完成。Ignition会收集大量信息交给TurboFan去优化，多方面条件都满足的情况下会被优化成机器码，这个过程成为<code>Optimize</code>，当判断无法优化时就触发去优化——Deoptimize，这些代码逻辑又重新回到Ignition中成为字节码。</p><p>主要有以下2点<a href="https://www.youtube.com/watch?v=p-iiEDtpy6I" target="_blank" rel="noopener">视频</a></p><ul><li>自然是经常被调用的代码部分</li><li>不要总是在改变对象类型（虽然JavaScript是动态的）</li></ul><p><img src="/images/v8-parser-compiler/not-change-types-1.png" alt=""></p><p><img src="/images/v8-parser-compiler/not-change-types-2.png" alt=""></p><p><img src="/images/v8-parser-compiler/not-change-types-3.png" alt=""></p><blockquote><p>如果你总是在改变Objects，V8无法对它做优化。即使做了优化也会被De-optimisation，这意味着会有性能损失。</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">load</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> obj.x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="hljs-number">1</span>,</span><br><span class="line">  y: <span class="hljs-number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对编译器而言 <code>obj = {}</code> 是一种类型， <code>obj = { x: &quot;Number&quot; }</code> 是另一种类型，<code>obj = { y: &quot;Number&quot; }</code> 又是一种类型等等，也就说数据类型和字段名必须一致，如果用过静态语言比如C++、Java就很容易理解。</p><p>像下面这样的代码</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">7</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">9</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> &#125;);</span><br></pre></td></tr></table></figure><p>没办法被优化，只有将参数的入参格式一致才行，比如</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> &#125;);</span><br></pre></td></tr></table></figure><p>是不是觉得学习TypeScript很重要了呢？</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>V8</code>在不断的迭代和进步，还有<a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html" target="_blank" rel="noopener">Script Streaming</a>等等技术没有介绍。随便翻阅 <a href="https://v8.dev/" target="_blank" rel="noopener">https://v8.dev/</a> 就会发现数不尽的干货在里面躺着，等我们动手发掘和尝试。作为一个JavaScript工程师而言，无论是学习V8还是其它的编译引擎都能使得我们更好的写出高性能代码、优化代码、甚至在做架构的时候提供帮助。</p><p>另外，随着WebAssembly进入浏览器和Node.js，越来越多的C++等技术会被更方便的加入到JavaScript阵营当中。最近买了树莓派和Arduino，在它们身上使用JavaScript做一些功能多多少少离不开C/C++，感觉到了需要系统化学习C/C++的时候了。</p><h3 id="主要参考："><a href="#主要参考：" class="headerlink" title="主要参考："></a>主要参考：</h3><p><a href="https://www.youtube.com/watch?v=Fg7niTmNNLg" target="_blank" rel="noopener">Parsing JavaScript - better lazy than eager</a></p><p><a href="https://www.youtube.com/watch?v=p-iiEDtpy6I" target="_blank" rel="noopener">JavaScript engines - how do they even? </a></p><p><a href="https://medium.com/reloading/javascript-start-up-performance-69200f43b201" target="_blank" rel="noopener">JavaScript Start-up Performance</a></p><p><a href="https://docs.google.com/presentation/d/1chhN90uB8yPaIhx_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g1ba5e472dd_0_103" target="_blank" rel="noopener">V8: Hooking up the Ignition to the Turbofan</a></p>]]></content>
    
    <summary type="html">
    
      Parer和Compiler是2个重要的过程和概念，理解它们可以帮助开发者根据业务需求写出对V8或其它JavaScript引擎更为“友善”的代码，毕竟花在这两个过程中的成本是巨大的。
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://miser.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://miser.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Express Gateway</title>
    <link href="https://miser.github.io/2020/01/22/express-gateway/"/>
    <id>https://miser.github.io/2020/01/22/express-gateway/</id>
    <published>2020-01-22T07:32:03.586Z</published>
    <updated>2020-04-22T02:36:03.235Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的做BFF层，最近看了一些网关资料，Node.js的网关类库相对薄弱很多，主要有2个</p><ul><li><a href="https://www.express-gateway.io/" target="_blank" rel="noopener">Express Gateway</a></li><li><a href="https://moleculer.services/" target="_blank" rel="noopener">Moleculer</a></li></ul><p>和Lua <a href="https://konghq.com/" target="_blank" rel="noopener">Kong</a>相比缺少很多刚需，比如金丝雀发布、灰度发布等等；和Java Zuul等相比，又少了很多中文文档。但是不管如何这2个是Javascript技术栈的，对于一个Node.js程序工作者来说怎能不香呢？</p><p>今天我们主要介绍<strong>Express Gateway</strong>，背靠强大的Express社区，很多现成的中间件可以运用其中，省去了不少开发成本和风险。一些不是很大的项目或者没有时间慢慢构建底层的团队来说，我觉得可以试试。</p><a id="more"></a><p><br></p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a><strong>Endpoints</strong></h3><p>URL的集合，分为2类：</p><ul><li>API endpoints</li><li>Service endpoints</li></ul><p>API endpoints是暴露给外网访问的，通过它将请求转发到具体的内网Service endpoints服务上。</p><h3 id="Policies"><a href="#Policies" class="headerlink" title="Policies"></a><strong>Policies</strong></h3><p>策略（policy）以Express Middleware的方式相互组织，作用在API请求和网关的响应上，包含触发条件、具体行为和参数。</p><h3 id="Pipelines"><a href="#Pipelines" class="headerlink" title="Pipelines"></a><strong>Pipelines</strong></h3><p>一个管道（pipeline）是API endpoints上一组策略（policies）的连接关系，管道里的策略被定义和执行。通过管道配置各种策略，一个API请求由API endpoint接受。在管道里的最后一个策略通常是代理，它将请求路由到一个service endpoint。</p><p><br></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方的<a href="https://www.express-gateway.io/getting-started/" target="_blank" rel="noopener">Installation</a>，可以通过CLI命令快速启动一个项目</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express-gateway</span><br><span class="line"></span><br><span class="line">eg gateway create</span><br><span class="line"></span><br><span class="line">cd <span class="hljs-string">`Dir Path`</span> &amp;&amp; npm start</span><br></pre></td></tr></table></figure><p><strong>2个重要的配置文件</strong></p><ul><li>system.config.yml：主要是数据库、加密方式、session等等</li><li>gateway.config.yml：主要就是路由相关的策略</li></ul><p>在浏览器里输入 <a href="http://localhost:8080/ip" target="_blank" rel="noopener">http://localhost:8080/ip</a> ，就会被路由到 <a href="https://httpbin.org/ip" target="_blank" rel="noopener">https://httpbin.org/ip</a> 这个网站，获得一个JSON数据</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"origin"</span>: <span class="hljs-string">"180.167.xxx.xxx"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这是一个超级简单的例，用的是自带的proxy策略，如果有多个微服务节点默认使用的是<code>round-robin</code>做负载均衡，除此之外是<code>static</code>方式，只能指定死IP或URL了，显然无法满足真实的场景，很多时候需要我们自己根据实际的情况做代理开发，比如从注册中心获取微服务IP和端口做路由转发。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>具体的代码可以在<a href="https://github.com/miser/express-gateway-example" target="_blank" rel="noopener">express-gateway-example</a>查看。</p><ul><li>使用JWT做用户登录验证</li><li>2个微服务，一个是<code>account</code>，另一个是<code>banner</code><ul><li>account: 用户登录和需要验证有效身份后显示用户ID</li><li>banner: 无需登录就能访问2个banner图片</li></ul></li></ul><p>在新的文件夹下（express-gateway-example），通过eg(express-gateway)和express命令工具分别生成网关项目gateway和2个微服务项目account、banner，另外新建一个存放JWT秘钥的目录<code>secret-files</code>，在该目录下通过下面命令创建新的秘钥</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out <span class="hljs-keyword">private</span>.pem <span class="hljs-number">512</span></span><br><span class="line">openssl rsa -in <span class="hljs-keyword">private</span>.pem -outform PEM -pubout -out <span class="hljs-keyword">public</span>.pem</span><br></pre></td></tr></table></figure><p><strong>修改网关配置</strong></p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">//</span> <span class="hljs-string">gateway.config.yml</span></span><br><span class="line"><span class="hljs-attr">http:</span></span><br><span class="line"><span class="hljs-attr">  port:</span> <span class="hljs-number">8080</span></span><br><span class="line"><span class="hljs-comment"># admin:</span></span><br><span class="line"><span class="hljs-comment">#   port: 9876</span></span><br><span class="line"><span class="hljs-comment">#   host: localhost</span></span><br><span class="line"><span class="hljs-attr">apiEndpoints:</span></span><br><span class="line"><span class="hljs-attr">  login:</span></span><br><span class="line"><span class="hljs-attr">    host:</span> <span class="hljs-string">localhost</span></span><br><span class="line"><span class="hljs-attr">    paths:</span> <span class="hljs-string">'/account/login'</span></span><br><span class="line"><span class="hljs-attr">  account:</span></span><br><span class="line"><span class="hljs-attr">    host:</span> <span class="hljs-string">localhost</span></span><br><span class="line"><span class="hljs-attr">    paths:</span> <span class="hljs-string">'/account/*'</span></span><br><span class="line"><span class="hljs-attr">  banner:</span></span><br><span class="line"><span class="hljs-attr">    host:</span> <span class="hljs-string">localhost</span></span><br><span class="line"><span class="hljs-attr">    paths:</span> <span class="hljs-string">'/banner/*'</span></span><br><span class="line"><span class="hljs-attr">serviceEndpoints:</span></span><br><span class="line"><span class="hljs-attr">  accountSrv:</span></span><br><span class="line"><span class="hljs-attr">    url:</span> <span class="hljs-string">'http://localhost:3001'</span></span><br><span class="line"><span class="hljs-attr">  bannerSrv:</span></span><br><span class="line"><span class="hljs-attr">    url:</span> <span class="hljs-string">'http://localhost:3002'</span></span><br><span class="line"><span class="hljs-attr">policies:</span></span><br><span class="line"><span class="hljs-bullet">  -</span> <span class="hljs-string">jwt</span></span><br><span class="line"><span class="hljs-bullet">  -</span> <span class="hljs-string">proxy</span></span><br><span class="line"><span class="hljs-attr">pipelines:</span></span><br><span class="line"><span class="hljs-attr">  login:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">login</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">accountSrv</span> </span><br><span class="line"><span class="hljs-attr">  banner:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">banner</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">bannerSrv</span></span><br><span class="line"><span class="hljs-attr">  account:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">account</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - jwt:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              jwtExtractor:</span> <span class="hljs-string">'query'</span></span><br><span class="line"><span class="hljs-attr">              jwtExtractorField:</span> <span class="hljs-string">'token'</span></span><br><span class="line"><span class="hljs-attr">              checkCredentialExistence:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-attr">              secretOrPublicKeyFile:</span> <span class="hljs-string">'../secret-files/public.pem'</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">accountSrv</span></span><br></pre></td></tr></table></figure><p><strong>3个apiEndpoints</strong></p><ul><li>login：访问path <em>/account/login</em></li><li>account：访问path <em>/account/*</em></li><li>banner：访问path <em>/banner/*</em></li></ul><p><strong>2个serviceEndpoints</strong></p><ul><li>accountSrv：对应<code>account</code>服务，本地端口3001</li><li>bannerSrv：对应<code>banner</code>服务，本地端口3002</li></ul><p><strong>配置pipelines</strong></p><ul><li>login和banner这2个apiEndpoints被分别简单的路由到各自的微服务上</li><li>account这个apiEndpoints除了路由外还有JWT策略，action告诉系统它将以URL query的token字段传递加密的认证信息</li></ul><p><strong>启动项目和访问它们</strong></p><p>在各个目录下通过<code>npm start</code>分别启动它们，通过Postman GET请求<a href="http://localhost:8080/account/profile" target="_blank" rel="noopener">http://localhost:8080/account/profile</a> 发现返回401，可见没有通过token验证就会返回401，符合pipelines里account的配置；GET 请求<a href="http://localhost:8080/banner/" target="_blank" rel="noopener">http://localhost:8080/banner/</a> 会正常返回数据，它没有被JWT策略约束</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:200,&quot;message&quot;:&quot;success&quot;,&quot;data&quot;:[&quot;/images/1.png&quot;,&quot;/images/2.png&quot;]&#125;</span><br></pre></td></tr></table></figure><p><strong>获取token</strong></p><p>POST <a href="http://localhost:8080/account/login" target="_blank" rel="noopener">http://localhost:8080/account/login</a> ,它在配置中也未加JWT策略，返回如下：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,</span><br><span class="line">    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"success"</span>,</span><br><span class="line">    <span class="hljs-attr">"token"</span>: <span class="hljs-string">"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjAyMCwibmFtZSI6Im1pc2VyIiwiaWF0IjoxNTgwMTQxODIwLCJleHAiOjE1ODAxNDU0MjB9.mixQa9rJqQAT2makAqWfpOCxTC-r0XussuoSrYYTb0aXcs0gMItSI5Aj6ShneX2H1BW1grXwtkrSqY8_FfhIjA"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将token以URL query形式传参，重新访问profile接口，就正常返回用户ID了</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,</span><br><span class="line">    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"success"</span>,</span><br><span class="line">    <span class="hljs-attr">"data"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"id"</span>: <span class="hljs-string">"2020"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述就是一个简单的Gateway简单的例子，除开内置的一些策略（中间件）外，我们还可以自己开发一些中间件来满足具体需求——<strong><code>插件</code></strong>。</p><p><br></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件分两种：</p><ul><li><p><a href="https://www.express-gateway.io/docs/policies/customization/conditions/" target="_blank" rel="noopener">Conditions</a></p></li><li><p><a href="https://www.express-gateway.io/docs/policies/" target="_blank" rel="noopener">Policies</a></p></li></ul><p>无论是上述哪一个，写好后都要注册到网关中，在gateway项目中新建<code>plugins</code>目录，及其子目录<code>policies</code>、<code>conditions</code>， 和<code>manifest.js</code>、<code>policies/index.js</code>、<code>conditions/index.js</code>文件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// manifest.js</span></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  version: <span class="hljs-string">'0.0.1'</span>,</span><br><span class="line">  init: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">pluginContext</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> policy = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./policies/index.js'</span>);</span><br><span class="line">    pluginContext.registerPolicy(policy);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> condition = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./conditions/index.js'</span>);</span><br><span class="line">    pluginContext.registerCondition(condition);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过registerPolicy和registerCondition将策略和条件注册到网关系统中，另外在<code>system.config.yml</code>配置文件中添加插件的配置路径</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">//</span> <span class="hljs-string">system.config.yml</span></span><br><span class="line"><span class="hljs-attr">plugins:</span></span><br><span class="line"><span class="hljs-attr">  example:</span></span><br><span class="line"><span class="hljs-attr">    package:</span> <span class="hljs-string">'./plugins/manifest.js'</span></span><br></pre></td></tr></table></figure><p><strong>Conditions 条件</strong></p><p>它通过定义一个方法来判断是否执行或跳过一个策略</p><blockquote><h5 id="function-req-conditionConfig-gt-true-false-Handler"><a href="#function-req-conditionConfig-gt-true-false-Handler" class="headerlink" title="function (req, conditionConfig) =&gt; true/false Handler"></a><code>function (req, conditionConfig) =&gt; true/false</code> Handler</h5><ul><li>Executes on each request in current pipeline. If not matched will prevent policy from being fired</li></ul></blockquote><p>在上面的例子中，我们在apiEndpoints和pipelines都定义了一个login，其实它是accountSrv的一个特殊的存在，除了login其它的url地址都是受JWT策略约束的，按照之前的写法显得格外的冗余，我们可以通过一个Condition来做改进，重新改写gateway.config.yml</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">//</span> <span class="hljs-string">gateway.config.yml</span></span><br><span class="line"><span class="hljs-attr">apiEndpoints:</span></span><br><span class="line">  <span class="hljs-comment"># login:</span></span><br><span class="line">  <span class="hljs-comment">#   host: localhost</span></span><br><span class="line">  <span class="hljs-comment">#   paths: '/account/login'</span></span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">pipelines:</span></span><br><span class="line">  <span class="hljs-comment"># login:</span></span><br><span class="line">  <span class="hljs-comment">#   apiEndpoints:</span></span><br><span class="line">  <span class="hljs-comment">#     - login</span></span><br><span class="line">  <span class="hljs-comment">#   policies:</span></span><br><span class="line">  <span class="hljs-comment">#     - proxy:</span></span><br><span class="line">  <span class="hljs-comment">#         - action:</span></span><br><span class="line">  <span class="hljs-comment">#             serviceEndpoint: accountSrv </span></span><br><span class="line"><span class="hljs-attr">  account:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">account</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - jwt:</span></span><br><span class="line"><span class="hljs-bullet">          -</span> </span><br><span class="line"><span class="hljs-attr">            condition:</span></span><br><span class="line"><span class="hljs-attr">              name:</span> <span class="hljs-string">'white-list'</span></span><br><span class="line"><span class="hljs-attr">              list:</span> <span class="hljs-string">['/account/login']</span></span><br><span class="line"><span class="hljs-attr">            action:</span></span><br><span class="line"><span class="hljs-attr">              jwtExtractor:</span> <span class="hljs-string">'query'</span></span><br><span class="line"><span class="hljs-attr">              jwtExtractorField:</span> <span class="hljs-string">'token'</span></span><br><span class="line"><span class="hljs-attr">              checkCredentialExistence:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-attr">              secretOrPublicKeyFile:</span> <span class="hljs-string">'../secret-files/public.pem'</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">accountSrv</span></span><br></pre></td></tr></table></figure><p>我们看到在jwt下面多了一个condition，然后在<code>conditions/index.js</code>里实现一个简单的URL Path 过滤</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  name: <span class="hljs-string">'white-list'</span>,</span><br><span class="line">  schema: &#123;</span><br><span class="line">    $id: <span class="hljs-string">'white-list'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  handler: <span class="hljs-function"><span class="hljs-params">conditionConfig</span> =&gt;</span> req =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> conditionConfig.list.indexOf(req.url) &lt; <span class="hljs-number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个Condition就完成了白名单功能了。</p><p><strong>Policies 策略</strong></p><p>它通过一个中间件方法对所有流入网关请求的预处理</p><p>结合上面的banner接口，我们新开发了一个v2版本的banner列表接口<code>/banner/v2/list</code>，为了老版本的客户端依旧能通过<code>/banner</code>接口访问到新的v2版本，我们需要做一个URL替换</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">pipelines:</span></span><br><span class="line"><span class="hljs-attr">  banner:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">banner</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - rewrite:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              search:</span> <span class="hljs-string">'/banner'</span></span><br><span class="line"><span class="hljs-attr">              replace:</span> <span class="hljs-string">'/banner/v1/list'</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">bannerSrv</span></span><br></pre></td></tr></table></figure><p>在<code>policies/index.js</code>添加替换方法</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  name: <span class="hljs-string">'rewrite'</span>,</span><br><span class="line">  schema: &#123;</span><br><span class="line">    $id: <span class="hljs-string">'rewrite'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  policy: <span class="hljs-function">(<span class="hljs-params">actionParams</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">      req.url = req.url.replace(actionParams.search, actionParams.replace);</span><br><span class="line">      next()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们再GET <a href="http://localhost:8080/banner/" target="_blank" rel="noopener">http://localhost:8080/banner/</a> 时候，将返回新的v2版本的数据</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,</span><br><span class="line">    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"success"</span>,</span><br><span class="line">    <span class="hljs-attr">"data"</span>: [</span><br><span class="line">        <span class="hljs-string">"/images/v2_1.png"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，简单的URL地址替换就完成了。</p><p><br></p><p><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上诉只是Express-Gateway的一角，还有很多有趣灵活的功能值得慢慢探索。BFF层最为整个大系统的前沿征地，而网关更是前沿的前沿，配合GraphQL我相信能不断释放出JavaScript快速开发和迭代的能力，为客户端提供更好的服务和需求响应。</p>]]></content>
    
    <summary type="html">
    
      为了更好的做BFF层，最近看了一些网关资料，Node.js的网关类库相对薄弱很多。Express Gateway，背靠强大的Express社区，很多现成的中间件可以运用其中，省去了不少开发成本和风险。
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://miser.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://miser.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2019 工作总结</title>
    <link href="https://miser.github.io/2019/12/30/summary-2019/"/>
    <id>https://miser.github.io/2019/12/30/summary-2019/</id>
    <published>2019-12-30T15:30:00.000Z</published>
    <updated>2019-12-31T10:36:39.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>It was the best of times, it was the worst of times.</p></blockquote><p>如果真要用一句话形容2019年工作的话，上述的<strong>双城记</strong>节选我觉得是极好。大概2018年尾的时候，公司的前端团队开始用Node.js做些后端业务等相关的工作并积累经验，与现有的Java基础架构做融合，微服务<a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener">Eureka</a>、分布式协调服务<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">ZooKeeper</a>、分布式配置管理平台<a href="https://disconf.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Discon</a>、应用监控<a href="https://github.com/dianping/cat" target="_blank" rel="noopener">Cat</a>、消息列队<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener">RocketMQ</a>、分布式署存储服务<a href="https://github.com/chrislusf/seaweedfs" target="_blank" rel="noopener">SeaweedFS</a>、数据库<a href="https://www.mysql.com/cn/" target="_blank" rel="noopener">MySQL</a>等等，大量的知识扑面而来。幸好之前有.NET C# + Javascript做Web开发经历，加上一些Node.js开发经验，比如<a href="http://aimianwu.com" target="_blank" rel="noopener">爱眠物</a>等等，上手掌握并不难。基本上每天都有很多东西可以学，上半年忙着产出业务，也忙着封装一些基于<code>Egg.js</code>适合公司项目的基础代码。不过问题也是频发，上面提到的很多东西并非是Node.js生态圈大量使用的，引用一些冷门的第三个类库暴露出了EventLoop被卡住、Memory Leak的情况，下半年忙着优化和排查。</p><a id="more"></a><p><br></p><h3 id="EventLoop问题"><a href="#EventLoop问题" class="headerlink" title="EventLoop问题"></a>EventLoop问题</h3><p>我们的Node.js程序发布到测试或者生产，经常服务端出现大量TCP <code>Close Wait</code>的情况，从TCP的信息反馈把重点都放在了网络层面，因为大量Close Wait导致服务无法响应新的请求，以为是上下游网络的超时时间问题，但是无论如何通过Node.js的Javascript层面做实验都未能出现，后来又查系统级别的配置问题等等，都是没查出一个所以然。</p><p><strong>我之前写的各种Node.js服务都跑的好好的，为什么现在这家公司会出现卡死的问题呢？难道把锅甩给系统环境？</strong></p><p>困惑和压力倍增，毕竟项目已经上生产了，金融服务出一点问题都是头大的事情。后来用<code>alinode</code>做监控，可惜我们的节点都在国外，而免费版本对国外节点并不友好，总是会断了监控数据。无奈只能麻烦运维同事帮忙去Docker上生成发生问题时候的<code>火焰图</code>，发现是<code>Cat</code>导致的，底层的C++代码阻碍了EventLoop的正常运行，把整个Node.js进程给卡死了。<br><img src="/images/summary-2019/1.png" alt="catMessageSenderFun方法几乎占据了一整行"></p><p>或许你会问，<strong>为什么不早点搭建有效的监控系统去排查这些问题呢？或许就不会那么被动了！</strong></p><p>主要有3点：</p><ol><li>Node.js在我们上海技术团队内部算是兴起，我们希望能承接更多的业务等去做，就如同<strong>创业</strong>一样，团队自己的技术栈在公司内部使用的多了，自然有更多资源招兵买马为以后大前端、BFF层搭建做准备。可以理解为创业公司不断的做业务拉投资，我相信在很多大点的公司，很多小团队都会有这种创业的感觉</li><li>每个公司所使用的某个技术栈都有自己的定位，我们也在不同领域做尝试，有倾向业务的、有做基础设施搭建的等，也在寻找Node.js适合当前公司的定位</li><li>经验还是缺乏点，当时运维已经有了相关对Docker的系统监控，加上<code>Cat</code>业务监控感觉能抵挡一段时间，但是万万没想到就是缺少CPU的火焰图和内存堆栈图信息导致排查问题困难重重</li></ol><p><br></p><h3 id="Memory-Leak问题"><a href="#Memory-Leak问题" class="headerlink" title="Memory Leak问题"></a>Memory Leak问题</h3><p>前后经历了2次较大的内存泄露问题</p><p><strong>陌生类库：</strong> 其实也是知道要谨慎选择类库的使用，但有时候又该怎么说呢…</p><p><strong>Vue SSR：</strong> 这个问题是书写Vue相关代码时候没注意导致的，其作者在Github上也留言指出了相关的<a href="https://github.com/vuejs/vue/issues/5089" target="_blank" rel="noopener">解决方法</a></p><p><img src="/images/summary-2019/2.jpg" alt="https://github.com/vuejs/vue/issues/5089"></p><p><strong>目前组内对前端或者Node.js的监控体系在逐步搭建和迭代的过程中，一个监控Hub，通过TCP通信将所有的Node.js进程与其进行长连接，实时双向传输数据，按照命令生成火焰图或者内存堆栈信息。</strong></p><p><br></p><h3 id="优化了静态资源打包和分发流程"><a href="#优化了静态资源打包和分发流程" class="headerlink" title="优化了静态资源打包和分发流程"></a>优化了静态资源打包和分发流程</h3><p>打包这个东西自然还是基于<code>Webpack</code>的封装，谁让人家NB呢。整体流程之前比较复杂，做了一次重CI的优化，也适合目前的小型团队使用，从中抽取了一套插件式的程序加载流程，整体思想还是抄的<code>Egg.js</code>，谁让人家好用好扩展呢！</p><p><strong>为什么不完全基于Egg.js的插件开发方式？</strong></p><p>团队对底层架构级的东西不能完全基于Egg.js，会有更多多元化的框架引入（看具体场景，尽量少，但万一呢），通过适配层就能让底层代码依附到不同框架上。所以我既不能依附Webpack写太多插件，也不能依附其它的Node.js应用框架，毕竟Node.js五花八门、百家争鸣，我们想办法把他们粘合在一起就好，所以需要一套自己的加载器。</p><p><br></p><p><br></p><h2 id="从2019迈向2020"><a href="#从2019迈向2020" class="headerlink" title="从2019迈向2020"></a>从2019迈向2020</h2><p>2019年对我而言确实又坏又好，坏的是工作上的问题一个个来，万幸的是都一个个解决和迭代中了，确实经历多了，学到的东西和成长也就多了。期望2020能把一直想做的BFF层可以慢慢做起来，另外监控等小项目能有机会开源。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;It was the best of times, it was the worst of times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果真要用一句话形容2019年工作的话，上述的&lt;strong&gt;双城记&lt;/strong&gt;节选我觉得是极好。大概2018年尾的时候，公司的前端团队开始用Node.js做些后端业务等相关的工作并积累经验，与现有的Java基础架构做融合，微服务&lt;a href=&quot;https://github.com/Netflix/eureka&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eureka&lt;/a&gt;、分布式协调服务&lt;a href=&quot;https://zookeeper.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZooKeeper&lt;/a&gt;、分布式配置管理平台&lt;a href=&quot;https://disconf.readthedocs.io/zh_CN/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discon&lt;/a&gt;、应用监控&lt;a href=&quot;https://github.com/dianping/cat&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cat&lt;/a&gt;、消息列队&lt;a href=&quot;https://rocketmq.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RocketMQ&lt;/a&gt;、分布式署存储服务&lt;a href=&quot;https://github.com/chrislusf/seaweedfs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SeaweedFS&lt;/a&gt;、数据库&lt;a href=&quot;https://www.mysql.com/cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL&lt;/a&gt;等等，大量的知识扑面而来。幸好之前有.NET C# + Javascript做Web开发经历，加上一些Node.js开发经验，比如&lt;a href=&quot;http://aimianwu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;爱眠物&lt;/a&gt;等等，上手掌握并不难。基本上每天都有很多东西可以学，上半年忙着产出业务，也忙着封装一些基于&lt;code&gt;Egg.js&lt;/code&gt;适合公司项目的基础代码。不过问题也是频发，上面提到的很多东西并非是Node.js生态圈大量使用的，引用一些冷门的第三个类库暴露出了EventLoop被卡住、Memory Leak的情况，下半年忙着优化和排查。&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="https://miser.github.io/categories/work/"/>
    
    
  </entry>
  
  <entry>
    <title>2019国庆一人初游舟山</title>
    <link href="https://miser.github.io/2019/10/06/travel-zhoushan/"/>
    <id>https://miser.github.io/2019/10/06/travel-zhoushan/</id>
    <published>2019-10-05T22:11:21.849Z</published>
    <updated>2020-04-22T02:35:06.887Z</updated>
    
    <content type="html"><![CDATA[<p>国庆一家三口分开旅行，各有自己的目的地，我选了舟山，离开上海不远，之前从来没有去过。一人的旅行自然应该惬意为主，打着走到哪算哪的政策主张，也给自己埋下不少的坑。</p><a id="more"></a><p><br></p><h3 id="住宿"><a href="#住宿" class="headerlink" title="#住宿"></a><strong>#住宿</strong></h3><p>黄金周不光是游客的节日，更是商家的盛日，酒店价格也是水涨船高，本想非拖家带口的，不需要离市区多近，经济实惠就行，然后我就在<code>Airbnb</code>上选了一个好评不错的公寓酒店，宽敞、干净、便宜，一个房间可以放下1个主床、1个小床、1个写字台、1个休闲圆桌、3把椅子等，可惜卫生间和淋浴室不怎样，2夜才600不到，地方大约在下图红框内，舟山的汽车城边上。本想在客运中心附近，我自己坐大巴车来回方便，但是它并非是我下车的舟山普陀客运中心（下图右下角那个），打车过来100多:(，出租车司机都不忍心我的旅行泡汤劝我换个酒店（<code>扎心</code>）。</p><p><img src="/images/travel-zhoushan/travel-zhoushan-01.png" alt="本想着离江海近，可以去逛逛的，最后还是没去"></p><p>从酒店出来，和店员打听哪里有夜排档之类，得到的答案是各种遥远，最后选了相对近一点的<code>定海海鲜夜排档</code>，下图位置。一路公交晃晃悠悠，从荒郊野外到市区，感受舟山。</p><p><img src="/images/travel-zhoushan/travel-zhoushan-03.png" alt="不是吃货，选海鲜更多是来舟山的仪式感吧"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-02.jpg" alt="酒店附近的公交车站牌感受下它的荒凉，当时给我一种末世的感觉"></p><p><br></p><h3 id="吃海鲜"><a href="#吃海鲜" class="headerlink" title="#吃海鲜"></a><strong>#吃海鲜</strong></h3><p>到了地方，一条长长的海鲜排档位于2层，看不到底。可以边吃边看江海的风景，对面是若干座小岛，突然心中涌上<code>江枫渔火对愁眠</code>的诗句，不对情不对景色，但也是唯一的瞬间感觉了。像我这样的1人“小客户”，自然不受各个小店老板们的待见，毕竟人家做的是大桌子生意，我只能在不耐烦的目光中点了3个小菜坐在了离风景最远的角落里——一个小桌子上吃起了我<code>海鲜大餐</code>。</p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-04.jpg" alt="定海海鲜夜排档"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-05.jpg" alt="看不到底的店铺，看不完的人群1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-06.jpg" alt="吃不完的海鲜1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-07.jpg" alt="吃不完的海鲜2"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-08.jpg" alt="江枫渔火1"></p><video width="100%" muted controls><br>  <source id="mp4" src="/images/travel-zhoushan/travel-zhoushan-15.mp4"><br>  Your browser does not support the video tag.<br></video><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-09.jpg" alt="从角落的小饭桌望出去"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-10.jpg" alt="我的盘中餐，蛏子和花甲，基本没沙子，蛏子其实很肥大，我没拍好"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-11.jpg" alt="我的盘中餐，盐爆虾，还行吧"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-12.jpg" alt="我的盘中餐，章鱼炒青椒，触须里囤积了很多汁水，一口下去才知道什么叫爆汁"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-13.jpg" alt="此情此景多少要喝点"></p><p>吃完后，走了小几公里到了定海区的商业中心——<code>凯虹广场</code>，买了一包薯片回酒店，7点多就没公交回我住的穷乡僻廊，只能花了30多大洋打车回去，此刻心里就决定第二天要租一天车去<code>朱家尖</code>逛一圈。</p><p><br></p><h3 id="朱家尖"><a href="#朱家尖" class="headerlink" title="#朱家尖"></a><strong>#朱家尖</strong></h3><p><em>大阴天</em></p><p>有了第一天的经历，自然知道从自己住的地方到舟山另一头的朱家尖的距离有多远，不堵车估计出租车单程200大洋。中午，从定海区一路向东，第一站是南沙海滩景区，去那边的排档吃午饭，景区一个人就没进去，毕竟人山人海。因为交通管制，导致要从大青山盘山绕路，妥妥秋名山的感觉，途中拍到了不错的海滩和被云雾缭绕的大青山，值了油钱。</p><p><img src="/images/travel-zhoushan/travel-zhoushan-16.png" alt="舟山的两端"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-17.jpg" alt="租的老款马6"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-18.jpg" alt="海滩&amp;大青山1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-19.jpg" alt="海滩&amp;大青山2"></p><p><img src="/images/travel-zhoushan/travel-zhoushan-23.png" alt="海滩&amp;大青山 拍照的大概位置"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-20.jpg" alt="看不到底的店铺，看不完的人群2"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-22.jpg" alt="吃不完的海鲜3"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-21.jpg" alt="我的海鲜面 虾、隔离、🦑丝等等"></p><p>吃饱开车，本想继续探索南沙海滩的，毕竟进景点海滩，一路找<code>野生海滩</code>过过瘾的，可惜人实在太多，各个主要路口交通管制，一不小心开错，感觉再绕进景区估计很久，就打算去另一个地方<code>月岙大沙里沙滩</code>（到了才发现当天没有开放，美景请自行搜索了），途中又开错了路，经过了白山景区，看到了一个画有观音像的石壁。</p><blockquote><p>白山景区系观音文化苑所在地，印象普陀剧场为朱家尖最重要的景区之一，其间一座高114.9米的干丈崖上彩绘的一尊观音大立像壁画高69米，面积达2000平方米，被誉为“海上莫高窟”。</p></blockquote><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-24.jpg" alt="观音像"></p><p>又兜兜转转的乡间小路，来到了游客相对很少的月岙大沙里沙滩旁的一条沿海小路，很宽阔的江海外也没有什么特别的感觉吧，本想当场掉头回去，可惜车技不佳，只能一直往前开到一个相对比较宽阔的道路掉头，然后，就遇到了很有感觉的地方。</p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-25.jpg" alt="对面就是月岙大沙里沙滩了"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-26.jpg" alt="江海山1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-27.jpg" alt="江海山2"></p><p>从下面的地图你会发现，一个类似U形弯道的末尾，我把车调头，准备驶离的时候，眼前的小路和海景让我有种莫名的触景生情感，扭曲的小路如同自己的过往，很多事情曲折并不顺利，然而外面的世界又那么的壮阔美丽，想去了解想去看看想去感受，忍不住在车里听了几遍邓紫棋的<code>后会无期</code>。</p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-28.jpg" alt="小路和景色1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-30.jpg" alt="小路和景色2"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-29.jpg" alt="小路和景色3"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-31.jpg" alt="小路和景色4"></p><p><img src="/images/travel-zhoushan/travel-zhoushan-32.png" alt="小路和景色地图位置"></p><p>在夜色慢慢落下前离开了此地回到了舟山市区。第二天还了车，坐上大巴返回了上海。</p><h3 id="回首"><a href="#回首" class="headerlink" title="#回首"></a><strong>#回首</strong></h3><p>玩了3天，有坑，住的远、路不熟悉等等，正是这些才促使我看到了许多没有规划的风景，人生哪有那么多规划，学会接受和享受那些原本不属于你而又是你的风景吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国庆一家三口分开旅行，各有自己的目的地，我选了舟山，离开上海不远，之前从来没有去过。一人的旅行自然应该惬意为主，打着走到哪算哪的政策主张，也给自己埋下不少的坑。&lt;/p&gt;
    
    </summary>
    
      <category term="travel" scheme="https://miser.github.io/categories/travel/"/>
    
    
  </entry>
  
  <entry>
    <title>Set A Flag</title>
    <link href="https://miser.github.io/2019/06/19/bec/"/>
    <id>https://miser.github.io/2019/06/19/bec/</id>
    <published>2019-06-19T05:30:00.000Z</published>
    <updated>2020-04-22T02:34:34.350Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Practice-speaking-and-listening-pass-the-BEC-exam"><a href="#Practice-speaking-and-listening-pass-the-BEC-exam" class="headerlink" title="Practice speaking and listening, pass the BEC exam."></a>Practice speaking and listening, pass the BEC exam.</h5><p><img src="/images/bec/1.jpeg" alt="book1"><br><img src="/images/bec/2.jpeg" alt="book2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Practice-speaking-and-listening-pass-the-BEC-exam&quot;&gt;&lt;a href=&quot;#Practice-speaking-and-listening-pass-the-BEC-exam&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="work" scheme="https://miser.github.io/categories/work/"/>
    
    
  </entry>
  
  <entry>
    <title>Eggjs Boot</title>
    <link href="https://miser.github.io/2019/05/09/egg-boot/"/>
    <id>https://miser.github.io/2019/05/09/egg-boot/</id>
    <published>2019-05-09T07:01:08.568Z</published>
    <updated>2020-04-22T02:34:05.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="#Preface"></a><strong>#Preface</strong></h3><p>This article will introduce the boot of <a href="https://eggjs.org/" target="_blank" rel="noopener">Eggjs</a> that is a Node.js web framework.</p><p>It is based on Koa and can satisfy  your requirement through a large of plugins and middleware, even a your own framework. It is very important to create a cluster, an agent process and some worker processes when it is running. The cluster makes it stronger. Next, we can understand it by reading the source code.</p><p>Eggjs has a few major libs, egg-core、egg、egg-cluster、egg-bin、egg-scripts and so on.</p><p><strong>egg-core</strong>: it extends Koa and is as a parent object of every agent and worker.</p><p><strong>egg</strong>: it defines some actions for agent and worker,  you can almost use these actions to create an app of a single process.</p><p><strong>egg-cluster</strong>: it creates a cluster and manages them.</p><p><strong>egg-scripts and Egg-bin</strong>: their job is run the whole app in a different environment.</p><p><br></p><p><em><strong>Tips: We will discuss Eggjs with basing 2.x.x version.</strong></em></p><p><br></p><a id="more"></a><h2 id="Scan-Libs-Code"><a href="#Scan-Libs-Code" class="headerlink" title="#Scan Libs Code"></a><strong>#Scan Libs Code</strong></h2><p><em>* The directory and the code segment are not whole content after this post, these major are only for a better explanation.</em></p><h3 id="egg-core"><a href="#egg-core" class="headerlink" title="egg-core"></a><strong>egg-core</strong></h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">— lib</span><br><span class="line">  — / loader (dir)</span><br><span class="line">  — mixin (dir)</span><br><span class="line">  — utils (dir)</span><br><span class="line">  egg.js</span><br><span class="line">  lifecycle.js</span><br></pre></td></tr></table></figure><p>The above is the directory structure of egg-core.The <em><strong>egg.js</strong></em> and folder of the <em><strong>loader</strong></em> are important to point for this lib.</p><p>See egg.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> KoaApplication = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Lifecycle = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./lifecycle'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EggCore</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">KoaApplication</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.lifecycle = <span class="hljs-keyword">new</span> Lifecycle(&#123;</span><br><span class="line">      baseDir: options.baseDir,</span><br><span class="line">      app: <span class="hljs-keyword">this</span>,</span><br><span class="line">      logger: <span class="hljs-keyword">this</span>.console</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> Loader = <span class="hljs-keyword">this</span>[EGG_LOADER]</span><br><span class="line">    assert(Loader, <span class="hljs-string">"Symbol.for('egg#loader') is required"</span>)</span><br><span class="line">    <span class="hljs-keyword">this</span>.loader = <span class="hljs-keyword">new</span> Loader(&#123;</span><br><span class="line">      baseDir: options.baseDir,</span><br><span class="line">      app: <span class="hljs-keyword">this</span>,</span><br><span class="line">      plugins: options.plugins,</span><br><span class="line">      logger: <span class="hljs-keyword">this</span>.console,</span><br><span class="line">      serverScope: options.serverScope,</span><br><span class="line">      env: options.env</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  beforeStart(scope) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.lifecycle.registerBeforeStart(scope)</span><br><span class="line">  &#125;</span><br><span class="line">  ready(flagOrFunction) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.lifecycle.ready(flagOrFunction)</span><br><span class="line">  &#125;</span><br><span class="line">  get [EGG_LOADER]() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">'./loader/egg_loader'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, we can know why it is called that bases on Koa because EggCore extends KoaApplication.</p><p>Second, it defines a few new fields in the construction function, such as <em>lifecycle</em> and <em>loader</em>. The <em>loader</em> field helps app for creating important feature include config、plugin、controller、extend、router、middleware、service and so on, it will load some js file in the special directory when the app is starting.</p><p>Another side, both <em>beforeStart</em> and <em>ready</em> often are called when we need to write some plugins.</p><h3 id="egg"><a href="#egg" class="headerlink" title="egg"></a><strong>egg</strong></h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">— / app</span><br><span class="line">— / config</span><br><span class="line">— / lib</span><br><span class="line">  - / core</span><br><span class="line">    - / messenger</span><br><span class="line">  - / jsdoc</span><br><span class="line">  - / loader</span><br><span class="line">  - agent.js</span><br><span class="line">  - application.js</span><br><span class="line">  - egg.js</span><br><span class="line">  - start.js</span><br><span class="line">- index.js</span><br></pre></td></tr></table></figure><p>There is an egg.js file that is the same name in the egg-core, but it bases on <em>EggCore Class</em> and extends the lifecycle field, creates new messenger field and cluster field and dumps app config info.</p><p>See egg.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> EggCore = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg-core'</span>).EggCore</span><br><span class="line"><span class="hljs-keyword">const</span> cluster = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cluster-client'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Messenger = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./core/messenger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EggApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EggCore</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.loader.loadConfig()</span><br><span class="line">    <span class="hljs-keyword">this</span>.messenger = Messenger.create(<span class="hljs-keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// trigger serverDidReady hook when all app workers</span></span><br><span class="line">    <span class="hljs-comment">// and agent worker is ready</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.messenger.once(<span class="hljs-string">'egg-ready'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.lifecycle.triggerServerDidReady()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.ready(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span></span><br><span class="line">      process.nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> dumpStartTime = <span class="hljs-built_in">Date</span>.now()</span><br><span class="line">        <span class="hljs-keyword">this</span>.dumpConfig()</span><br><span class="line">        <span class="hljs-keyword">this</span>.dumpTiming()</span><br><span class="line">        <span class="hljs-keyword">this</span>.coreLogger.info(</span><br><span class="line">          <span class="hljs-string">'[egg:core] dump config after ready, %s'</span>,</span><br><span class="line">          ms(<span class="hljs-built_in">Date</span>.now() - dumpStartTime)</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.cluster = <span class="hljs-function">(<span class="hljs-params">clientClass, options</span>) =&gt;</span> &#123;</span><br><span class="line">      options = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, <span class="hljs-keyword">this</span>.config.clusterClient, options, &#123;</span><br><span class="line">        singleMode: <span class="hljs-keyword">this</span>.options.mode === <span class="hljs-string">'single'</span>,</span><br><span class="line">        <span class="hljs-comment">// cluster need a port that can't conflict on the environment</span></span><br><span class="line">        port: <span class="hljs-keyword">this</span>.options.clusterPort,</span><br><span class="line">        <span class="hljs-comment">// agent worker is leader, app workers are follower</span></span><br><span class="line">        isLeader: <span class="hljs-keyword">this</span>.type === <span class="hljs-string">'agent'</span>,</span><br><span class="line">        logger: <span class="hljs-keyword">this</span>.coreLogger</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="hljs-keyword">const</span> client = cluster(clientClass, options)</span><br><span class="line">      <span class="hljs-keyword">this</span>._patchClusterClient(client)</span><br><span class="line">      <span class="hljs-keyword">return</span> client</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See agent.js and application.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// agent.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> EggApplication = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./egg'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> AgentWorkerLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./loader'</span>).AgentWorkerLoader</span><br><span class="line"><span class="hljs-keyword">const</span> EGG_LOADER = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">'egg#loader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Agent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EggApplication</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    options.type = <span class="hljs-string">'agent'</span></span><br><span class="line">    <span class="hljs-keyword">super</span>(options)</span><br><span class="line">    <span class="hljs-keyword">this</span>.loader.load()</span><br><span class="line">  &#125;</span><br><span class="line">  get [EGG_LOADER]() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> AgentWorkerLoader</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// application.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> EggApplication = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./egg'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> AgentWorkerLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./loader'</span>).AppWorkerLoader</span><br><span class="line"><span class="hljs-keyword">const</span> EGG_LOADER = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">'egg#loader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EggApplication</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    options.type = <span class="hljs-string">'application'</span></span><br><span class="line">    <span class="hljs-keyword">super</span>(options)</span><br><span class="line">    <span class="hljs-keyword">this</span>.loader.load()</span><br><span class="line">  &#125;</span><br><span class="line">  get [EGG_LOADER]() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> AppWorkerLoader</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can see that they override the _EGG_LOADER_ property, which uses to create a new <em>loader</em> field in the construction of EggCore that is their parent class. Finally, they call the <em>load</em> function.</p><p>We have the base application code. rNext, look a few of libs for starting web app.</p><h3 id="egg-scripts-and-egg-bin"><a href="#egg-scripts-and-egg-bin" class="headerlink" title="egg-scripts and egg-bin"></a><strong>egg-scripts and egg-bin</strong></h3><p>Both these libs start the web app in a different environment. Egg-scripts is easier and more clear, uses the production environment. Egg-bin has much code for helping debug, dev, test and so on, we usually use it in the dev, debug or test environment. We almost don’t know them at most of time.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-string">"start"</span>: <span class="hljs-string">"env egg-scripts start"</span>,</span><br><span class="line">    <span class="hljs-string">"dev"</span>: <span class="hljs-string">"env egg-bin dev"</span>,</span><br><span class="line">    <span class="hljs-string">"stop"</span>: <span class="hljs-string">"egg-scripts stop"</span>,</span><br><span class="line">    <span class="hljs-string">"debug"</span>: <span class="hljs-string">"egg-bin debug"</span>,</span><br><span class="line">    <span class="hljs-string">"test"</span>: <span class="hljs-string">"npm run lint -- --fix &amp;&amp; npm run test-local"</span>,</span><br><span class="line">    <span class="hljs-string">"test-local"</span>: <span class="hljs-string">"env egg-bin test"</span>,</span><br><span class="line">    <span class="hljs-string">"cov"</span>: <span class="hljs-string">"egg-bin cov"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <em>scripts</em> command of this eggjs app conforms to the above description.</p><h3 id="egg-cluster"><a href="#egg-cluster" class="headerlink" title="egg-cluster"></a><strong>egg-cluster</strong></h3><p>The cluster is an important feature for Eggjs. This lib is a bridge for connecting one single agent process and many workers processes. It like a manager.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- / lib</span><br><span class="line">  - / utils</span><br><span class="line">  - agent_worker.js</span><br><span class="line">  - app_worker.js</span><br><span class="line">  - master.js</span><br><span class="line">- index.js</span><br></pre></td></tr></table></figure><p>I had written an <a href="/2019/01/18/egg-cluster">article</a> about egg-cluster in Chinese. I always think this is the core of Eggjs, so I will explain the whole Eggjs framework around it.</p><h2 id="From-start-to-getting-the-first-request"><a href="#From-start-to-getting-the-first-request" class="headerlink" title="#From start to getting the first request"></a><strong>#From start to getting the first request</strong></h2><p><strong>What happens when we input <code>npm run dev</code> or <code>npm start</code> in the terminal?</strong></p><ul><li><strong>egg-scripts(prod):</strong> it can require <em>framework</em> by <code>child_process.spawn</code> and calls <em>startCluster</em> function.</li><li><strong>egg-bin(dev):</strong> it can require <em>framework</em> by <code>child_process.fork</code> and calls <em>startCluster</em> function.</li><li><code>[parent process]</code>: The command of running is in one process called the parent process. The system will create a new process called the master process when the parent process requires a framework.As usual, the <code>framework</code> is the file path of Eggjs.If you want to use a custom framework, you can add a param in the command, such as <code>--framework { your path }</code></li></ul><p><strong>Pseudo Code</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg-scripts</span></span><br><span class="line"><span class="hljs-comment">// parent process</span></span><br><span class="line"><span class="hljs-keyword">const</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>).spawn <span class="hljs-comment">// create new process</span></span><br><span class="line">spawn(<span class="hljs-string">'node'</span>, <span class="hljs-string">'require(&#123;&#123; framework path &#125;&#125;).startCluster(...)'</span>, options))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// egg-bin</span></span><br><span class="line"><span class="hljs-comment">// parent process</span></span><br><span class="line"><span class="hljs-keyword">const</span> cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>)</span><br><span class="line">cp.fork(<span class="hljs-string">'require(&#123;&#123; framework path &#125;&#125;).startCluster(...)'</span>, args, options) <span class="hljs-comment">// create new process</span></span><br></pre></td></tr></table></figure><p>Egg-scripts uses <code>spawn</code> function to require framework while egg-scripts calls <code>fork</code> function.The latter is a special case of the former. Egg-bin has more code than egg-scripts, these features help us for developing or debug the app.</p><p>We have two processes. In general, this newly created process is called the master process.</p><p><strong>Why is the master process called birdge?</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg index.js</span></span><br><span class="line">exports.startCluster = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg-cluster'</span>).startCluster</span><br></pre></td></tr></table></figure><p>Actually, we exec <code>egg-cluster</code>‘s startCluster function when we require the framework. We open <code>index.js</code> file in the egg-cluster lib. </p><p><strong>First, it is real enter point for whole web app.</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> Master = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./lib/master'</span>)</span><br><span class="line">exports.startCluster = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">new</span> Master(options).ready(callback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ./lib/master.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> ready = <span class="hljs-built_in">require</span>(<span class="hljs-string">'get-ready'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> detectPort = <span class="hljs-built_in">require</span>(<span class="hljs-string">'detect-port'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Manager = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./utils/manager'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Messenger = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./utils/messenger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Master</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>()</span><br><span class="line">    <span class="hljs-keyword">this</span>.options = parseOptions(options)</span><br><span class="line">    <span class="hljs-keyword">this</span>.workerManager = <span class="hljs-keyword">new</span> Manager()</span><br><span class="line">    <span class="hljs-keyword">this</span>.messenger = <span class="hljs-keyword">new</span> Messenger(<span class="hljs-keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    ready.mixin(<span class="hljs-keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.ready(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.isStarted = <span class="hljs-literal">true</span></span><br><span class="line">      <span class="hljs-keyword">const</span> action = <span class="hljs-string">'egg-ready'</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.messenger.send(&#123;</span><br><span class="line">        action,</span><br><span class="line">        to: <span class="hljs-string">'parent'</span>,</span><br><span class="line">        data: &#123; <span class="hljs-attr">port</span>: <span class="hljs-keyword">this</span>[REALPORT], <span class="hljs-attr">address</span>: <span class="hljs-keyword">this</span>[APP_ADDRESS] &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="hljs-keyword">this</span>.messenger.send(&#123; action, <span class="hljs-attr">to</span>: <span class="hljs-string">'app'</span>, <span class="hljs-attr">data</span>: <span class="hljs-keyword">this</span>.options &#125;)</span><br><span class="line">      <span class="hljs-keyword">this</span>.messenger.send(&#123; action, <span class="hljs-attr">to</span>: <span class="hljs-string">'agent'</span>, <span class="hljs-attr">data</span>: <span class="hljs-keyword">this</span>.options &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// start check agent and worker status</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isProduction) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.workerManager.startCheck()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// fork app workers after agent started</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.once(<span class="hljs-string">'agent-start'</span>, <span class="hljs-keyword">this</span>.forkAppWorkers.bind(<span class="hljs-keyword">this</span>))</span><br><span class="line"></span><br><span class="line">    detectPort(<span class="hljs-function">(<span class="hljs-params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">        err.name = <span class="hljs-string">'ClusterPortConflictError'</span></span><br><span class="line">        err.message = <span class="hljs-string">'[master] try get free port error, '</span> + err.message</span><br><span class="line">        <span class="hljs-keyword">this</span>.logger.error(err)</span><br><span class="line">        process.exit(<span class="hljs-number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">this</span>.options.clusterPort = port</span><br><span class="line">      <span class="hljs-keyword">this</span>.forkAgentWorker()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  forkAppWorkers() &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    cluster.on(<span class="hljs-string">'fork'</span>, worker =&gt; &#123;</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">      worker.on(<span class="hljs-string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">'string'</span>) msg = &#123; <span class="hljs-attr">action</span>: msg, <span class="hljs-attr">data</span>: msg &#125;;</span><br><span class="line">        msg.from = <span class="hljs-string">'app'</span>;</span><br><span class="line">        <span class="hljs-keyword">this</span>.messenger.send(msg);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  forkAgentWorker() &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    agentWorker.on(<span class="hljs-string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">'string'</span>) msg = &#123; <span class="hljs-attr">action</span>: msg, <span class="hljs-attr">data</span>: msg &#125;;</span><br><span class="line">      msg.from = <span class="hljs-string">'agent'</span>;</span><br><span class="line">      <span class="hljs-keyword">this</span>.messenger.send(msg);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// the callback of ready function will be trigger after all major boots had been loaded</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// forkAgentWorker</span></span><br><span class="line"><span class="hljs-keyword">const</span> agent = <span class="hljs-keyword">new</span> Agent(options)</span><br><span class="line">agent.ready(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span></span><br><span class="line">  process.send(&#123; <span class="hljs-attr">action</span>: <span class="hljs-string">'agent-start'</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">'master'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// fork a single worker</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Application(options);</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startServer</span>(<span class="hljs-params">err</span>) </span>&#123;  </span><br><span class="line">  <span class="hljs-keyword">let</span> server;</span><br><span class="line">  <span class="hljs-keyword">if</span> (options.https) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> httpsOptions = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, options.https, &#123;</span><br><span class="line">      key: fs.readFileSync(options.https.key),</span><br><span class="line">      cert: fs.readFileSync(options.https.cert),</span><br><span class="line">    &#125;);</span><br><span class="line">    server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'https'</span>).createServer(httpsOptions, app.callback());</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>).createServer(app.callback());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// emit `server` event in app</span></span><br><span class="line">  app.emit(<span class="hljs-string">'server'</span>, server);</span><br><span class="line">  </span><br><span class="line">  server.listen(...args);</span><br><span class="line">&#125;</span><br><span class="line">app.ready(startServer);</span><br></pre></td></tr></table></figure><p>On the other hand, this web will be constructed during creating a <code>Master</code> object.</p><ul><li>workerManager: it will hold on all worker porcesses.</li><li>messenger: we make <code>master</code> a transit station that helps process for communicating (IPC). If you read more code, you can get it. I have said above that it is a bridge. I have write an <a href="[http://localhost:4000/2019/01/18/egg-cluster/#Agent-Works%E6%80%8E%E4%B9%88%E9%80%9A%E4%BF%A1%E5%91%A2-IPC](http://localhost:4000/2019/01/18/egg-cluster/#Agent-Works怎么通信呢-IPC">article(Chinese)</a>) about it.</li></ul><blockquote><ul><li>The Master maintains a Messenger instance (egg-cluster/lib/utils/messenger.js)</li><li>EggApplication maintain the other Messenge instance （egg/lib/core/messenger.js）</li><li>Both the agent and worker process base on EggApplication, them can send info to the master process creating them when calling Messenger. The master process is according to entering params to transmit to the agent or worker, you read forkAppWorkers and forkAgentWorker function in the master</li></ul></blockquote><ul><li><p>ready.mixin &amp; this.ready: ‘get-ready’ often is used by the official when an object need trigger a few callbacks after it whole initializes. Here it will broadcast an event to the parent, workers and then agent process, telling them that I am ok.</p></li><li><p>detectPort: apply for an available port, default is 7001.If Successly, it will <code>fork</code> an agent process and register a callback message for new created an agent object.</p></li><li><p><code>[agent process]</code>: create new Agent and run loadPlugin, loadConfig, loadAgentExtend, loadContextExtend, and loadCustomAgent.</p><ul><li><p>loadPlugin: find all plugin, record their dir paths =&gt; this.dirs</p></li><li><p>loadConfig: merge all config, the config content of the app level is more priority than the framework and the latter is more priority than the plugin.</p></li><li>loadAgentExtend: load and merge all of the extending of agent object  (<em>app &gt; plugin &gt; core</em>)</li><li>loadContextExtend: load and merge all of the extending of context object  (<em>app &gt; plugin &gt; core</em>)</li><li>loadCustomAgent: it is important that the lifecycle of app boot will be serially triggered. This lifecycle field is defined in EggCore constructor, we can look at the whole process in the yellow background under the image.【<a href="https://eggjs.org/en/basics/app-start.html" target="_blank" rel="noopener">Application Startup Configuration(official)</a>】. It help you for better writing a few plugins.</li><li>Last, all major boots had been loaded, the agent process will trigger function registered in the callback array, such as sending <code>&#39;agent-start&#39;</code> to the master process.</li></ul></li></ul><p><img src="/images/egg-boot/egg-boot.jpg" alt="egg boot process"></p><ul><li><p><code>[master process]</code>: start to fork a few worker processes in accordance with specifying or using the default being CPU kernel count after the master process get <code>&#39;agent-start&#39;</code> message from the agent process. It will open a new relatable load, we take a single worker process example.</p></li><li><p><code>[a single worker process]</code>: create new Agent and run loadPlugin, loadConfig, loadApplicationExtend, loadRequestExtend, loadResponseExtend, loadContextExtend, loadHelperExtend, loadCustomApp, loadService, loadMiddleware, loadController, loadRouter, and loadCustomLoader.</p><ul><li><p>loadPlugin: same as the agent</p></li><li><p>loadConfig: same as the agent</p></li><li><p>loadApplicationExtend: same as the agent  (<em>app &gt; plugin &gt; core</em>)</p></li><li><p>loadRequestExtend: load and merge all of the extending of request object (<em>app &gt; plugin &gt; core</em>)</p></li><li><p>loadResponseExtend: load and merge all of the extending of response object (<em>app &gt; plugin &gt; core</em>)</p></li><li><p>loadContextExtend: same as the agent</p></li><li><p>loadHelperExtend: load and merge all of the extending of helper object (<em>app &gt; plugin &gt; core</em>)</p></li><li><p>loadCustomApp: same as the agent （<em>app &gt; plugin</em>）</p></li><li><p>loadService: load and merge all of the extending of helper object （<em>app &gt; plugin</em>）</p></li><li><p>loadMiddleware: load middlewares and iterate them =&gt; mw, if it conforms the middleware standard, it will be used with app.use(mw) （<em>app &gt; plugin &gt; core</em>）</p></li><li><p>loadController: iterate all controllers’ functions =&gt; key, wrap a function, make it be a middleware function and is bound to controller.xxx.xxx (only <em>app</em>). This middleware will be triggered when getting a new request, the Controller is defined in the <code>app/controller</code> directory and the key is it’s function.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodToMiddleware</span>(<span class="hljs-params">Controller, key</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">classControllerMiddleware</span>(<span class="hljs-params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> Controller(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.app.config.controller || !<span class="hljs-keyword">this</span>.app.config.controller.supportParams) &#123;</span><br><span class="line">      args = [ <span class="hljs-keyword">this</span> ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> utils.callFn(controller[key], args, controller);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>loadRouter: it makes request’s path associated with the controllers’ function that has been become to middleware (only <em>app</em>)</p></li><li><p>loadCustomLoader: load ourselves function to create some built-in objects for app object or other.<a href="https://eggjs.org/en/advanced/loader.html#customloader" target="_blank" rel="noopener">Customloader</a></p></li></ul><ul><li><code>[master process]</code>: it listens to all worker processes and triggers the master’s ready once they have finished booting.</li><li>send <code>egg-ready</code> to the parent process, the agent process, the app worker processes</li><li>Last, traverse BOOTS and run serverDidReady function of each item.</li></ul><p>It is the whole boot for Eggjs framework but doesn’t include, such as restarting a worker process when it exits or disconnects,  shuting down…</p><p><strong>Second, every process is alone if we have not the master. It like a bridge organizing all island, from creation to IPC.</strong></p><p><strong>What happens when web app get an Http request?</strong></p><p><em>We only discuss Eggjs code in the applaction layer. :)</em></p><p>The <code>agent</code> can’t deal with any request because it doesn’t listen port. All request always hand over to <code>workers</code>. We look at creating worker code, it will run a app.callback function and listen port when it has booted.</p><p>This callback is the members of Appliaction in Koa. If server get new request, it will create a new context and handle it. In Eggjs, this handleRequest function has been overwrited. Last, the framework will iterate over all middleware under the current route including the converted controller’s function.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// koa/lib/application</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Emitter</span> </span>&#123;</span><br><span class="line">  callback() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> fn = compose(<span class="hljs-keyword">this</span>.middleware);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.listenerCount(<span class="hljs-string">'error'</span>)) <span class="hljs-keyword">this</span>.on(<span class="hljs-string">'error'</span>, <span class="hljs-keyword">this</span>.onerror);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> handleRequest = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> ctx = <span class="hljs-keyword">this</span>.createContext(req, res);</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.handleRequest(ctx, fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> handleRequest;</span><br><span class="line">  &#125;</span><br><span class="line">  handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> res = ctx.res;</span><br><span class="line">    res.statusCode = <span class="hljs-number">404</span>;</span><br><span class="line">    <span class="hljs-keyword">const</span> onerror = <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> ctx.onerror(err);</span><br><span class="line">    <span class="hljs-keyword">const</span> handleResponse = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> respond(ctx);</span><br><span class="line">    onFinished(res, onerror);</span><br><span class="line">    <span class="hljs-keyword">return</span> fnMiddleware(ctx).then(handleResponse).catch(onerror);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// egg/lib/application</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EggApplication</span> </span>&#123;</span><br><span class="line">handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.emit(<span class="hljs-string">'request'</span>, ctx)</span><br><span class="line">    <span class="hljs-keyword">super</span>.handleRequest(ctx, fnMiddleware)</span><br><span class="line">    onFinished(ctx.res, () =&gt; <span class="hljs-keyword">this</span>.emit(<span class="hljs-string">'response'</span>, ctx))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>In summary, we have know how to boot web app and deal with request in Eggjs.</strong> When we know it, we can easily write some plugins and middlewares to finish the business requirements.</p>]]></content>
    
    <summary type="html">
    
      This article will introduce the boot of Eggjs that is a Node.js web framework.It is based on Koa and can satisfy  your requirement through a large of plugins and middleware, even a your own framework. It is very important to create a cluster, an agent process and some worker processes when it is running. The cluster makes it stronger. Next, we can understand it by reading the source code.
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://miser.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://miser.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Egg Cluster 简单介绍</title>
    <link href="https://miser.github.io/2019/01/18/egg-cluster/"/>
    <id>https://miser.github.io/2019/01/18/egg-cluster/</id>
    <published>2019-01-18T05:48:01.464Z</published>
    <updated>2020-04-22T02:33:34.464Z</updated>
    
    <content type="html"><![CDATA[<p>如果不清楚什么是Egg.js，希望能移步到它的<a href="https://eggjs.org" target="_blank" rel="noopener">官网</a>简单看下。另外说它是<strong>约定大于配置</strong>的话，我只能说你真的不了解它，或者说不了解框架，哪个框架没有约定？毕竟没有规矩不成方圆，何况是逻辑性的程序呢？官方列出的特性如下：</p><blockquote><p>1.提供基于 Egg <a href="https://eggjs.org/zh-cn/advanced/framework.html" target="_blank" rel="noopener">定制上层框架</a> 的能力<br>2.高度可扩展的<a href="https://eggjs.org/zh-cn/basics/plugin.html" target="_blank" rel="noopener">插件机制</a><br>3.内置<a href="https://eggjs.org/zh-cn/advanced/cluster-client.html" target="_blank" rel="noopener">多进程管理</a><br>4.基于 <a href="http://koajs.com/" target="_blank" rel="noopener">Koa</a> 开发，性能优异<br>5.框架稳定，测试覆盖率高<br>6.<a href="https://eggjs.org/zh-cn/tutorials/progressive.html" target="_blank" rel="noopener">渐进式开发</a></p></blockquote><p>第1条，它有那么Koa也有啊。第2条，它有，难道Koa、Express等就没有嘛？第4条，更好的补充了Koa不是更好吗？第5条，难道别的框架就不稳定了？第6条，前端鼓吹渐进式、后端也鼓吹，那究竟什么是渐进式呢？</p><p>在我看来最吸引我的是第3条，<strong>内置多进程管理</strong>，这个在其它主流nodejs框架中是稀缺的特性，此文就简单聊聊它。</p><a id="more"></a><h3 id="从源码慢慢了解"><a href="#从源码慢慢了解" class="headerlink" title="#从源码慢慢了解"></a><strong>#从源码慢慢了解</strong></h3><ul><li><strong>egg-core</strong>: 定义了一个<strong>EggCore</strong>类，它继承KoaApplication，也就是特性中提到的第4条 <em>基于Koa开发，性能优异</em></li><li><strong>egg</strong>: 定义了一个继承于EggCore的<strong>EggApplication</strong>类，并且Application和Agent分别继承于EggApplication</li><li><strong>egg-cluster</strong>: 这个类库主要就是做<strong>多进程管理</strong>的工作</li></ul><p><em>egg-cluster让Egg.js变得与众不同</em>，看看它做了什么。</p><h3 id="egg-cluster"><a href="#egg-cluster" class="headerlink" title="egg-cluster"></a>egg-cluster</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg-cluster index.js 唯一对外暴露的接口 startCluster</span></span><br><span class="line">exports.startCluster = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options, callback</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">new</span> Master(options).ready(callback)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>egg-cluster就是靠Master在管理egg里面的angent和workers（application）,另外它也是它们之间通信的中转站，看下官网给出的图解：<br><img src="/images/egg-cluster/1.jpg" alt="Master-Agent-Works 模型"></p><h3 id="Agent-Works怎么启动的？"><a href="#Agent-Works怎么启动的？" class="headerlink" title="Agent-Works怎么启动的？"></a>Agent-Works怎么启动的？</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Master</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventEmitter</span> </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">constructor</span>(options) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.workerManager = <span class="hljs-keyword">new</span> Manager();</span><br><span class="line">    <span class="hljs-keyword">this</span>.messenger = <span class="hljs-keyword">new</span> Messenger(<span class="hljs-keyword">this</span>);</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">this</span>.once(<span class="hljs-string">'agent-start'</span>, <span class="hljs-keyword">this</span>.forkAppWorkers.bind(<span class="hljs-keyword">this</span>));</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">        detectPort(<span class="hljs-function">(<span class="hljs-params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-comment">// 试着找个可以用的port</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.options.clusterPort = port;</span><br><span class="line">            <span class="hljs-comment">// 启动 agent</span></span><br><span class="line">            <span class="hljs-keyword">this</span>.forkAgentWorker();</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    forkAgentWorker() &#123;</span><br><span class="line">        <span class="hljs-comment">// ... childprocess.fork egg-cluster/lib/agent_worker.js</span></span><br><span class="line">        <span class="hljs-keyword">const</span> agentWorker = childprocess.fork(<span class="hljs-keyword">this</span>.getAgentWorkerFile(), args, opt);</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">    forkAppWorkers() &#123;</span><br><span class="line">        <span class="hljs-comment">// 将需要数量的 worker 一个个创建出来</span></span><br><span class="line">        <span class="hljs-comment">// cluster.fork egg-cluster/lib/agent_worker.js 它们将监听同一个服务端口</span></span><br><span class="line">        <span class="hljs-comment">// 创建 http或https服务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>agent_worker.js主要逻辑就是创建egg类库里的Agent类，完成后发”agent-start”给父进程，触发Master的订阅创建Workers</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg-cluster/lib/agent_worker.js</span></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">process.send(&#123; <span class="hljs-attr">action</span>: <span class="hljs-string">'agent-start'</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">'master'</span> &#125;); </span><br><span class="line"><span class="hljs-comment">// ...</span></span><br></pre></td></tr></table></figure><h3 id="Agent-Works怎么通信呢-IPC"><a href="#Agent-Works怎么通信呢-IPC" class="headerlink" title="Agent-Works怎么通信呢? (IPC)"></a>Agent-Works怎么通信呢? (<a href="https://eggjs.org/zh-cn/core/cluster-and-ipc.html" target="_blank" rel="noopener">IPC</a>)</h3><ul><li>在Master中维护着一个Messenger（egg-cluster/lib/utils/messenger.js）实例</li><li>EggApplication中维护了另一个Messenger（egg/lib/core/messenger.js）实例</li></ul><p>由于Agent和Worker(Application)都继承EggApplication，它们调用Messenger的时候会send到创建它们的Master里，然后Master再根据传过来的参数send给不同的Agent或Worker，Master里的转发逻辑如下。</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg-cluster master.js</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Master</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventEmitter</span> </span>&#123;</span><br><span class="line">    forkAppWorkers() &#123;</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">        cluster.on(<span class="hljs-string">'fork'</span>, worker =&gt; &#123;</span><br><span class="line">            <span class="hljs-comment">// ...</span></span><br><span class="line">            worker.on(<span class="hljs-string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">'string'</span>) msg = &#123; <span class="hljs-attr">action</span>: msg, <span class="hljs-attr">data</span>: msg &#125;;</span><br><span class="line">            msg.from = <span class="hljs-string">'app'</span>;</span><br><span class="line">            <span class="hljs-keyword">this</span>.messenger.send(msg);</span><br><span class="line">            &#125;);</span><br><span class="line">            <span class="hljs-comment">// ...</span></span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    forkAgentWorker() &#123;</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">        agentWorker.on(<span class="hljs-string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">          <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">'string'</span>) msg = &#123; <span class="hljs-attr">action</span>: msg, <span class="hljs-attr">data</span>: msg &#125;;</span><br><span class="line">          msg.from = <span class="hljs-string">'agent'</span>;</span><br><span class="line">          <span class="hljs-keyword">this</span>.messenger.send(msg);</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg messenger.js</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Messenger</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventEmitter</span> </span>&#123;</span><br><span class="line">    send(action, data, to) &#123;</span><br><span class="line">        sendmessage(process, &#123;</span><br><span class="line">          action,</span><br><span class="line">          data,</span><br><span class="line">          to,</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一条信息必定有<strong>from</strong>…<strong>to</strong>…信息</p><p><img src="/images/egg-cluster/2.jpg" alt="Master-Agent-Works 通信模型"></p><h3 id="官网里提到的“多进程研发模式增强”"><a href="#官网里提到的“多进程研发模式增强”" class="headerlink" title="官网里提到的“多进程研发模式增强”"></a>官网里提到的“<a href="https://eggjs.org/zh-cn/advanced/cluster-client.html" target="_blank" rel="noopener">多进程研发模式增强</a>”</h3><p><img src="/images/egg-cluster/3.jpg" alt="一个程序运行n个worker连m个远程服务"></p><ul><li>n * m 个连接导致大量连接资源“浪费”</li><li>减少Master转发带来的额外性能消耗</li><li>另外，egg的作者们担心不当的IPC通信把Master搞挂，从而整个服务异常</li></ul><p>所以还有一种socket通信方式（使用了另一个库<a href="https://github.com/node-modules/cluster-client" target="_blank" rel="noopener">cluster-client</a>）：</p><ul><li>将Agent作为Leader，从服务端获取数据，并做缓存</li><li>将Worker作为Follower，订阅Agent获取的数据</li></ul><p>典型的场景有，Leader（Agent）获取disconf里的配置、获取euerka里的服务等，Follower（Worker）使用这些配置和服务。</p><p><img src="/images/egg-cluster/4.jpg" alt="socket通信"></p><h3 id="cluster-client-源码一瞥"><a href="#cluster-client-源码一瞥" class="headerlink" title="cluster-client 源码一瞥"></a>cluster-client 源码一瞥</h3><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ClusterClient</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Base</span> </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">async</span> [init]() &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> name = <span class="hljs-keyword">this</span>.options.name;</span><br><span class="line">        <span class="hljs-keyword">const</span> port = <span class="hljs-keyword">this</span>.options.port;</span><br><span class="line">        <span class="hljs-keyword">let</span> server;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.options.isLeader === <span class="hljs-literal">true</span>) &#123;</span><br><span class="line">          server = <span class="hljs-keyword">await</span> ClusterServer.create(name, port);</span><br><span class="line">          <span class="hljs-keyword">if</span> (!server) &#123;</span><br><span class="line">            <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">`create "<span class="hljs-subst">$&#123;name&#125;</span>" leader failed, the port:<span class="hljs-subst">$&#123;port&#125;</span> is occupied by other`</span>);</span><br><span class="line">          &#125;</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.options.isLeader === <span class="hljs-literal">false</span>) &#123;</span><br><span class="line">          <span class="hljs-comment">// wait for leader active</span></span><br><span class="line">          <span class="hljs-keyword">await</span> ClusterServer.waitFor(port, <span class="hljs-keyword">this</span>.options.maxWaitTime);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">          debug(<span class="hljs-string">'[ClusterClient:%s] init cluster client, try to seize the leader on port:%d'</span>, name, port);</span><br><span class="line">          server = <span class="hljs-keyword">await</span> ClusterServer.create(name, port);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">if</span> (server) &#123;</span><br><span class="line">          <span class="hljs-keyword">this</span>[innerClient] = <span class="hljs-keyword">new</span> Leader(<span class="hljs-built_in">Object</span>.assign(&#123; server &#125;, <span class="hljs-keyword">this</span>.options));</span><br><span class="line">          debug(<span class="hljs-string">'[ClusterClient:%s] has seized port %d, and serves as leader client.'</span>, name, port);</span><br><span class="line">        &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">          <span class="hljs-keyword">this</span>[innerClient] = <span class="hljs-keyword">new</span> Follower(<span class="hljs-keyword">this</span>.options);</span><br><span class="line">          debug(<span class="hljs-string">'[ClusterClient:%s] gives up seizing port %d, and serves as follower client.'</span>, name, port);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>port数值就是上文开始处通过detectPort获取的clusterPort数值</li><li>然后net.create 创建TCP服务，之后所有的Leader和Follower都会走它提供的服务进行socket通信</li><li>Leader获取数据触发publish，传给订阅的Follower中</li></ul><p>cluster-client源码是很复杂的，中间还涉及到专递数据的格式，进行数据包的解析等等，这边就不扩展介绍了，有兴趣可以自己撸源码。</p><h3 id="总结"><a href="#总结" class="headerlink" title="#总结"></a><strong>#总结</strong></h3><p>Egg.js的进程管理和通信自然不会像文章里说的那么简单，但大体如此。弄清楚它们的工作原理对开发程序、插件、中间件有很大的帮助，个人认为这个才是这个框架的精髓之处。</p>]]></content>
    
    <summary type="html">
    
      Egg.js的进程管理和通信自然不会像文章里说的那么简单，但大体如此。弄清楚它们的工作原理对开发程序、插件、中间件有很大的帮助，个人认为这个才是这个框架的精髓之处。
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://miser.github.io/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://miser.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue Component 继承与复用</title>
    <link href="https://miser.github.io/2018/11/17/vue-component-extends/"/>
    <id>https://miser.github.io/2018/11/17/vue-component-extends/</id>
    <published>2018-11-17T06:45:00.000Z</published>
    <updated>2020-02-08T09:19:30.820Z</updated>
    
    <content type="html"><![CDATA[<p>在做Web前端开发的时候会有大量的页面复用的地方，从UI布局到JS的逻辑。早年做后端开发的时候，我们通常可以通过面向对象的编程法式，使用抽象类、接口等等，那么现在前端是否也可以如此呢？</p><p>答案自然是肯定的，所以我们找工作面试的时候常被问及关于JS继承的问题，随之ES6出现了期盼已久的Class，一切都在往更为成熟的方向发展。接下我们以<a href="https://vuejs.org/" target="_blank" rel="noopener">Vue</a>为例，看看怎么去做继承这件事情。</p><a id="more"></a><h3 id="需求描述"><a href="#需求描述" class="headerlink" title="需求描述"></a>需求描述</h3><p>简单实现2个列表页面，一个是管理员列表、一个用户列表</p><p><img src="/images/vue-component-extends/1.jpg" alt="图一 管理员列表页面，筛选有用户名、状态，列表有用户名、手机号码、状态、&quot;修改&quot;操作按钮"></p><p><img src="/images/vue-component-extends/2.jpg" alt="图二 用户页列表面有，筛选有用户名、手机号、状态，列表有用户名、手机号码、创建时间、状态、&quot;删除&quot;操作按钮"></p><p>从上可以看出2个页面整体页面结构相同，在具体细节上会有些少于不同，第一反应就是使用前文提到的继承之类的东西去实现它。<br><img src="/images/vue-component-extends/3.jpg" alt="图三 简单的继承图"></p><h3 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h3><ul><li><p>Vue 版本 2.5</p></li><li><p><a href="http://element.eleme.io/" target="_blank" rel="noopener">Element-UI</a> （仅仅使得Demo看上去不那么丑）</p></li><li><p><a href="https://github.com/miser/vue-compoent-extends-experiment" target="_blank" rel="noopener">测试代码</a></p></li></ul><h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>通过vue cli工具创建项目<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vue create vue-component-extedns</span><br></pre></td></tr></table></figure></p><p>此刻我们可以拥有一个Vue的默认开发目录结构和代码，我开始对其进行修改</p><p><strong>引入Element-UI</strong></p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// main.js </span></span><br><span class="line"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span></span><br><span class="line"><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">'element-ui'</span></span><br><span class="line"><span class="hljs-keyword">import</span> <span class="hljs-string">'element-ui/lib/theme-chalk/index.css'</span></span><br><span class="line"><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App.vue'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="hljs-literal">false</span></span><br><span class="line">Vue.use(ElementUI)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">new</span> Vue(&#123;</span><br><span class="line">  render: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App)</span><br><span class="line">&#125;).$mount(<span class="hljs-string">'#app'</span>)</span><br></pre></td></tr></table></figure><p>在components目录下分别创建ListPageAbstract.vue、AdminPageAbstract.vue、ButtonClick.vue和Title.vue</p><p><em>下面代码很多可以先跳过，看后续的介绍</em></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line">// ButtonClick.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">plain</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"click"</span>&gt;</span></span><br><span class="line">    &#123;&#123; label &#125;&#125;</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    props: [<span class="hljs-string">'click'</span>, <span class="hljs-string">'label'</span>, <span class="hljs-string">'opt'</span>],</span></span><br><span class="line"><span class="hljs-undefined">    mounted () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ButtonClick mounted'</span>)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// Title.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"title"</span>&gt;</span>&#123;&#123; title &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">  props: [<span class="hljs-string">'title'</span>]</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// ListPageAbstract.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">Title</span> <span class="hljs-attr">:title</span>=<span class="hljs-string">"title"</span> /&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-form</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config &amp;&amp; config.filter"</span> <span class="hljs-attr">ref</span>=<span class="hljs-string">'form'</span> <span class="hljs-attr">:inline</span>=<span class="hljs-string">"true"</span> <span class="hljs-attr">:model</span>=<span class="hljs-string">"filterForm"</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.filter.conditions.indexOf('name') &gt;= 0"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"名字"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"name"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterForm.name"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.filter.conditions.indexOf('phone') &gt;= 0"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"手机"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"date"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterForm.date"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.filter.conditions.indexOf('date') &gt;= 0"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"时间"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"date"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-input</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterForm.date"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-input</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.filter.conditions.indexOf('status') &gt;= 0"</span> <span class="hljs-attr">label</span>=<span class="hljs-string">"状态"</span> <span class="hljs-attr">prop</span>=<span class="hljs-string">"status"</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-select</span> <span class="hljs-attr">v-model</span>=<span class="hljs-string">"filterForm.status"</span> <span class="hljs-attr">placeholder</span>=<span class="hljs-string">"请选择"</span>&gt;</span></span><br><span class="line">            <span class="hljs-tag">&lt;<span class="hljs-name">el-option</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"option in statusOptions"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"option.text"</span> <span class="hljs-attr">:value</span>=<span class="hljs-string">"option.value"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"option.value"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">el-option</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;/<span class="hljs-name">el-select</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">        <span class="hljs-comment">&lt;!-- &lt;div&gt;</span></span><br><span class="line"><span class="hljs-comment">        &lt;slot name="filter-slot"&gt;&lt;/slot&gt;</span></span><br><span class="line"><span class="hljs-comment">        &lt;/div&gt; --&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">          <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"config.filter.action"</span>&gt;</span>提交<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">        <span class="hljs-tag">&lt;/<span class="hljs-name">el-form-item</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-form</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-table</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config"</span> <span class="hljs-attr">:data</span>=<span class="hljs-string">"list"</span> &gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">v-for</span>=<span class="hljs-string">"(item, index) in config.table.column"</span> <span class="hljs-attr">:key</span>=<span class="hljs-string">"index"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">:prop</span>=<span class="hljs-string">"item.key"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"item.label"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-table-column</span> <span class="hljs-attr">v-if</span>=<span class="hljs-string">"config.table.action"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"config.table.action.headerLabel"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot-scope</span>=<span class="hljs-string">"scope"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">Button</span> <span class="hljs-attr">:click</span>=<span class="hljs-string">"config.table.action.click.bind(null, scope.row)"</span> <span class="hljs-attr">:label</span>=<span class="hljs-string">"config.table.action.label"</span> <span class="hljs-attr">:opt</span>=<span class="hljs-string">"config.table.action"</span> /&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">el-table-column</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-table</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> Button <span class="hljs-keyword">from</span> <span class="hljs-string">'./ButtonClick.vue'</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> Title <span class="hljs-keyword">from</span> <span class="hljs-string">'./Title.vue'</span></span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">  components: &#123; Button, Title &#125;,</span></span><br><span class="line"><span class="hljs-javascript">  data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">      filterForm: &#123; &#125;,</span></span><br><span class="line"><span class="hljs-undefined">      statusOptions: [],</span></span><br><span class="line"><span class="hljs-undefined">      list: [],</span></span><br><span class="line"><span class="hljs-javascript">      title: <span class="hljs-literal">null</span>,</span></span><br><span class="line"><span class="hljs-javascript">      config: <span class="hljs-literal">null</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-javascript">  mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">this</span>.config = <span class="hljs-keyword">this</span>.createConfig()</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">this</span>.fetchOptions()</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">this</span>.fetchData()</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">    createConfig () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> config = &#123;&#125;</span></span><br><span class="line"><span class="hljs-undefined">      config.filter = &#123;</span></span><br><span class="line"><span class="hljs-javascript">        conditions: [ <span class="hljs-string">'name'</span>, <span class="hljs-string">'status'</span> ],</span></span><br><span class="line"><span class="hljs-javascript">        action: <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.fetchData(<span class="hljs-keyword">this</span>.filterForm)</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-undefined">      config.table = &#123;</span></span><br><span class="line"><span class="hljs-undefined">        column: [</span></span><br><span class="line"><span class="hljs-javascript">          &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'name'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">'用户名'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">          &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'phone'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">'手机号码'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">          &#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'status'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">'状态'</span> &#125;</span></span><br><span class="line"><span class="hljs-undefined">        ],</span></span><br><span class="line"><span class="hljs-undefined">        action: &#123;</span></span><br><span class="line"><span class="hljs-javascript">          headerLabel: <span class="hljs-string">'操作'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          label: <span class="hljs-string">'修改'</span>,</span></span><br><span class="line"><span class="hljs-javascript">          click: <span class="hljs-keyword">this</span>.editRow</span></span><br><span class="line"><span class="hljs-undefined">        &#125;</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> config</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    fetchOptions () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.statusOptions = [</span></span><br><span class="line"><span class="hljs-javascript">        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">1</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'status1'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">        &#123; <span class="hljs-attr">value</span>: <span class="hljs-number">2</span>, <span class="hljs-attr">text</span>: <span class="hljs-string">'status2'</span> &#125;</span></span><br><span class="line"><span class="hljs-undefined">      ]</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> fetchData () &#123; &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    editRow (item) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`update data =&gt; <span class="hljs-subst">$&#123;item.name&#125;</span>`</span>)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">.title &#123;</span></span><br><span class="line"><span class="hljs-undefined">  color: red;</span></span><br><span class="line"><span class="hljs-undefined">  margin-bottom: 20px;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// AdminListPage.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> ListPageAbstract <span class="hljs-keyword">from</span> <span class="hljs-string">'./ListPageAbstract'</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 模拟ajax请求</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 仅做了名字的模糊查询，其他参数忽略</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span> (<span class="hljs-params">opt</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">let</span> list = [</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Admin Peter'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'313141414'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-10-10'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Admin Marry'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'123931873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status2'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-11-11'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Admin Sue'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'342391873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-01-01'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'Admin Join'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'143391873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-12-12'</span> &#125;</span></span><br><span class="line"><span class="hljs-undefined">    ]</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">if</span> (opt.name) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      list = list.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.name.match(opt.name))</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">      resolve(list)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 1000)</span></span><br><span class="line"><span class="hljs-undefined">  &#125;)</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">  extends: ListPageAbstract,</span></span><br><span class="line"><span class="hljs-undefined">  data () &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">      title: <span class="hljs-string">'管理员列表'</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">    fetchOptions () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      ListPageAbstract.methods.fetchOptions.call(<span class="hljs-keyword">this</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'to do other thing'</span>)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> fetchData () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> list = <span class="hljs-keyword">await</span> search(<span class="hljs-keyword">this</span>.filterForm)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.list = list</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刷新页面就能呈现上述图一展示的样子和功能了。那么洋洋洒洒这么多代码做了些什么呢？</p><ul><li>Title.vue 用于显示页面的标题（之后我们用它测试下继承于ListPageAbstract.vue的组件如何重写css的问题）</li><li>ButtonClick.vue 展示操作按钮和执行操作事件</li><li>ListPageAbstract.vue 抽象的列表组件，这里是作为例子，具体方法定义的粗细程度根据具体情况调节</li><li>AdminListPage.vue 管理员列表的具体组件</li></ul><p>AdminListPage通过<a href="https://cn.vuejs.org/v2/api/#extends" target="_blank" rel="noopener">extends</a>继承了ListPageAbstract的模板、样式和其JS代码，通过部分的重写或完善，很容易的实现了一个页面，看上去很美好。那么新的问题来了，我们也发现ListPageAbstract定义筛选的内容是有限的，目前仅仅有name、phone、date和status，如果想扩展该怎么办呢？用过Vue的朋友或许此刻会想到<a href="https://cn.vuejs.org/v2/api/#slot" target="_blank" rel="noopener">Slot</a>，接下来我们注释掉ListPageAbstract.vue里关于<strong>filter-slot</strong>的注释，并为AdminListPage.vue添加相关slot代码。</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// AdminListPage.vue add template </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"filter-slot"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"filter-slot"</span>&gt;</span></span><br><span class="line">    other input filter</span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br></pre></td></tr></table></figure><p>刷新页面，页面仅仅留下了“other input filter”一串字符串，并没有实现我们的需求；也有人提出其它修改意见</p><p><img src="/images/vue-component-extends/4.jpg" alt="图四 除了“other input filter”其它都没了"></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// AdminListPage.vue </span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"filter-slot"</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">Page</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"filter-slot"</span>&gt;</span></span><br><span class="line">      other input filter</span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">Page</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">export default &#123;</span><br><span class="line">  extends: ListPageAbstract,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Page: ListPageAbstract,</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然页面UI层是预期显示了，但是如果对ListPageAbstract的mounted方法打断点会发现，它被执行了2次，因为被实例化了2次，并且页面上的元素事件使用的是ListPageAbstract里的，而不是我们在Admin里面重写的，显然方法并不可行。关于Vue模板级别的继承扩展问题在github上有很多的吐槽，但并没有列为未来的新feature <a href="https://github.com/vuejs/vue/issues/6811" target="_blank" rel="noopener">#6811</a></p><p>既然我们讨论这个问题，自然也是可以解决的，在这我们不以filter查询条件的多少为例子，我们以更为简单的按钮为例，在列表里每一行的最后有一个“修改”按钮，而然我们在UserListPage里面，我们希望它变成一个“删除”按钮，并弹出确实删除的提示。新增ButtonPop.vue和UserListPage.vue</p><p><em>又是很多代码，没兴趣可跳过</em></p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></td><td class="code"><pre><span class="line">// ButtonPop.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">size</span>=<span class="hljs-string">"small"</span> <span class="hljs-attr">plain</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span></span></span><br><span class="line"><span class="hljs-tag">      @<span class="hljs-attr">click.stop</span>=<span class="hljs-string">"dialogVisible = true"</span>&gt;</span>&#123;&#123; label &#125;&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;<span class="hljs-name">el-dialog</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">title</span>=<span class="hljs-string">"提示"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">:visible.sync</span>=<span class="hljs-string">"dialogVisible"</span></span></span><br><span class="line"><span class="hljs-tag">      <span class="hljs-attr">width</span>=<span class="hljs-string">"30%"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span>&gt;</span>确认删除数据吗？<span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">span</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"footer"</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"dialog-footer"</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"dialogVisible = false"</span>&gt;</span>取 消<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;<span class="hljs-name">el-button</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"primary"</span> @<span class="hljs-attr">click</span>=<span class="hljs-string">"deleteInfo"</span>&gt;</span>确 定<span class="hljs-tag">&lt;/<span class="hljs-name">el-button</span>&gt;</span></span><br><span class="line">      <span class="hljs-tag">&lt;/<span class="hljs-name">span</span>&gt;</span></span><br><span class="line">    <span class="hljs-tag">&lt;/<span class="hljs-name">el-dialog</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">  props: [<span class="hljs-string">'click'</span>, <span class="hljs-string">'label'</span>, <span class="hljs-string">'opt'</span>],</span></span><br><span class="line"><span class="hljs-undefined">  data () &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">return</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">      dialogVisible: <span class="hljs-literal">false</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  mounted () &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'ButtonPop mounted'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  methods: &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> deleteInfo () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">await</span> <span class="hljs-keyword">this</span>.click()</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.dialogVisible = <span class="hljs-literal">false</span></span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">// UserListPage.vue</span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> ListPageAbstract <span class="hljs-keyword">from</span> <span class="hljs-string">'./ListPageAbstract.vue'</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">import</span> Button <span class="hljs-keyword">from</span> <span class="hljs-string">'./ButtonPop.vue'</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 模拟ajax请求</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-comment">// 仅做了名字的模糊查询，其他参数忽略</span></span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">search</span> (<span class="hljs-params">opt</span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">let</span> list = [</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'User Peter'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'313141414'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-10-10'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'User Marry'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'123931873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status2'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-11-11'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'User Sue'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'342391873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-01-01'</span> &#125;,</span></span><br><span class="line"><span class="hljs-javascript">      &#123; <span class="hljs-attr">name</span>: <span class="hljs-string">'User Join'</span>, <span class="hljs-attr">phone</span>: <span class="hljs-string">'143391873'</span>, <span class="hljs-attr">status</span>: <span class="hljs-string">'status1'</span>, <span class="hljs-attr">date</span>: <span class="hljs-string">'2018-12-12'</span> &#125;</span></span><br><span class="line"><span class="hljs-undefined">    ]</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">if</span> (opt.name) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      list = list.filter(<span class="hljs-function"><span class="hljs-params">item</span> =&gt;</span> item.name.match(opt.name))</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">      resolve(list)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 1000)</span></span><br><span class="line"><span class="hljs-undefined">  &#125;)</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;</span></span><br><span class="line"><span class="hljs-undefined">  extends: ListPageAbstract,</span></span><br><span class="line"><span class="hljs-undefined">  components: &#123; Button &#125;,</span></span><br><span class="line"><span class="hljs-javascript">  data: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123; <span class="hljs-keyword">return</span> &#123;&#125; &#125;,</span></span><br><span class="line"><span class="hljs-javascript">  mounted: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">this</span>.title = <span class="hljs-string">'用户列表'</span></span></span><br><span class="line"><span class="hljs-undefined">  &#125;,</span></span><br><span class="line"><span class="hljs-undefined">  methods: &#123;</span></span><br><span class="line"><span class="hljs-undefined">    createConfig () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-comment">// 用户名、创建时间、手机号、状态</span></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> config = ListPageAbstract.methods.createConfig.call(<span class="hljs-keyword">this</span>)</span></span><br><span class="line"><span class="hljs-javascript">      config.filter.conditions.splice(<span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-string">'phone'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> table = config.table</span></span><br><span class="line"><span class="hljs-javascript">      table.column.push(&#123; <span class="hljs-attr">key</span>: <span class="hljs-string">'date'</span>, <span class="hljs-attr">label</span>: <span class="hljs-string">'时间'</span> &#125;)</span></span><br><span class="line"><span class="hljs-undefined">      table.action = &#123;</span></span><br><span class="line"><span class="hljs-javascript">        headerLabel: <span class="hljs-string">'操作'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        label: <span class="hljs-string">'删除'</span>,</span></span><br><span class="line"><span class="hljs-javascript">        click: <span class="hljs-keyword">this</span>.deleteRow</span></span><br><span class="line"><span class="hljs-undefined">      &#125;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> config</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">async</span> fetchData () &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">let</span> list = <span class="hljs-keyword">await</span> search(<span class="hljs-keyword">this</span>.filterForm)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">this</span>.list = list</span></span><br><span class="line"><span class="hljs-undefined">    &#125;,</span></span><br><span class="line"><span class="hljs-undefined">    deleteRow (item) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`delete date: <span class="hljs-subst">$&#123;item.name&#125;</span>`</span>)</span></span><br><span class="line"><span class="hljs-javascript">        setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span></span><br><span class="line"><span class="hljs-javascript">          <span class="hljs-keyword">this</span>.list.splice(<span class="hljs-keyword">this</span>.list.indexOf(item), <span class="hljs-number">1</span>)</span></span><br><span class="line"><span class="hljs-undefined">          resolve()</span></span><br><span class="line"><span class="hljs-undefined">        &#125;, 1000)</span></span><br><span class="line"><span class="hljs-undefined">      &#125;)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  &#125;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-undefined">.title &#123;</span></span><br><span class="line"><span class="hljs-undefined">  margin-bottom: 50px;</span></span><br><span class="line"><span class="hljs-undefined">  color: blue;</span></span><br><span class="line"><span class="hljs-undefined">&#125;</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></pre></td></tr></table></figure><p>然后在修改下App.vue里面的Page引用，从AdminListPage改为UserListPage</p><p>刷新页面，就和图二的样子一样了。整个代码并不复杂，核心就是</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">components: &#123; Button &#125;</span><br></pre></td></tr></table></figure><p>它将父类的Button（ButtonClick）替换成了User页面需要的ButtonPop，实现了扩展。其实Filter查询条件也可以，只要我们做好组件的抽取等就行。</p><p><strong>阅读Vue的源码时候，在Vue组件实例化的过程中，会有很多对options的深层次merge，使得我们可以通过上诉方法实现对父组件的扩展。</strong></p><p>另外，细心的朋友观察代码或页面也发现“用户列表”4个字的颜色从红色变成了蓝色，与下面列表的间距也增大了不少，在User页面的style标签里就能很容易修改父组件的css样式。</p><p>在Vue中，mixin、slot都是非常好用的工具，或许我们有时候也能改变思路，通过组件的替换构建出一个更为容易扩展的框架。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在做Web前端开发的时候会有大量的页面复用的地方，从UI布局到JS的逻辑。早年做后端开发的时候，我们通常可以通过面向对象的编程法式，使用抽象类、接口等等，那么现在前端是否也可以如此呢？&lt;/p&gt;
&lt;p&gt;答案自然是肯定的，所以我们找工作面试的时候常被问及关于JS继承的问题，随之ES6出现了期盼已久的Class，一切都在往更为成熟的方向发展。接下我们以&lt;a href=&quot;https://vuejs.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Vue&lt;/a&gt;为例，看看怎么去做继承这件事情。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>前端错误捕获提交错误日志</title>
    <link href="https://miser.github.io/2018/10/23/js-capture-error/"/>
    <id>https://miser.github.io/2018/10/23/js-capture-error/</id>
    <published>2018-10-23T02:29:29.089Z</published>
    <updated>2020-04-22T02:32:26.367Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么需要捕获？"><a href="#为什么需要捕获？" class="headerlink" title="为什么需要捕获？"></a>为什么需要捕获？</h4><p>前端代码运行在客户端的浏览器里，当客户端（浏览器）出现任何问题，在没有错误日志的情况下，我们都是不知道问题发生在哪，我们只能依靠猜测或者自己不断尝试才知道，或者永远不知道问题。</p><h4 id="客户端怎么捕获？"><a href="#客户端怎么捕获？" class="headerlink" title="客户端怎么捕获？"></a>客户端怎么捕获？</h4><p>1.通过window.onerror，可惜只能获得基础的js错误，Promise、async/await 里的错误无法捕获，它收到同源决策的影响</p><p>2.Promise 通过<strong>catch</strong>方法</p><p>3.async/await 通过 <strong>try - catch</strong></p><p>4.Vue可以通过全局Vue.config.errorHandler去获得非Promise、async/await里的错误，可以理解为Vue里的window.onerror</p><a id="more"></a><h4 id="不同的捕获错误用法（测试环境-chrome-amp-https-jsbin-com）"><a href="#不同的捕获错误用法（测试环境-chrome-amp-https-jsbin-com）" class="headerlink" title="不同的捕获错误用法（测试环境 chrome &amp; https://jsbin.com）"></a>不同的捕获错误用法（测试环境 chrome &amp; <a href="https://jsbin.com）" target="_blank" rel="noopener">https://jsbin.com）</a></h4><h5 id="window-onerror"><a href="#window-onerror" class="headerlink" title="window.onerror"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/GlobalEventHandlers/onerror" target="_blank" rel="noopener">window.onerror</a></h5><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">message, source, lineno, colno, error</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">/*</span></span><br><span class="line"><span class="hljs-comment">    message：错误信息（字符串）。可用于HTML onerror=""处理程序中的event。</span></span><br><span class="line"><span class="hljs-comment">    source：发生错误的脚本URL（字符串）</span></span><br><span class="line"><span class="hljs-comment">    lineno：发生错误的行号（数字）</span></span><br><span class="line"><span class="hljs-comment">    colno：发生错误的列号（数字）</span></span><br><span class="line"><span class="hljs-comment">    error：Error对象（对象）</span></span><br><span class="line"><span class="hljs-comment">    */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">let</span> data</span><br><span class="line"><span class="hljs-keyword">let</span> info = data.info</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Arguments] &#123;</span></span><br><span class="line"><span class="hljs-comment">  0: "Uncaught TypeError: Cannot read property 'info' of undefined",</span></span><br><span class="line"><span class="hljs-comment">  1: "yiveral.js",</span></span><br><span class="line"><span class="hljs-comment">  2: 6,</span></span><br><span class="line"><span class="hljs-comment">  3: 17,</span></span><br><span class="line"><span class="hljs-comment">  4: [object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>虽然<strong>onerror</strong>无法捕获Promise里的错误，但是如果Promise里面是被setTimeout包裹的js还是能捕获的</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">timer</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">     <span class="hljs-keyword">let</span> data</span><br><span class="line">     <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">  &#125;, <span class="hljs-number">100</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">     timer()</span><br><span class="line">  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inner error'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">p().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'running then'</span>)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)</span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'outer error'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Arguments] &#123;</span></span><br><span class="line"><span class="hljs-comment">  0: "Uncaught TypeError: Cannot read property 'info' of undefined",</span></span><br><span class="line"><span class="hljs-comment">  1: "yiveral.js",</span></span><br><span class="line"><span class="hljs-comment">  2: 8,</span></span><br><span class="line"><span class="hljs-comment">  3: 22,</span></span><br><span class="line"><span class="hljs-comment">  4: [object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">&#125;</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><h5 id="Promise-catch"><a href="#Promise-catch" class="headerlink" title="Promise catch"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/catch" target="_blank" rel="noopener">Promise catch</a></h5><h5 id="Q：如果没有catch方法，是否能捕获Promise里的错误？"><a href="#Q：如果没有catch方法，是否能捕获Promise里的错误？" class="headerlink" title="Q：如果没有catch方法，是否能捕获Promise里的错误？"></a>Q：如果没有catch方法，是否能捕获Promise里的错误？</h5><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'onerror'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">  p().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'running then'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'try - catch'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 没有任何输出</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>我们通过上面的代码发现，Promise里的错误无论在<strong>try - catch</strong>还是<strong>onerror</strong>里都无法被捕获</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inner error'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'return inner error'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">try</span> &#123;</span><br><span class="line">  p().then(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">res</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'running then'</span>)</span><br><span class="line">  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">error</span>)</span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'outer error'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'try - catch'</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">"inner error"</span></span><br><span class="line"><span class="hljs-comment">"return inner error"</span></span><br><span class="line"><span class="hljs-comment">"running then"</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>通过上面代码发现，已经被捕获的错误代码，在外层不会再被捕获而是继续执行then里的方法，可见在一条Promise链上的错误，会被之后最近的<strong>catch</strong>捕获。</p><h5 id="async-await-通过-try-catch"><a href="#async-await-通过-try-catch" class="headerlink" title="async/await 通过 try - catch"></a><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/async_function" target="_blank" rel="noopener">async/await</a> 通过 <strong>try - catch</strong></h5><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p()</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 没有任何输出</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>我们通过上面的代码发现，Promise构造函数里的错误并没有被<strong>onerror</strong>捕获</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">window</span>.onerror = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    resolve(<span class="hljs-string">'resolve'</span>)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p()</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'get res'</span>)</span><br><span class="line">  errorFn()</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">get res</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>虽然Promise正常执行，但是当后续的代码出错<strong>onerror</strong>依旧没有被捕获</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p()</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">  &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'try - catch'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">"try - catch"</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p><strong>try - catch</strong>捕获了</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorFn</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> data</span><br><span class="line">  <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">p</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">resolve, reject</span>) </span>&#123;</span><br><span class="line">    errorFn()</span><br><span class="line">  &#125;).catch(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">error</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(error)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'inner error'</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-string">'return inner error'</span></span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line">(<span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">let</span> res = <span class="hljs-keyword">await</span> p()</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(res)</span><br><span class="line">  &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'try - catch'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)()</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* console 输出</span></span><br><span class="line"><span class="hljs-comment">[object Error] &#123; ... &#125;</span></span><br><span class="line"><span class="hljs-comment">"inner error"</span></span><br><span class="line"><span class="hljs-comment">"return inner error"</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>从上面代码我们知道，如果Promise构造函数里的错误被它自己catch的话，那么 async/await 后续的 <strong>try - catch</strong>将不再对它捕获</p><h5 id="Vue-config-errorHandler"><a href="#Vue-config-errorHandler" class="headerlink" title="Vue.config.errorHandler"></a><a href="https://cn.vuejs.org/v2/api/index.html#errorHandler" target="_blank" rel="noopener">Vue.config.errorHandler</a></h5><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// handle error</span></span><br><span class="line">  <span class="hljs-comment">// `info` 是 Vue 特定的错误信息，比如错误所在的生命周期钩子</span></span><br><span class="line">  <span class="hljs-comment">// 只在 2.2.0+ 可用</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</p></blockquote><p>我们该如何去理解官方对errorHandler的解释呢？通过 vue-cli构建工具，创建一个非常基础的vue项目，做一些实验。</p><p>测试代码库：<a href="https://github.com/miser/vue-capture-error" target="_blank" rel="noopener">https://github.com/miser/vue-capture-error</a></p><p>在main.js</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">arguments</span>)</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'vue errorHandler'</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.normal()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    normal () &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> data</span><br><span class="line">      <span class="hljs-keyword">let</span> info = data.info</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 刷新页面 console 输出</span></span><br><span class="line"><span class="hljs-comment">0: TypeError: Cannot read property 'info' of undefined at VueComponent.normal …</span></span><br><span class="line"><span class="hljs-comment">1: VueComponent &#123;_uid: 1, _isVue: true, $options: &#123;…&#125;, _renderProxy: Proxy, _self: VueComponent, …&#125;</span></span><br><span class="line"><span class="hljs-comment">2: "created hook</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p>从上面代码可以看出，errorHandler确实可以满足我们的需求，在一个统一的地方捕获代码的错误，但是真的如此吗？上文也提到errorHandler和window.onerror类似，那么当我们使用Promse或者async/await时会不会得愿以偿。</p><p>js中的异步很大一部分来自网络请求，那么在这我们用 <a href="https://github.com/axios/axios" target="_blank" rel="noopener">axios</a> （它做了一层ajax与Promise之间的封装）。</p><p>main.js里添加</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> request = axios.create()</span><br><span class="line">request.interceptors.response.use(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> response</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">Vue.request = <span class="hljs-function">(<span class="hljs-params">args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(args).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch1()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetch1 () &#123;</span><br><span class="line">        Vue.request(<span class="hljs-string">'https://api1.github.com/'</span>)</span><br><span class="line">      .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">            <span class="hljs-built_in">console</span>.log(response)</span><br><span class="line">          &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>api.github.com 会返回 github的api列表，当我们拼错域名，比如上面代码中的api1.github.com时，那肯定是无法获得我们想要的，可是errorHandler并没有获得该错误，不过幸好，我们可以在全局统一的Vue.request里的catch方法去统一捕获网络层面的错误。那如果是非网络层面的呢？比如数据请求回来了，但是绑定数据的时候，后端因为业务的修改等原因并没有返回我们需要的字段，造成Promise.then方法的业务处理错误。</p><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch2()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetch2 () &#123;</span><br><span class="line">      Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">      .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">        <span class="hljs-keyword">let</span> info = data.api.info</span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上诉代码运行后，errorHandler同样未能捕获错误，从vue的issue里面去查询关于捕获Promise或者async/await时，会得到作者的答复:</p><blockquote><p><a href="https://github.com/vuejs/vue/issues/6551" target="_blank" rel="noopener">https://github.com/vuejs/vue/issues/6551</a></p><p>Vue cannot capture errors that are thrown asynchronously, similar to how try… catch won’t catch async errors. It’s your responsibility to handle async errors properly, e.g. using Promise.catch  — @yyx990803</p></blockquote><p>那么该怎么办，不可能每个地方都加Promise.catch方法吧！</p><blockquote><p><a href="https://github.com/vuejs/vue/issues/7653" target="_blank" rel="noopener">https://github.com/vuejs/vue/issues/7653</a></p><p>@Doeke 在这个地方给出一个解决方案，通过全局mixin，给那些Promise方法外面包一层Promise，在这个外层Promise链上catch里面的错误，不过这样需要做代码的约定，就是原来的方法需要返回一个Promise对象。</p></blockquote><p>main.js里添加@Doeke的思路</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">Vue.mixin(&#123;</span><br><span class="line">  beforeCreate: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> methods = <span class="hljs-keyword">this</span>.$options.methods || &#123;&#125;</span><br><span class="line">    <span class="hljs-built_in">Object</span>.entries(methods).forEach(<span class="hljs-function">(<span class="hljs-params">[key, method]</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (method._asyncWrapped) <span class="hljs-keyword">return</span></span><br><span class="line">      <span class="hljs-keyword">const</span> wrappedMethod = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> result = method.apply(<span class="hljs-keyword">this</span>, args)</span><br><span class="line">        <span class="hljs-keyword">const</span> resultIsPromise = result &amp;&amp; <span class="hljs-keyword">typeof</span> result.then === <span class="hljs-string">'function'</span></span><br><span class="line">        <span class="hljs-keyword">if</span> (!resultIsPromise) <span class="hljs-keyword">return</span> result</span><br><span class="line"></span><br><span class="line">        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-keyword">async</span> (resolve, reject) =&gt; &#123;</span><br><span class="line">          <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">            resolve(<span class="hljs-keyword">await</span> result)</span><br><span class="line">          &#125; <span class="hljs-keyword">catch</span> (error) &#123;</span><br><span class="line">            <span class="hljs-keyword">if</span> (!error._handled) &#123;</span><br><span class="line">              <span class="hljs-keyword">const</span> errorHandler = Vue.config.errorHandler</span><br><span class="line">              errorHandler(error)</span><br><span class="line">              error._handled = <span class="hljs-literal">true</span></span><br><span class="line">            &#125;</span><br><span class="line">            reject(error)</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">      &#125;</span><br><span class="line">      wrappedMethod._asyncWrapped = <span class="hljs-literal">true</span></span><br><span class="line">      methods[key] = wrappedMethod</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch2()</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch3()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    fetch2 () &#123;</span><br><span class="line">      Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">          <span class="hljs-keyword">let</span> info = data.api.fetch2</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;,</span><br><span class="line">    fetch3 () &#123;</span><br><span class="line">      <span class="hljs-keyword">return</span> Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">        .then(<span class="hljs-function"><span class="hljs-params">response</span> =&gt;</span> &#123;</span><br><span class="line">          <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">          <span class="hljs-keyword">let</span> info = data.api.fetch3</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过运行并观察console打印可以看出，fetch3的错误被errorHandler捕获，而fetch2的错误并没有。</p><p>那么Promise里的错误统一捕获的问题差不多应该解决了，那么async/await的呢？</p><p>在App.vue</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch4()</span><br><span class="line">    <span class="hljs-keyword">this</span>.fetch5()</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="hljs-keyword">async</span> fetch4 () &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">      <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">      <span class="hljs-keyword">let</span> info = data.api.fetch4</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="hljs-keyword">async</span> fetch5 () &#123;</span><br><span class="line">      <span class="hljs-keyword">let</span> response = <span class="hljs-keyword">await</span> Vue.request(<span class="hljs-string">'https://api.github.com/'</span>)</span><br><span class="line">      <span class="hljs-keyword">let</span> data = response.data</span><br><span class="line">      <span class="hljs-keyword">let</span> info = data.api.fetch5</span><br><span class="line">      <span class="hljs-keyword">return</span> response</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ...  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>fetch4并没有返回Promise，fetch5返回的也不是Promise对象，但是当运行的时候我们会发现fetch4和fetch5的错误信息都被捕获了，这是为什么呢？因为async/await本身就是Promise的语法糖，在 <a href="https://babeljs.io" target="_blank" rel="noopener">babeljs</a> 官网的 “Try it out” 尝试用 async/await，你会发现最后编译后的代码就是在外包了一层Promise。</p><h4 id="在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）"><a href="#在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）" class="headerlink" title="在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）"></a>在哪里捕获更为优雅？（尽量以更少的代码覆盖大部分或者全部代码）</h4><p><strong>网络层</strong>：可以在axios.create创建的实例中</p><p><strong>逻辑层</strong>：非Promise本身就会被errorHandler捕获；Promise相关的可以通过全局mixin给返回Promise对象的方法做一个外层包装，统一catch并调用errorHandler处理（<strong><em>这个方法的是否有副作用还需要研究!</em></strong>）</p><h4 id="捕获的错误存放在哪？"><a href="#捕获的错误存放在哪？" class="headerlink" title="捕获的错误存放在哪？"></a>捕获的错误存放在哪？</h4><p><strong># 自己简易服务 ？</strong></p><p>感觉成本很大（人力和工时）</p><p><strong># 官方推荐的 <a href="https://sentry.io/" target="_blank" rel="noopener">Sentry</a>  </strong></p><p>注册后安装官方的JS SDK</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install raven-js --save</span><br></pre></td></tr></table></figure><p>修改main.js</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-keyword">import</span> Raven <span class="hljs-keyword">from</span> <span class="hljs-string">'raven-js'</span></span><br><span class="line"><span class="hljs-keyword">import</span> RavenVue <span class="hljs-keyword">from</span> <span class="hljs-string">'raven-js/plugins/vue'</span></span><br><span class="line"></span><br><span class="line">Raven</span><br><span class="line">  .config(<span class="hljs-string">'https://1dfc5e63808b41058675b4b3aed4cfb6@sentry.io/1298044'</span>) <span class="hljs-comment">// sentry token</span></span><br><span class="line">  .addPlugin(RavenVue, Vue)</span><br><span class="line">  .install()</span><br><span class="line"></span><br><span class="line">Vue.config.errorHandler = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, vm, info</span>) </span>&#123;</span><br><span class="line">  Raven.captureException(err)</span><br><span class="line">&#125;</span><br><span class="line">Vue.request = <span class="hljs-function">(<span class="hljs-params">args</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    request(args).then(<span class="hljs-function"><span class="hljs-params">res</span> =&gt;</span> &#123;</span><br><span class="line">      resolve(res)</span><br><span class="line">    &#125;).catch(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">      Raven.captureException(err)</span><br><span class="line">      reject(err)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br></pre></td></tr></table></figure><p>修改App.vue （我们从最普通的js测试起）<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">created () &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.normal()</span><br><span class="line">    <span class="hljs-comment">// this.fetch1()</span></span><br><span class="line">    <span class="hljs-comment">// this.fetch2()</span></span><br><span class="line">    <span class="hljs-comment">// this.fetch3()</span></span><br><span class="line">    <span class="hljs-comment">// this.fetch4()</span></span><br><span class="line">    <span class="hljs-comment">// this.fetch5()</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br></pre></td></tr></table></figure></p><p>打开sentry页面查看<br><img src="/images/js-capture-error/1.png" alt="错误报告列表"><br><img src="/images/js-capture-error/2.jpg" alt="错误报告详情（模糊了IP部分）"><br>我们通过上面2张图片可以看出，sentry自带一个简单的issue管理功能，此外详情页面的错误栈已经方便我们知道问题出在哪里了。</p><p>测试fetch1的ajax请求错误<br><img src="/images/js-capture-error/3.jpg" alt="成功截获api1.github.com这个错误域名"></p><p>除了fetch2无法被捕获外（之前提过，它没有返回Promise对象），其它的都能被捕获。不过Promise和async/await的错误栈比较少。尤其是Promise.then里的错误，如下2张图的对比：</p><p><img src="/images/js-capture-error/4.jpg" alt="Promise.then里的错误"><br><img src="/images/js-capture-error/5.jpg" alt="async/await里的错误"></p><p>除了默认的数据的收集外，还能收集一些其他数据，比如用户信息</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Raven.setUser(&#123;</span><br><span class="line">    name: <span class="hljs-string">'miser name'</span>,</span><br><span class="line">    id: <span class="hljs-string">'miser id'</span></span><br><span class="line">  &#125;)</span><br></pre></td></tr></table></figure><p><img src="/images/js-capture-error/6.jpg" alt="用户信息顺收集"></p><p><strong>我们测试了代码未被压缩的情况，如果代码压缩了呢？</strong></p><p><img src="/images/js-capture-error/7.jpg" alt="通过npm run build 压缩代码打开首页，一脸懵逼"></p><p>显然我们不能直观的获得错误定位，不过sentry提供<a href="https://github.com/google/closure-compiler/wiki/Source-Maps" target="_blank" rel="noopener">SourceMaps</a>存储服务，它能方便的debug被压缩的代码。</p><p>我们可以通过<a href="https://www.npmjs.com/package/webpack-sentry-plugin" target="_blank" rel="noopener">webpack-sentry-plugin</a>工具将整个上传过程写进webpack里，因为我们的实验环境是vue3，所以我们创建一个vue.config.js文件</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> SentryPlugin = <span class="hljs-built_in">require</span>(<span class="hljs-string">'webpack-sentry-plugin'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  configureWebpack: &#123;</span><br><span class="line">    plugins: [</span><br><span class="line">      <span class="hljs-keyword">new</span> SentryPlugin(&#123;</span><br><span class="line">        organization: <span class="hljs-string">'fe-org'</span>, <span class="hljs-comment">// 组织名称 类似公司名吧（一个用户下可以有多个组织）</span></span><br><span class="line">        project: <span class="hljs-string">'popcorn-vue'</span>, <span class="hljs-comment">// 项目名称 （一个组织下可以有多个项目）</span></span><br><span class="line">        apiKey: <span class="hljs-string">'17c7d61a800f495c803196e2c02cadeb1b41454247db4f06a5c54193510da150'</span>,</span><br><span class="line">        release: <span class="hljs-string">'1.2.4-beta'</span> <span class="hljs-comment">// 发布后的代码和这个对应，可以找到这个sourcemaps</span></span><br><span class="line">      &#125;)</span><br><span class="line">    ]</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改main.js<br><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Raven</span><br><span class="line">  .config(<span class="hljs-string">'https://1dfc5e63808b41058675b4b3aed4cfb6@sentry.io/1298044'</span>, &#123;</span><br><span class="line">    release: <span class="hljs-string">'1.2.4-beta'</span> <span class="hljs-comment">// 新增</span></span><br><span class="line">  &#125;)</span><br><span class="line">  .addPlugin(RavenVue, Vue)</span><br><span class="line">  .install()</span><br></pre></td></tr></table></figure></p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure><p>查看sentry里popcorn-vue项目中的<strong>版本</strong></p><p><img src="/images/js-capture-error/8.jpg" alt="1.2.4-beta是目前的，1.2.3-beta是以前版本"><br><img src="/images/js-capture-error/9.jpg" alt="点击 1.2.4-beta 进去，很容易找到刚刚上传的js和js.map文件"></p><p>我们打开build完的index.html，虽然错误成功捕获但依旧和上图的一样，无法被SourceMaps解析，大概的原因是js和js.map的目录结构问题。</p><p>这个issue <a href="https://github.com/getsentry/sentry-electron/issues/54" target="_blank" rel="noopener">https://github.com/getsentry/sentry-electron/issues/54</a> 是一个很经典的例子，它犯了2个错误</p><p>– 仅仅传了js.map而没有传被压缩的js文件，它们应该一一对应的上传到服务器上<br>– js和js.map目录路径不匹配</p><p>这2个原因都会导致无法正常解析被压缩的文件。</p><p>那么不直接通过浏览器打开index.html（file:///<strong>**</strong>/vue-capture-error/dist/index.html），通过nginx去模拟正式环境。<br><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">brew install nginx</span><br><span class="line">nginx</span><br></pre></td></tr></table></figure></p><p>将build出的代码dist拷贝到nginx默认目录下 /usr/local/var/www/，打开浏览器<a href="http://localhost:8080" target="_blank" rel="noopener">http://localhost:8080</a></p><p>回到sentry中查看新的错误记录</p><p><img src="/images/js-capture-error/10.jpg" alt="已经很详细的记录了出错的方法"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;为什么需要捕获？&quot;&gt;&lt;a href=&quot;#为什么需要捕获？&quot; class=&quot;headerlink&quot; title=&quot;为什么需要捕获？&quot;&gt;&lt;/a&gt;为什么需要捕获？&lt;/h4&gt;&lt;p&gt;前端代码运行在客户端的浏览器里，当客户端（浏览器）出现任何问题，在没有错误日志的情况下，我们都是不知道问题发生在哪，我们只能依靠猜测或者自己不断尝试才知道，或者永远不知道问题。&lt;/p&gt;
&lt;h4 id=&quot;客户端怎么捕获？&quot;&gt;&lt;a href=&quot;#客户端怎么捕获？&quot; class=&quot;headerlink&quot; title=&quot;客户端怎么捕获？&quot;&gt;&lt;/a&gt;客户端怎么捕获？&lt;/h4&gt;&lt;p&gt;1.通过window.onerror，可惜只能获得基础的js错误，Promise、async/await 里的错误无法捕获，它收到同源决策的影响&lt;/p&gt;
&lt;p&gt;2.Promise 通过&lt;strong&gt;catch&lt;/strong&gt;方法&lt;/p&gt;
&lt;p&gt;3.async/await 通过 &lt;strong&gt;try - catch&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;4.Vue可以通过全局Vue.config.errorHandler去获得非Promise、async/await里的错误，可以理解为Vue里的window.onerror&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>出差菲律宾</title>
    <link href="https://miser.github.io/2018/09/24/traveling-to-the-philippines/"/>
    <id>https://miser.github.io/2018/09/24/traveling-to-the-philippines/</id>
    <published>2018-09-24T06:45:00.000Z</published>
    <updated>2019-12-30T13:58:36.103Z</updated>
    
    <content type="html"><![CDATA[<p>入职没多久，因为菲律宾项目的版本更新，和一后端、一测试，三人组队前往当地打怪升级。</p><p><img src="/images/traveling-to-the-philippines/1.jpg" alt="准备起飞"></p><a id="more"></a><p>副本Loading三个半小时。</p><p><img src="/images/traveling-to-the-philippines/2.jpg" alt="到达副本"></p><h3 id="住和工"><a href="#住和工" class="headerlink" title="住和工"></a>住和工</h3><p>到达马尼拉的时候已经快晚上9点了，下飞机弄完电话卡连上网络，急忙打车去坐落在BGC的酒店——步行离公司5MIN，一个大套房3人住，好宽敞。</p><p>BGC近年来发展很快，类似上海的陆家嘴，许多大型跨国公司变迁至此（如HSBC,Google等）。</p><p>第二天，准时打开上班，新装修的办公室还是给人眼前一亮，大大小小的会议室、工作间、沙发、游戏室、健身房、食品吧台、甚至还有临时休息的房间。</p><p><img src="/images/traveling-to-the-philippines/3.jpg" alt="接下来几天躲在这会议室猥琐写代码别浪"></p><p><img src="/images/traveling-to-the-philippines/4.jpg" alt="蛮喜欢这灯"></p><p><img src="/images/traveling-to-the-philippines/7.jpg" alt="一角A"></p><p><img src="/images/traveling-to-the-philippines/8.jpg" alt="一角B"></p><p><img src="/images/traveling-to-the-philippines/6.jpg" alt="健身房"></p><p><img src="/images/traveling-to-the-philippines/9.jpg" alt="可以临时睡觉的地方"></p><h3 id="吃"><a href="#吃" class="headerlink" title="吃"></a>吃</h3><p>菲律宾的餐饮感觉还是偏西餐的，油炸类的偏多，行程中吃的比较多；中餐的话基本是港式、台湾的为主，第一天晚上夜宵就是著名的鼎泰丰，味道不错。这边的水，大多是生水，国人也许喝不惯，一般在BGC一顿饭花费在1500Php左右，好一点的日料什么的那就更贵了。</p><p><img src="/images/traveling-to-the-philippines/10.jpg" alt="鼎泰丰，中国风"></p><p><img src="/images/traveling-to-the-philippines/11.jpg" alt="厚实的汉堡A"></p><p><img src="/images/traveling-to-the-philippines/12.jpg" alt="厚实的汉堡B"></p><p><img src="/images/traveling-to-the-philippines/27.jpg" alt="厚实的汉堡C"></p><p><img src="/images/traveling-to-the-philippines/13.jpg" alt="油炸食品"></p><p><img src="/images/traveling-to-the-philippines/14.jpg" alt="网络咖啡店 「%」"></p><p><img src="/images/traveling-to-the-philippines/15.jpg" alt="五颜六色的水果"></p><p><img src="/images/traveling-to-the-philippines/16.jpg" alt="712Php 一公斤的三文鱼（人民币100不到）"></p><p><img src="/images/traveling-to-the-philippines/17.jpg" alt="一大袋才花了300不到Php"></p><p>因为回国航线有史诗级台风「山竹」经过，所以在菲律宾多待2天，有机会去海边逛逛随便去吃海鲜，我们去的市场感觉主要做国人生意，到处是中国人，东南亚的海鲜品种差不多，买的时候可以讨价还价。</p><p><img src="/images/traveling-to-the-philippines/19.jpg" alt="海鲜市场"></p><p><img src="/images/traveling-to-the-philippines/21.jpg" alt="鱼"></p><p><img src="/images/traveling-to-the-philippines/20.jpg" alt="蟹，不同大小不同的价格"></p><p><img src="/images/traveling-to-the-philippines/22.jpg" alt="三个男的对海鲜欲望不大，最后买了它，7000+ 还价到5500 其实还是贵了 T_T"></p><p><img src="/images/traveling-to-the-philippines/23.jpg" alt="成品A 不好吃"></p><p><img src="/images/traveling-to-the-philippines/24.jpg" alt="成品B 不好吃"></p><p><img src="/images/traveling-to-the-philippines/25.jpg" alt="成品C 不好吃"></p><p><img src="/images/traveling-to-the-philippines/26.jpg" alt="星爸爸 摩卡超大杯折合人民币才23不到，好便宜"></p><h3 id="行"><a href="#行" class="headerlink" title="行"></a>行</h3><p>对于我们这些初来乍到的，还是出租车比较靠谱，机场出来还是黄色（貌似机场特有）的出租车比较靠谱，虽然贵但是没发生坐地起价或者绕路等问题，之前同事来坐白色出租车虽然起步便宜但是最后付钱的时候比我们贵很多。或者用Grab打车（类似滴滴打车），价格合理。</p><p><img src="/images/traveling-to-the-philippines/28.jpg" alt="不知道是巧合还是当地出租车运行要求，灭火器放在左A柱这"></p><p>菲律宾特色<em>“吉普尼”</em>，五颜六色装饰夸张，是与黑色伦敦出租车和黄色纽约出租车齐名的交通工具，可惜没乘坐。</p><p><img src="/images/traveling-to-the-philippines/29.jpg" alt="吉普尼A"></p><p><img src="/images/traveling-to-the-philippines/30.jpg" alt="吉普尼B"></p><h3 id="周边"><a href="#周边" class="headerlink" title="周边"></a>周边</h3><p>在BGC的时候感觉道路很干净，路上没有什么垃圾，甚至找个垃圾桶都很难，常常领着一袋垃圾从A处到B处目的地才有垃圾桶扔，路上没看到有人抽烟等；去之前很担心安全问题，国内常有报道，到那里后感觉很多时候没必要过于担心。</p><p>谈不上安保能力多强，平时的安检还是很多的，进大楼、酒店、商场都有安检，类似上海地铁安检吧，机器扫描或者人工打开包看，人工看的话基本都是带手套或者用一个小木棍，避免直接与物品直接接触，避免不必要的麻烦。几天下来没有谁不做检查的，不像地铁安检经常有人不愿意或者争执，其实无论在菲律宾还是国内，安检只是防君子不防小人的（和门一样），但是它也是一道保护大家的屏障，所以我们应该尊重它，而不是敌对它。</p><p><img src="/images/traveling-to-the-philippines/31.jpg" alt="干净的街道"></p><p><img src="/images/traveling-to-the-philippines/34.jpg" alt="安检"></p><p><img src="/images/traveling-to-the-philippines/33.jpeg" alt="很多大楼门口的安保都有枪"></p><p><img src="/images/traveling-to-the-philippines/32.jpg" alt="不像国内ATM机，这的机器都是全露天的，没有小房间"></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>原本出差7天，后拜台风“山竹”所赐，多待了2天，得以有机会去海边或者更多地方逛逛。整体给我的感觉很不错，物价和上海总体差不多，若不是语言的不同，很多时候感觉自己是生活在魔都，当然天气也会常常提醒你:)。期待下次再去！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;入职没多久，因为菲律宾项目的版本更新，和一后端、一测试，三人组队前往当地打怪升级。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/traveling-to-the-philippines/1.jpg&quot; alt=&quot;准备起飞&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="https://miser.github.io/categories/work/"/>
    
    
  </entry>
  
  <entry>
    <title>CSS、JS文件对网页的影响</title>
    <link href="https://miser.github.io/2018/09/24/js-css-image-loading/"/>
    <id>https://miser.github.io/2018/09/24/js-css-image-loading/</id>
    <published>2018-09-23T22:45:00.000Z</published>
    <updated>2020-04-22T02:31:53.465Z</updated>
    
    <content type="html"><![CDATA[<p>我们常说浏览器是单线程的，那么我们在加载资源的时候页面是在等待加载完成呢？还是继续执行后续的操作？加载不同资源对浏览器的操作会有相同响应吗？我们可以通过一个一个简单的实验测试来了解。</p><a id="more"></a><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><p><em>所有资源均在localhost，浏览器chrome 69，不同浏览器或版本会有少许不同</em></p><p>– css</p><ul><li>css1.css 2秒后返回 body { background-color: #444 }</li><li>css2.css 立即返回 body { font-size: 50px;font-weight: bold; }</li></ul><p>– js</p><ul><li>js1.js 1秒后返回 console.log(“js1.js loaded”) </li><li>js2.js 立即返回 console.log(“js2.js loaded”)</li><li>js3.js 3秒后返回 console.log(“js2.js loaded”)</li></ul><p>– image</p><ul><li>img1.png 3秒后 返回一张黄色js图片</li><li>img2.png 立即返回一张 nodejs图片</li></ul><p>服务器端代码：</p><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> Koa = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Router = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-router'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> views = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa-views'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Koa()</span><br><span class="line"><span class="hljs-keyword">const</span> router = <span class="hljs-keyword">new</span> Router()</span><br><span class="line"></span><br><span class="line">app.use(views(__dirname + <span class="hljs-string">'/views'</span>))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/'</span>, <span class="hljs-keyword">async</span> (ctx, next) =&gt; &#123;</span><br><span class="line">  <span class="hljs-keyword">await</span> ctx.render(<span class="hljs-string">'index.html'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/css1.css'</span>, <span class="hljs-keyword">async</span> ctx =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    ctx.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/css'</span>)</span><br><span class="line">    ctx.body = <span class="hljs-string">'body &#123; background-color: #444 &#125;'</span></span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">2</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/css2.css'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'text/css'</span>)</span><br><span class="line">  ctx.body = <span class="hljs-string">'body &#123; font-size: 50px;font-weight: bold; &#125;'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/js1.js'</span>, <span class="hljs-keyword">async</span> ctx =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">'console.log("js1.js loaded")'</span></span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/js2.js'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.body = <span class="hljs-string">'console.log("js2.js loaded")'</span></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/js3.js'</span>, <span class="hljs-keyword">async</span> ctx =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    ctx.body = <span class="hljs-string">'console.log("js3.js loaded")'</span></span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">3</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/img1.png'</span>, <span class="hljs-keyword">async</span> ctx =&gt; <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function"><span class="hljs-params">resolve</span> =&gt;</span> &#123;</span><br><span class="line">  setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    ctx.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'image/png; charset=UTF-8'</span>)</span><br><span class="line">    ctx.body = fs.createReadStream(<span class="hljs-string">'1.png'</span>)</span><br><span class="line">    resolve()</span><br><span class="line">  &#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">3</span>)</span><br><span class="line">&#125;))</span><br><span class="line"></span><br><span class="line">router.get(<span class="hljs-string">'/img2.png'</span>, <span class="hljs-keyword">async</span> ctx =&gt; &#123;</span><br><span class="line">  ctx.set(<span class="hljs-string">'Content-Type'</span>, <span class="hljs-string">'image/png; charset=UTF-8'</span>)</span><br><span class="line">  ctx.body = fs.createReadStream(<span class="hljs-string">'2.png'</span>)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">app</span><br><span class="line">  .use(router.routes())</span><br><span class="line">  .use(router.allowedMethods())</span><br><span class="line"></span><br><span class="line">app.listen(<span class="hljs-number">3000</span>)</span><br></pre></td></tr></table></figure><h2 id="实验一：-CSS加载是否影响DOM解析"><a href="#实验一：-CSS加载是否影响DOM解析" class="headerlink" title="实验一： CSS加载是否影响DOM解析"></a>实验一： CSS加载是否影响DOM解析</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(el)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css1.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css2.css"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img1.png"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img2.png"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- console 输出</span></span><br><span class="line"><span class="hljs-comment">app元素对象</span></span><br><span class="line"><span class="hljs-comment">test: 1947.620849609375ms</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>从控制台的输出可以看到 app 元素会被正确输出，2秒左右再输出 test 的时间，可见<strong>CSS加载并不会阻碍DOM解析</strong>。</p><h2 id="实验二：-CSS加载是否影响JS执行和DOM渲染"><a href="#实验二：-CSS加载是否影响JS执行和DOM渲染" class="headerlink" title="实验二： CSS加载是否影响JS执行和DOM渲染"></a>实验二： CSS加载是否影响JS执行和DOM渲染</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css1.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css2.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img1.png"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img2.png"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- console 输出</span></span><br><span class="line"><span class="hljs-comment">js1.js loaded</span></span><br><span class="line"><span class="hljs-comment">js2.js loaded</span></span><br><span class="line"><span class="hljs-comment">(index):17 test: 1921.02099609375ms</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>当打开index.html页面后，会发现所有资源均同时发起了请求，页面会先处于白屏加载状态（DOM无法渲染），当2秒（左右）后页面除img1.png未渲染外，其它样式和图片均渲染。</p><p>从控制台的输出可以看出，虽然js比css快1秒左右加载完毕，但是此刻是处于阻塞状态并没有执行，当css加载完成后，才从上至下的执行（虽然js2.js比js1.js早加载好，但是执行的时候还是从上至下的），当css1.css加载完成后，页面立即渲染，图片img1.png晚1秒左右显示。可见<strong>CSS加载会阻碍JS执行和DOM的渲染</strong>。</p><h2 id="实验三：-JS加载是否影响DOM解析和渲染"><a href="#实验三：-JS加载是否影响DOM解析和渲染" class="headerlink" title="实验三： JS加载是否影响DOM解析和渲染"></a>实验三： JS加载是否影响DOM解析和渲染</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(el)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img1.png"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img2.png"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- console 输出</span></span><br><span class="line"><span class="hljs-comment">null</span></span><br><span class="line"><span class="hljs-comment">js3.js loaded</span></span><br><span class="line"><span class="hljs-comment">test: 2943.9951171875ms</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>我们仅引入一个js3.js文件，设置它的返回时间为3秒，从控制台的输出可以看到 app 元素没有被正确输出（输出null），3秒左右再输出 test 的时间，可见<strong>JS加载会阻碍DOM解析，既然解析都被影响自然必定影响渲染了</strong>。</p><h2 id="实验四：-DOM的DOMContentLoaded和onLoad事件"><a href="#实验四：-DOM的DOMContentLoaded和onLoad事件" class="headerlink" title="实验四： DOM的DOMContentLoaded和onLoad事件"></a>实验四： DOM的DOMContentLoaded和onLoad事件</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testonload'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">window</span>.onload = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testonload'</span>)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css1.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">link</span> <span class="hljs-attr">rel</span>=<span class="hljs-string">"stylesheet"</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span> <span class="hljs-attr">href</span>=<span class="hljs-string">"/css2.css"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img1.png"</span> /&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"width: 100px"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/img2.png"</span> /&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">  <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'test'</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">&lt;!-- console 输出</span></span><br><span class="line"><span class="hljs-comment">js1.js loaded</span></span><br><span class="line"><span class="hljs-comment">js2.js loaded</span></span><br><span class="line"><span class="hljs-comment">test: 1955.489990234375ms</span></span><br><span class="line"><span class="hljs-comment">testDOMContentLoaded: 1956.044189453125ms</span></span><br><span class="line"><span class="hljs-comment">testonload: 2964.078857421875ms</span></span><br><span class="line"><span class="hljs-comment">--&gt;</span></span><br></pre></td></tr></table></figure><p>我们通过控制台会发现 testDOMContentLoaded 会在2秒左右打印出来，testonload会在3秒左右打印出来，由此可知<strong>DOMContentLoaded是js和css文件的加载后触发，onload是整个页面所有资源加载完后触发（比如图片等）</strong>。</p><h2 id="实验五：-script-async-属性"><a href="#实验五：-script-async-属性" class="headerlink" title="实验五： script async 属性"></a>实验五： script async 属性</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(el)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3个js文件都加上”async”,会发现输出顺序是</p><ul><li>testDOMContentLoaded 会立即打印出来</li><li>app元素对象</li><li>js2.js loaded</li><li>js1.js loaded</li><li>js3.js loaded</li></ul><p>之后我们将js1.js上的”async”移除，会发现输出顺序是</p><ul><li>el 为 null</li><li>js1.js loaded</li><li>testDOMContentLoaded 1秒左右时间</li><li>js2.js loaded</li><li>js3.js loaded</li></ul><p>之后我们将js3.js上的”async”移除，会发现输出顺序是</p><ul><li>el 为 null</li><li>js1.js loaded</li><li>js2.js loaded</li><li>js3.js loaded</li><li>testDOMContentLoaded 3秒左右时间</li></ul><p>可见<strong>async会打乱js的执行顺序，有async的js文件哪个先加载完哪个先执行，DOMContentLoaded的触发时间不在和async有关系，不会影响页面的渲染和解析</strong></p><h2 id="实验六：-script-defer-属性"><a href="#实验六：-script-defer-属性" class="headerlink" title="实验六： script defer 属性"></a>实验六： script defer 属性</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">const</span> el = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.log(el)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3个js文件都加上”defer”,会发现输出顺序是</p><ul><li>app元素对象</li><li>js1.js loaded</li><li>js2.js loaded</li><li>js3.js loaded</li><li>testDOMContentLoaded 3秒左右时间</li></ul><p>这和没有加defer和async时一样</p><p>之后我们将js1.js上的”defer”移除，会发现输出顺序是</p><ul><li>el 为 null</li><li>js1.js loaded</li><li>js2.js loaded</li><li>js3.js loaded</li><li>testDOMContentLoaded 3秒左右时间</li></ul><p>这和没有加defer和async时一样</p><p>之后我们将js3.js上的”defer”移除，会发现输出顺序是</p><ul><li>js1.js loaded</li><li>js3.js loaded</li><li>js2.js loaded</li><li>testDOMContentLoaded 3秒左右时间</li></ul><p>可见<strong>defer会打乱js的执行顺序，有defer的js文件会晚于没有的，但是它们（含有defer）依旧保持从上而下依次执行，DOMContentLoaded的触发时间晚于defer，不会影响页面的渲染和解析</strong></p><h2 id="实验七：-script-defer-amp-async-都加上-属性"><a href="#实验七：-script-defer-amp-async-都加上-属性" class="headerlink" title="实验七： script defer &amp; async 都加上 属性"></a>实验七： script defer &amp; async 都加上 属性</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js1.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js2.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">async</span> <span class="hljs-attr">defer</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"/js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><p>3个js文件都加上”async”,会发现输出顺序是</p><ul><li>testDOMContentLoaded 会立即打印出来</li><li>js2.js loaded</li><li>js1.js loaded</li><li>js3.js loaded</li></ul><p>async优先级比defer高</p><h2 id="实验八：-动态创建script"><a href="#实验八：-动态创建script" class="headerlink" title="实验八： 动态创建script"></a>实验八： 动态创建script</h2><p>index.html</p><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">var</span> appEl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-built_in">console</span>.log(appEl)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> head = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>]</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      script.type = <span class="hljs-string">'text/javascript'</span></span></span><br><span class="line"><span class="hljs-javascript">      script.src = <span class="hljs-string">'js'</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">'.js'</span></span></span><br><span class="line"><span class="hljs-undefined">      head.appendChild(script)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>testDOMContentLoaded 会立即打印出来</li><li>appEl 对象</li><li>js2.js loaded</li><li>js1.js loaded</li><li>js3.js loaded</li></ul><p>如果我们动态创建js1.js和js2.js，将js3.js依旧按照常规写法写在页面中的话</p><p>index.html<br><figure class="highlight html hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">&lt;!DOCTYPE html&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">console</span>.time(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-built_in">document</span>.addEventListener(<span class="hljs-string">'DOMContentLoaded'</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-built_in">console</span>.timeEnd(<span class="hljs-string">'testDOMContentLoaded'</span>)</span></span><br><span class="line"><span class="hljs-javascript">    &#125;, <span class="hljs-literal">false</span>)</span></span><br><span class="line"><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-keyword">var</span> appEl = <span class="hljs-built_in">document</span>.getElementById(<span class="hljs-string">'app'</span>)</span></span><br><span class="line"><span class="hljs-javascript">       <span class="hljs-built_in">console</span>.log(appEl)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;, 0)</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span> <span class="hljs-attr">src</span>=<span class="hljs-string">"js3.js"</span>&gt;</span><span class="hljs-undefined"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="hljs-undefined"></span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">var</span> head = <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'head'</span>)[<span class="hljs-number">0</span>]</span></span><br><span class="line"><span class="hljs-javascript">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">2</span>; i++) &#123;</span></span><br><span class="line"><span class="hljs-javascript">      <span class="hljs-keyword">var</span> script = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>)</span></span><br><span class="line"><span class="hljs-javascript">      script.type = <span class="hljs-string">'text/javascript'</span></span></span><br><span class="line"><span class="hljs-javascript">      script.src = <span class="hljs-string">'js'</span> + (i + <span class="hljs-number">1</span>) + <span class="hljs-string">'.js'</span></span></span><br><span class="line"><span class="hljs-undefined">      head.appendChild(script)</span></span><br><span class="line"><span class="hljs-undefined">    &#125;</span></span><br><span class="line"><span class="hljs-undefined">  </span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span></span><br><span class="line">  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span>hello world<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span></span><br><span class="line"><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><ul><li>appEl 为 null 立即打印出来</li><li>js3.js loaded </li><li>testDOMContentLoaded 3秒左右会立即打印出来</li><li>js2.js loaded</li><li>js1.js loaded</li></ul><p>可见<strong>动态创建script基本是同时加载，哪个先加载完哪个先执行，但是他们都晚于DOMContentLoaded事件</strong></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>CSS加载会阻塞DOM渲染和JS执行，但是不影响页DOM解析；JS加载会阻塞DOM解析和渲染，给script标签加上defer &amp; async属性将不再影响DOM解析和渲染，async 是哪个先返回先执行按个，defer会晚于常规标签同时按照含有defer属性的script加载的顺序执行</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;我们常说浏览器是单线程的，那么我们在加载资源的时候页面是在等待加载完成呢？还是继续执行后续的操作？加载不同资源对浏览器的操作会有相同响应吗？我们可以通过一个一个简单的实验测试来了解。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="https://miser.github.io/categories/JavaScript/"/>
    
    
  </entry>
  
  <entry>
    <title>一家公司的好坏，先看HR部门</title>
    <link href="https://miser.github.io/2018/07/20/the-quality-of-a-company-first-look-at-HR-department/"/>
    <id>https://miser.github.io/2018/07/20/the-quality-of-a-company-first-look-at-HR-department/</id>
    <published>2018-07-20T09:01:34.000Z</published>
    <updated>2019-12-30T13:58:41.916Z</updated>
    
    <content type="html"><![CDATA[<p><strong>面对茫茫的公司，如何去判断一家公司是否靠谱呢？</strong></p><p>除非你关注一家公司很久了或有内线，不然光从面试过程中你真的很难说这家公司好与坏。我会比较看重HR部门，为什么？</p><p>1.我老婆就是资深HR，深知这个部门的重要性，和被忽视性。</p><p>2.如果整个面试沟通过程中，HR部门显得很薄弱，说明该公司的组织架构不清晰，处于混沌阶段，有风险。</p><p>3.如果HR部门的素质不够，那么入职了，我也觉得后续会有麻烦，比如交金、请假等等的沟通也比较头疼。</p><p>HR需要情商智商双在线，如果一家公司拥有这样的HR说明它重视这个部门，为看似不赚钱的部门买了不少单，说明公司盈利或者业务稳定。就如，肚子饿了，只要能填饱肚子基本什么都会吃（精力只有在业务赚钱上），而真的去吃山珍海味说明有钱（会有精力把其它相关部门做好）。好的HR是对公司和员工的双保险！<br><a id="more"></a><br><strong>一些小经历</strong></p><ul><li>记得很多年前，手上同时拿到了盛大创新院和某社交平台的offer，该平台HR电话问我意向，我说我去创新院，她接着问我地址，我说在浦东软件园（入职的项目组正好从总部搬出来）。这HR就很嘲讽的语气说盛大在张江怎么在什么软件园呢，一顿巴拉巴拉。从此之后该社交平台我就再也不用了，确实这几年这平台不怎么样了。</li><li>前几天去某中型公司（两、三百号人左右），技术上方向不太符合，HR都没把我送出门，我从很内部的会议室自己摸索着出门，从中感受出该公司的冷漠。</li><li>有时候HR太高冷了，毕竟不是聊技术有话题，又是伤感情的薪酬环节，不知道怎么聊了，之前聊得再愉快到了这戛然而止。</li><li>电话通知我拿到offer了，但是电话那头先把我贬下，然后提出薪资结构等等。既然我不好，为什么给我offer呢？此地无银三百两的告诉我你要我去，但要压我价嘛。其实很多时候既然能谈到这部基本双方都有意向了，薪资是一方面，还有其他，避重就轻的说点吸引人的东西，不是更好，增加砝码吗？一个HR在多次和面试者沟通后，还不知道面试者除了薪资还想要什么，那么是失败的。</li></ul><p><strong>面试别不耐烦，多与不同人聊是好事，也是学习</strong></p><p>聊得人越多，你越能知道公司和团队的素质，是否和自己匹配。</p><p>有些面试官做技术做产品太久了，不太和陌生人打交道，说的话、问的问题常常情商不在线，给我的感觉就是要花很长时间和团队磨合，一般自己心里会亮起警报。</p><p><strong>总结</strong></p><p>一场愉快的面试，是双方的尊重。面试者答应了就该准时出席，把自己所知所想告诉对方，自我的梳理和反思；面试官面了就该好好对待，可以从被面试者身上学到新的思维维度，把公司团队的产品介绍下，也算是一种推广。人与人相处，尤其是陌生人相处是需要有礼节的，你永远不知道坐在你对面的人，他背后有什么样的能量。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;面对茫茫的公司，如何去判断一家公司是否靠谱呢？&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;除非你关注一家公司很久了或有内线，不然光从面试过程中你真的很难说这家公司好与坏。我会比较看重HR部门，为什么？&lt;/p&gt;
&lt;p&gt;1.我老婆就是资深HR，深知这个部门的重要性，和被忽视性。&lt;/p&gt;
&lt;p&gt;2.如果整个面试沟通过程中，HR部门显得很薄弱，说明该公司的组织架构不清晰，处于混沌阶段，有风险。&lt;/p&gt;
&lt;p&gt;3.如果HR部门的素质不够，那么入职了，我也觉得后续会有麻烦，比如交金、请假等等的沟通也比较头疼。&lt;/p&gt;
&lt;p&gt;HR需要情商智商双在线，如果一家公司拥有这样的HR说明它重视这个部门，为看似不赚钱的部门买了不少单，说明公司盈利或者业务稳定。就如，肚子饿了，只要能填饱肚子基本什么都会吃（精力只有在业务赚钱上），而真的去吃山珍海味说明有钱（会有精力把其它相关部门做好）。好的HR是对公司和员工的双保险！&lt;br&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="https://miser.github.io/categories/work/"/>
    
    
  </entry>
  
</feed>
