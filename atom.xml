<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Miser 胡言</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://mlib.wang/"/>
  <updated>2020-11-10T17:12:23.991Z</updated>
  <id>https://mlib.wang/</id>
  
  <author>
    <name>Miser</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>icestark 沙箱原理</title>
    <link href="https://mlib.wang/2020/11/09/icestark-sandbox/"/>
    <id>https://mlib.wang/2020/11/09/icestark-sandbox/</id>
    <published>2020-11-09T15:11:36.000Z</published>
    <updated>2020-11-10T17:12:23.991Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是-icestark"><a href="#什么是-icestark" class="headerlink" title="什么是 icestark"></a>什么是 icestark</h2><blockquote><p>icestark 是一个面向大型系统的微前端解决方案</p></blockquote><p>不知道它的可以查看它的<a href="https://github.com/ice-lab/icestark" target="_blank" rel="noopener">官方文档</a>。</p><h2 id="沙箱原理"><a href="#沙箱原理" class="headerlink" title="沙箱原理"></a>沙箱原理</h2><p><img src="/images/icestark-sandbox/icestark.png" alt="流程图"></p><a id="more"></a><h4 id="代码层面"><a href="#代码层面" class="headerlink" title="代码层面"></a>代码层面</h4><figure class="highlight js hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 监听 路由变化 触发 handleStateChange方法</span></span><br><span class="line"><span class="hljs-keyword">const</span> hijackHistory = (): <span class="hljs-function"><span class="hljs-params">void</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">window</span>.history.pushState = <span class="hljs-function">(<span class="hljs-params">state: any, title: string, url?: string, ...rest</span>) =&gt;</span> &#123;</span><br><span class="line">    originalPush.apply(<span class="hljs-built_in">window</span>.history, [state, title, url, ...rest]);</span><br><span class="line">    <span class="hljs-keyword">const</span> eventName = <span class="hljs-string">'pushState'</span>;</span><br><span class="line">    handleStateChange(createPopStateEvent(state, eventName), url, eventName);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-built_in">window</span>.history.replaceState = <span class="hljs-function">(<span class="hljs-params">state: any, title: string, url?: string, ...rest</span>) =&gt;</span> &#123;</span><br><span class="line">    originalReplace.apply(<span class="hljs-built_in">window</span>.history, [state, title, url, ...rest]);</span><br><span class="line">    <span class="hljs-keyword">const</span> eventName = <span class="hljs-string">'replaceState'</span>;</span><br><span class="line">    handleStateChange(createPopStateEvent(state, eventName), url, eventName);</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'popstate'</span>, urlChange, <span class="hljs-literal">false</span>);</span><br><span class="line">  <span class="hljs-built_in">window</span>.addEventListener(<span class="hljs-string">'hashchange'</span>, urlChange, <span class="hljs-literal">false</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> handleStateChange = <span class="hljs-function">(<span class="hljs-params">event: PopStateEvent, url: string, method: RouteType</span>) =&gt;</span> &#123;</span><br><span class="line">  setHistoryEvent(event);</span><br><span class="line">  <span class="hljs-comment">// globalConfiguration.reroute(url, method);</span></span><br><span class="line">  reroute(url, method);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">reroute</span> (<span class="hljs-params">url: string, type: RouteType | <span class="hljs-string">'init'</span> | <span class="hljs-string">'popstate'</span>| <span class="hljs-string">'hashchange'</span> </span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> &#123; pathname, query, hash &#125; = urlParse(url, <span class="hljs-literal">true</span>);</span><br><span class="line">  <span class="hljs-keyword">const</span> unmountApps = [];</span><br><span class="line">  <span class="hljs-keyword">const</span> activeApps = [];</span><br><span class="line">  <span class="hljs-comment">// 对子应用进行分类，需要或不需要加载</span></span><br><span class="line">  getMicroApps().forEach(<span class="hljs-function">(<span class="hljs-params">microApp: AppConfig</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> shouldBeActive = microApp.checkActive(url);</span><br><span class="line">    <span class="hljs-keyword">if</span> (shouldBeActive) &#123;</span><br><span class="line">      activeApps.push(microApp);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      unmountApps.push(microApp);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="hljs-built_in">Promise</span>.all(</span><br><span class="line">    unmountApps.map(<span class="hljs-keyword">async</span> (unmountApp) =&gt; &#123;</span><br><span class="line">      <span class="hljs-comment">// 已经mounted或正在加载的</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (unmountApp.status === MOUNTED || unmountApp.status === LOADING_ASSETS) &#123;</span><br><span class="line">        globalConfiguration.onAppLeave(unmountApp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">await</span> unmountMicroApp(unmountApp.name);</span><br><span class="line">    &#125;).concat(activeApps.map(<span class="hljs-keyword">async</span> (activeApp) =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (activeApp.status !== MOUNTED) &#123;</span><br><span class="line">        globalConfiguration.onAppEnter(activeApp);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-comment">// 创建子应用</span></span><br><span class="line">      <span class="hljs-keyword">await</span> createMicroApp(activeApp);</span><br><span class="line">    &#125;))</span><br><span class="line">  )</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadAppModule</span>(<span class="hljs-params">appConfig: AppConfig</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> appSandbox = createSandbox(appConfig.sandbox);</span><br><span class="line">  <span class="hljs-keyword">const</span> &#123; url, container, entry, entryContent, name &#125; = appConfig;</span><br><span class="line">  <span class="hljs-comment">// 获取JS和CSS URL 地址，指定或者从HTML里面解析出来</span></span><br><span class="line">  <span class="hljs-keyword">const</span> appAssets = url ? getUrlAssets(url) : <span class="hljs-keyword">await</span> getEntryAssets(&#123; ... &#125;);</span><br><span class="line">  <span class="hljs-comment">// 加载 JS和CSS资源</span></span><br><span class="line">  <span class="hljs-keyword">await</span> appendAssets(appAssets, appSandbox);</span><br><span class="line">  lifecycle = &#123;</span><br><span class="line">    mount: getCache(AppLifeCycleEnum.AppEnter),</span><br><span class="line">    unmount: getCache(AppLifeCycleEnum.AppLeave),</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-keyword">return</span> combineLifecyle(lifecycle, appConfig); <span class="hljs-comment">// 将子应用的生命周期方法组合返回</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">appendAssets</span>(<span class="hljs-params">assets: Assets, sandbox?: Sandbox</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// CSS 只是通过 link 标签加载进来，开发需要自己做隔离，比如 CSS Modules</span></span><br><span class="line">  <span class="hljs-keyword">await</span> loadAndAppendCssAssets(assets);</span><br><span class="line">  <span class="hljs-comment">// JS 通过内置的沙箱对象隔离</span></span><br><span class="line">  <span class="hljs-keyword">await</span> loadAndAppendJsAssets(assets, sandbox);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">export</span> <span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">loadAndAppendJsAssets</span>(<span class="hljs-params">assets: Assets, sandbox?: Sandbox</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 加载所有的 JS URL</span></span><br><span class="line">  <span class="hljs-keyword">const</span> jsContents = <span class="hljs-keyword">await</span> fetchScripts(jsList);</span><br><span class="line">  <span class="hljs-comment">// excute code by order</span></span><br><span class="line">  jsContents.forEach(<span class="hljs-function"><span class="hljs-params">script</span> =&gt;</span> &#123;</span><br><span class="line">    sandbox.execScriptInSandbox(script);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sandbox</span> </span>&#123;</span><br><span class="line">  private eventListeners = &#123;&#125;;</span><br><span class="line">  private timeoutIds: number[] = [];</span><br><span class="line">  private intervalIds: number[] = [];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">constructor</span>(props: SandboxProps = &#123;&#125;) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.sandbox = <span class="hljs-literal">null</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  execScriptInSandbox(script: string): <span class="hljs-keyword">void</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.createProxySandbox();</span><br><span class="line">    <span class="hljs-comment">// with + Function 组合，形成一个闭包</span></span><br><span class="line">    <span class="hljs-comment">// 绑在 sandbox 上</span></span><br><span class="line">    <span class="hljs-keyword">const</span> execScript = <span class="hljs-string">`with (sandbox) &#123;;<span class="hljs-subst">$&#123;script&#125;</span>\n&#125;`</span>;</span><br><span class="line">    <span class="hljs-keyword">const</span> code = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Function</span>(<span class="hljs-string">'sandbox'</span>, execScript).bind(<span class="hljs-keyword">this</span>.sandbox);</span><br><span class="line">    <span class="hljs-comment">// run code with sandbox</span></span><br><span class="line">    <span class="hljs-comment">// sandbox 将代理子应用的 window</span></span><br><span class="line">    code(<span class="hljs-keyword">this</span>.sandbox);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">createProxySandbox() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> proxyWindow = <span class="hljs-built_in">Object</span>.create(<span class="hljs-literal">null</span>) <span class="hljs-keyword">as</span> Window;</span><br><span class="line">    <span class="hljs-keyword">const</span> originalWindow = <span class="hljs-built_in">window</span>;</span><br><span class="line">    <span class="hljs-keyword">const</span> originalAddEventListener = <span class="hljs-built_in">window</span>.addEventListener;</span><br><span class="line">    <span class="hljs-keyword">const</span> originalRemoveEventListener = <span class="hljs-built_in">window</span>.removeEventListener;</span><br><span class="line">    <span class="hljs-keyword">const</span> originalSetInerval = <span class="hljs-built_in">window</span>.setInterval;</span><br><span class="line">    <span class="hljs-keyword">const</span> originalSetTimeout = <span class="hljs-built_in">window</span>.setTimeout;</span><br><span class="line">    <span class="hljs-comment">// 防止内存泄漏和在切换子应用时候注销掉原来的一些定时或监听事件</span></span><br><span class="line">    <span class="hljs-comment">// 需要在外层包一层，将相关的回调存在数组中</span></span><br><span class="line">    <span class="hljs-comment">// 待应用切换时候清理</span></span><br><span class="line">    proxyWindow.addEventListener = <span class="hljs-function">(<span class="hljs-params">eventName, fn, ...rest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> listeners = <span class="hljs-keyword">this</span>.eventListeners[eventName] || [];</span><br><span class="line">      listeners.push(fn);</span><br><span class="line">      <span class="hljs-keyword">return</span> originalAddEventListener.apply(originalWindow, [eventName, fn, ...rest]);</span><br><span class="line">    &#125;;</span><br><span class="line">    proxyWindow.removeEventListener = <span class="hljs-function">(<span class="hljs-params">eventName, fn, ...rest</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> listeners = <span class="hljs-keyword">this</span>.eventListeners[eventName] || [];</span><br><span class="line">      <span class="hljs-keyword">if</span> (listeners.includes(fn)) &#123;</span><br><span class="line">        listeners.splice(listeners.indexOf(fn), <span class="hljs-number">1</span>);</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">return</span> originalRemoveEventListener.apply(originalWindow, [eventName, fn, ...rest]);</span><br><span class="line">    &#125;;</span><br><span class="line">    proxyWindow.setTimeout = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> timerId = originalSetTimeout(...args);</span><br><span class="line">      <span class="hljs-keyword">this</span>.timeoutIds.push(timerId);</span><br><span class="line">      <span class="hljs-keyword">return</span> timerId;</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-comment">// hijack setInterval</span></span><br><span class="line">    proxyWindow.setInterval = <span class="hljs-function">(<span class="hljs-params">...args</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> intervalId = originalSetInerval(...args);</span><br><span class="line">      <span class="hljs-keyword">this</span>.intervalIds.push(intervalId);</span><br><span class="line">      <span class="hljs-keyword">return</span> intervalId;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> sandbox = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Proxy</span>(proxyWindow, &#123;</span><br><span class="line">      set(target: Window, <span class="hljs-attr">p</span>: PropertyKey, <span class="hljs-attr">value</span>: any): boolean &#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      get(target: Window, <span class="hljs-attr">p</span>: PropertyKey): any &#123;</span><br><span class="line"></span><br><span class="line">      &#125;,</span><br><span class="line">      has(target: Window, <span class="hljs-attr">p</span>: PropertyKey): boolean &#123;</span><br><span class="line">        <span class="hljs-keyword">return</span> p <span class="hljs-keyword">in</span> target || p <span class="hljs-keyword">in</span> originalWindow;</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-keyword">this</span>.sandbox = sandbox;</span><br><span class="line">  &#125;</span><br><span class="line">  clear() &#123;</span><br><span class="line">    <span class="hljs-comment">// remove event listeners</span></span><br><span class="line">    <span class="hljs-built_in">Object</span>.keys(<span class="hljs-keyword">this</span>.eventListeners).forEach(<span class="hljs-function">(<span class="hljs-params">eventName</span>) =&gt;</span> &#123;</span><br><span class="line">      (<span class="hljs-keyword">this</span>.eventListeners[eventName] || []).forEach(<span class="hljs-function"><span class="hljs-params">listener</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-built_in">window</span>.removeEventListener(eventName, listener);</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-comment">// clear timeout</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.timeoutIds.forEach(<span class="hljs-function"><span class="hljs-params">id</span> =&gt;</span> <span class="hljs-built_in">window</span>.clearTimeout(id));</span><br><span class="line">    <span class="hljs-keyword">this</span>.intervalIds.forEach(<span class="hljs-function"><span class="hljs-params">id</span> =&gt;</span> <span class="hljs-built_in">window</span>.clearInterval(id));</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createMicroApp</span>(<span class="hljs-params">app: string | AppConfig, appLifecyle?: AppLifecylceOptions</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> appConfig = getAppConfigForLoad(app, appLifecyle);</span><br><span class="line">  lifeCycle = <span class="hljs-keyword">await</span> loadAppModule(appConfig);</span><br><span class="line">  <span class="hljs-comment">// 触发子应用的mount方法</span></span><br><span class="line">  mountMicroApp(appConfig.name);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码是 icestark 实现 JS 沙箱的核心代码。通过 with + new Function 的形式，为子应用脚本创建沙箱运行环境，并通过 Proxy 代理阻断沙箱内对 window 全局变量的访问和修改。</p>]]></content>
    
    <summary type="html">
    
      icestark 是一个面向大型系统的微前端解决方案。通过 with + new Function 的形式，为子应用脚本创建沙箱运行环境，并通过 Proxy 代理阻断沙箱内对 window 全局变量的访问和修改。
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
      <category term="架构" scheme="https://mlib.wang/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="微前端" scheme="https://mlib.wang/tags/%E5%BE%AE%E5%89%8D%E7%AB%AF/"/>
    
  </entry>
  
  <entry>
    <title>monitorEventLoopDelay 实现原理</title>
    <link href="https://mlib.wang/2020/11/06/monitorEventLoopDelay-libuv-uv-timer-start/"/>
    <id>https://mlib.wang/2020/11/06/monitorEventLoopDelay-libuv-uv-timer-start/</id>
    <published>2020-11-06T08:16:40.000Z</published>
    <updated>2020-11-09T06:05:03.861Z</updated>
    
    <content type="html"><![CDATA[<h2 id="monitorEventLoopDelay-是什么"><a href="#monitorEventLoopDelay-是什么" class="headerlink" title="monitorEventLoopDelay 是什么"></a>monitorEventLoopDelay 是什么</h2><p>perf_hooks.monitorEventLoopDelay([options])</p><ul><li>options: Object<br>– <code>resolution</code>: The sampling rate in milliseconds. Must be greater than zero. Default: 10.</li><li>Returns: Histogram<blockquote><p>Creates a Histogram object that samples and reports the event loop delay over time. The delays will be reported in nanoseconds.<br>Using a timer to detect approximate event loop delay works because the execution of timers is tied specifically to the lifecycle of the libuv event loop. That is, a delay in the loop will cause a delay in the execution of the timer, and those delays are specifically what this API is intended to detect.</p></blockquote></li></ul><p>监控 EventLoop 运行情况是判断系统是否健康的重要指标之一，如果有大量的延迟，说明系统存在密集计算，降低了系统的吞吐。Node.js 在 v11 版本引入了<code>monitorEventLoopDelay</code>，而之前需要自己去实现。</p><!-- monitorEventLoopDelay 的功能介绍 --><a id="more"></a><p><strong>版本</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// libuv</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_MAJOR 1</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_MINOR 33</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_PATCH 1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// V8</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_MAJOR_VERSION 7</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_MINOR_VERSION 8</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_BUILD_NUMBER 279</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_PATCH_LEVEL 17</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Node.js</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_MAJOR_VERSION 14</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_MINOR_VERSION 0</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_PATCH_VERSION 0</span></span><br></pre></td></tr></table></figure><h2 id="实现原理"><a href="#实现原理" class="headerlink" title="实现原理"></a>实现原理</h2><p><em>代码中隐去了当前介绍过程中不重要的代码，有兴趣可以查看源码</em></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// perf_hooks.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">monitorEventLoopDelay</span>(<span class="hljs-params">options = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// _ELDHistogram 是 C++ 暴露出来的对象</span></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ELDHistogram(<span class="hljs-keyword">new</span> _ELDHistogram(resolution));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ELDHistogram 基本是对 handle 入参对象的代理</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ELDHistogram</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(handle) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>[kHandle] = handle;</span><br><span class="line">  &#125;</span><br><span class="line">  enable() &#123;</span><br><span class="line">    <span class="hljs-comment">// 开启监控</span></span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>[kHandle].enable();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// node_perf.h</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ELDHistogram</span> :</span> <span class="hljs-keyword">public</span> HandleWrap, <span class="hljs-keyword">public</span> Histogram &#123;</span><br><span class="line"> <span class="hljs-keyword">public</span>:</span><br><span class="line">  ELDHistogram(Environment* env,</span><br><span class="line">               Local&lt;Object&gt; wrap,</span><br><span class="line">               <span class="hljs-keyword">int32_t</span> resolution);</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">bool</span> <span class="hljs-title">Enable</span><span class="hljs-params">()</span></span>;</span><br><span class="line"> <span class="hljs-keyword">private</span>:</span><br><span class="line">  <span class="hljs-comment">// Enable 开启后，注册到 EventLoop里的回调</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">DelayIntervalCallback</span><span class="hljs-params">(<span class="hljs-keyword">uv_timer_t</span>* req)</span></span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">bool</span> enabled_ = <span class="hljs-literal">false</span>;</span><br><span class="line">  <span class="hljs-comment">// 注册在EventLoop上的 Handle</span></span><br><span class="line">  <span class="hljs-keyword">uv_timer_t</span> timer_;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// node_perf.cc</span></span><br><span class="line"><span class="hljs-keyword">bool</span> ELDHistogram::Enable() &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (enabled_ || IsHandleClosing()) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">  enabled_ = <span class="hljs-literal">true</span>;</span><br><span class="line">  <span class="hljs-comment">// resolution_ 可以通过 js 传入的参数</span></span><br><span class="line">  <span class="hljs-comment">// 多少时间记录一次数据</span></span><br><span class="line">  uv_timer_start(&amp;timer_,</span><br><span class="line">                 DelayIntervalCallback,</span><br><span class="line">                 resolution_,</span><br><span class="line">                 resolution_);</span><br><span class="line">  <span class="hljs-comment">//  设置成 unref</span></span><br><span class="line">  uv_unref(<span class="hljs-keyword">reinterpret_cast</span>&lt;<span class="hljs-keyword">uv_handle_t</span>*&gt;(&amp;timer_));</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 每次定时触发回调，记录相关的值</span></span><br><span class="line"><span class="hljs-keyword">void</span> ELDHistogram::DelayIntervalCallback(<span class="hljs-keyword">uv_timer_t</span>* req) &#123;</span><br><span class="line">  ELDHistogram* histogram = ContainerOf(&amp;ELDHistogram::timer_, req);</span><br><span class="line">  histogram-&gt;RecordDelta();</span><br><span class="line">  TRACE_COUNTER1(TRACING_CATEGORY_NODE2(perf, event_loop),</span><br><span class="line">                 <span class="hljs-string">"min"</span>, histogram-&gt;Min());</span><br><span class="line">  TRACE_COUNTER1(TRACING_CATEGORY_NODE2(perf, event_loop),</span><br><span class="line">                 <span class="hljs-string">"max"</span>, histogram-&gt;Max());</span><br><span class="line">  TRACE_COUNTER1(TRACING_CATEGORY_NODE2(perf, event_loop),</span><br><span class="line">                 <span class="hljs-string">"mean"</span>, histogram-&gt;Mean());</span><br><span class="line">  TRACE_COUNTER1(TRACING_CATEGORY_NODE2(perf, event_loop),</span><br><span class="line">                 <span class="hljs-string">"stddev"</span>, histogram-&gt;Stddev());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码我们可以和很容易的知道，js 调用一个<code>ELDHistogram</code>对象，该对象代理底层 C++的方法，一旦开启监控，就会在 EventLoop 上注册一个回调，每次时间一到就记录相关的值放在<a href="https://github.com/HdrHistogram/HdrHistogram_c" target="_blank" rel="noopener">HdrHistogram_c</a>中，它是 C 对<a href="https://github.com/HdrHistogram/HdrHistogram" target="_blank" rel="noopener">HdrHistogram</a>的实现，可以获取从记录开始到当前时间点的最大、最小、平均值、95 线等数据。</p><p>直白点讲就是开启一个定时器，通过向 libuv 注册 uv_timer_t 句柄，执行回调，获取数据存在一个特定的容器中，我们从该容器拿被处理好的数据。</p>]]></content>
    
    <summary type="html">
    
      monitorEventLoopDelay原理介绍，通过向libuv注册uv_timer_t句柄，定时触发回调事件
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="原理" scheme="https://mlib.wang/tags/%E5%8E%9F%E7%90%86/"/>
    
      <category term="V8" scheme="https://mlib.wang/tags/V8/"/>
    
  </entry>
  
  <entry>
    <title>前端调度工具（内部培训PPT）</title>
    <link href="https://mlib.wang/2020/11/04/node-gateway-ssr-multi-version-2/"/>
    <id>https://mlib.wang/2020/11/04/node-gateway-ssr-multi-version-2/</id>
    <published>2020-11-04T14:30:39.000Z</published>
    <updated>2020-11-05T03:45:46.428Z</updated>
    
    <content type="html"><![CDATA[<p>书接上文 <a href="/2020/06/29/node-gateway-ssr-multi-version/">Node.js 服务支持多 SSR 版本</a>，之前的架构只是支持 SSR 应用的版本切换，最近为了支持微前端多版本切换（每个子应用也可自己配置自己的版本号），因为 SSR 和纯前端有较多差别所以又做了一套，之后会做一定合并，抽出底层，上层逻辑以插件形式注入。</p><p><a href="/images/node-gateway-ssr-multi-version-2/FE-Schedule.pptx">前端调度工具 PPT 下载</a></p><a id="more"></a><p><img src="/images/node-gateway-ssr-multi-version-2/0.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/1.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/2.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/3.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/4.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/5.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/6.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/7.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/8.png" alt><br><img src="/images/node-gateway-ssr-multi-version-2/9.png" alt></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;书接上文 &lt;a href=&quot;/2020/06/29/node-gateway-ssr-multi-version/&quot;&gt;Node.js 服务支持多 SSR 版本&lt;/a&gt;，之前的架构只是支持 SSR 应用的版本切换，最近为了支持微前端多版本切换（每个子应用也可自己配置自己的版本号），因为 SSR 和纯前端有较多差别所以又做了一套，之后会做一定合并，抽出底层，上层逻辑以插件形式注入。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;/images/node-gateway-ssr-multi-version-2/FE-Schedule.pptx&quot;&gt;前端调度工具 PPT 下载&lt;/a&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://mlib.wang/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://mlib.wang/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>debug libuv</title>
    <link href="https://mlib.wang/2020/09/28/debug-libuv/"/>
    <id>https://mlib.wang/2020/09/28/debug-libuv/</id>
    <published>2020-09-28T10:31:53.000Z</published>
    <updated>2020-09-28T11:15:54.480Z</updated>
    
    <content type="html"><![CDATA[<p>libuv 在 v1.36.0 之后移除了 <code>gyp_uv.py</code> (<a href="https://github.com/libuv/libuv/commit/53f3c687fc288708721a5a3d9563febda1b9d2c1" target="_blank" rel="noopener">commit</a>)，没办法通过它去创建一个 libuv.a 静态链接库（<a href="https://github.com/libuv/libuv/tree/v1.35.0" target="_blank" rel="noopener">v1.35 文档</a>有详细的介绍），现在我们需要通过<code>cmake</code>去创建。</p><h3 id="构建静态链接库"><a href="#构建静态链接库" class="headerlink" title="构建静态链接库"></a>构建静态链接库</h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">// 下载 libuv</span><br><span class="line">git clone https://github.com/libuv/libuv</span><br><span class="line">cd libuv</span><br><span class="line">mkdir -p build</span><br><span class="line">// DCMAKE_BUILD_TYPE 将其设置为 Debug 模式，不然断点没办法进入 libuv 源码中</span><br><span class="line"> (cd build &amp;&amp; cmake -DCMAKE_BUILD_TYPE=Debug ..)</span><br><span class="line">cmake --build build</span><br></pre></td></tr></table></figure><p>之后 build 目录 如下，libuv_a.a 就是我们需要的 静态链接库。<br><img src="/images/debug-libuv/build.jpg" alt="build dir"></p><h3 id="新建-hello-world-项目"><a href="#新建-hello-world-项目" class="headerlink" title="新建 hello world 项目"></a>新建 hello world 项目</h3><p>通过 CLion 创建一个<code>helloworld</code>项目，在 CMakeLists.txt 里添加 libuv 相关的信息，将 libuv 的头文件和源码添加进来，最后把项目和 linuv 链接在一起</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cmake_minimum_required(VERSION 3.17)</span><br><span class="line">project(helloworld)</span><br><span class="line">add_executable(helloworld main.cpp)</span><br><span class="line"></span><br><span class="line"># 前面 clone libuv 绝对路径</span><br><span class="line">set(LIBUVDIR /your/libuv/path)</span><br><span class="line"># 将源码导入</span><br><span class="line">include_directories($&#123;LIBUVDIR&#125;/src)</span><br><span class="line">include_directories($&#123;LIBUVDIR&#125;/include)</span><br><span class="line"></span><br><span class="line">add_library(libuv STATIC IMPORTED)</span><br><span class="line">set_target_properties(libuv</span><br><span class="line">        PROPERTIES IMPORTED_LOCATION</span><br><span class="line">        $&#123;LIBUVDIR&#125;/build/libuv_a.a)</span><br><span class="line"></span><br><span class="line"># 链接起来</span><br><span class="line">target_link_libraries(helloworld libuv)</span><br></pre></td></tr></table></figure><p>创建 main.cpp 文件</p><figure class="highlight cpp hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;uv.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">cb</span><span class="hljs-params">(<span class="hljs-keyword">uv_write_t</span> *req, <span class="hljs-keyword">int</span> status)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Hello from Callback.\n"</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">uv_tty_t</span> tty;</span><br><span class="line">  <span class="hljs-keyword">uv_write_t</span> req;</span><br><span class="line">  uv_tty_init(uv_default_loop(), &amp;tty, <span class="hljs-number">1</span>, <span class="hljs-number">0</span>);</span><br><span class="line">  <span class="hljs-keyword">char</span> str[] = <span class="hljs-string">"Hello UV!\n"</span>;</span><br><span class="line">  <span class="hljs-keyword">int</span> len = <span class="hljs-built_in">strlen</span>(str);</span><br><span class="line">  <span class="hljs-keyword">uv_buf_t</span> bufs[] = &#123;uv_buf_init(str, len)&#125;;</span><br><span class="line">  uv_write(&amp;req, (<span class="hljs-keyword">uv_stream_t</span> *) &amp;tty, bufs, <span class="hljs-number">1</span>, cb);</span><br><span class="line">  uv_run(uv_default_loop(), UV_RUN_DEFAULT);</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>之后就能愉快的打断点调试 libuv 了<br><img src="/images/debug-libuv/debug.jpg" alt="debug libuv"></p><p>学习 libuv 或者其它 C/C++相关的技术，感觉又回到了刚开始学习编程的时候，很多的不懂和挑战，不再像用 JavaScript 那样随心所欲，但是越是对底层的学习，越是能了解计算机原理，职业寿命才能变得更长。出于兴趣也好，出于无奈也好，总之新的学习让一切又变得有意思起来。</p>]]></content>
    
    <summary type="html">
    
      学习 libuv 或者其它 C/C++相关的技术，感觉又回到了刚开始学习编程的时候，很多的不懂和挑战，不再像用 JavaScript 那样随心所欲，但是越是对底层的学习，越是能了解计算机原理，职业寿命才能变得更长。出于兴趣也好，出于无奈也好，总之新的学习让一切又变得有意思起来。
    
    </summary>
    
      <category term="C/C++" scheme="https://mlib.wang/categories/C-C/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="libuv" scheme="https://mlib.wang/tags/libuv/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 除了 Cluster 还有 Worker Threads</title>
    <link href="https://mlib.wang/2020/09/02/ssr-nodejs-thread-test/"/>
    <id>https://mlib.wang/2020/09/02/ssr-nodejs-thread-test/</id>
    <published>2020-09-01T16:00:00.000Z</published>
    <updated>2020-09-27T05:01:49.030Z</updated>
    
    <content type="html"><![CDATA[<h4 id="Cluster"><a href="#Cluster" class="headerlink" title="Cluster"></a><a href="https://nodejs.org/dist/latest-v14.x/docs/api/cluster.html" target="_blank" rel="noopener">Cluster</a></h4><p>这是一个比较熟悉的模块，早在 Node.js V0.8 版本的时候就已经被加入进来，平时在生产部署 Web 应用的时候，为了充分压榨多核 CPU，总是根据核数开启对应的数量的应用进程，来处理用户请求，这些在 PM2 工具 或者 Egg.js 框架里有相应的介绍，之前自己写的 <a href="https://mlib.wang/2020/05/03/node-js-net-cluster-fork/?s=node-js-net-cluster-fork">简单梳理 Node.js 创建子进程的方法（下）—— cluster</a> 有其原理介绍。</p><p>虽然 Cluster 已经很成熟，但是也有一些问题：</p><ul><li>进程开销较大</li><li>很多第三方工具对 Cluster 不是很友好，还是以单进程为主，比如一些监控系统</li><li>需要有一个管理进程，在某个 Cluster 进程出错退出后将其重启起来；单进程出错奔溃，运维可以通过健康检查未能通过的方式重启整个 Docker 等，相比而言 Cluster 模式复杂的多</li><li>目前从框架上自然支持 Cluster 的只有 Egg.js，其它都需要辅助工具，比如 PM2，然而它并完全免费，所以真使用该项技术，又面临框架选择的问题</li></ul><p><br></p><h4 id="Worker-Threads"><a href="#Worker-Threads" class="headerlink" title="Worker Threads"></a><a href="https://nodejs.org/dist/latest-v14.x/docs/api/worker_threads.html" target="_blank" rel="noopener">Worker Threads</a></h4><p>在 Node.js V10.5.0 加入，但需要通过<code>--experimental-worker</code>开启，直到 V12 才默认支持。在密集计算任务处理上带来了新的解决方案。</p><p>我带领的团队有一个重要的业务需求，就是服务端渲染（SSR)，我们使用 Egg.js 的 Cluster 模式来帮助我们提升吞吐量。虽然业务问题解决了，但是 Egg.js 比起 Express 或者 Koa 这样的框架来说复杂很多，让一个前端同事学习或者招募有经验的新同事还是有点棘手。另外就是和其它非其生态圈的工具搭配使用也遇到不少麻烦。</p><p>好在 Worker Threads 同样可以压榨 CPU，提升整体吞吐量。</p><a id="more"></a><p><br></p><h4 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h4><p><strong>实验说明</strong></p><p>对一个 List（100 条）数据进行渲染，分别查看单线程和多线程所花费的时间和吞吐量</p><p><strong>实验环境：</strong></p><ul><li>MacBook Pro (Retina, 13-inch, Mid 2014)</li><li>CPU 2.6 GHz 双核 Intel Core i5</li><li>内存 8 GB 1600 MHz DDR3</li></ul><p><strong>实验代码：</strong></p><p><a href="https://github.com/miser/ssr-thread-test" target="_blank" rel="noopener">ssr-thread-test</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node one.js <span class="hljs-comment">// 启动单线程的 web服务</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">node multiple.js <span class="hljs-comment">// 启动多线程的 web服务</span></span><br></pre></td></tr></table></figure><p>多线程使用了线程池，基本上是<a href="https://nodejs.org/dist/latest-v14.x/docs/api/async_hooks.html#async_hooks_using_asyncresource_for_a_worker_thread_pool" target="_blank" rel="noopener">官方的例子</a>，不过官方用的是事件监听的机制，在高并发下会发出发出超出最大监听数的警告，我将其改为队列的形式。</p><p>分别进行压力测试， 2W 个请求，每次并发 30 个</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ab -n 20000 -c 30 -k "http://localhost:9000/test"</span><br></pre></td></tr></table></figure><p><strong>得分计算：</strong><br>对单线程和多线程各跑 10 次压测，去掉最高最低算平均分</p><table><thead><tr><th></th><th>单线程</th><th>多线程</th></tr></thead><tbody><tr><td>Time Taken For Tests</td><td>47.187</td><td>45.147</td></tr><tr><td>Requests Per Second</td><td>423.938</td><td>444.377</td></tr><tr><td>95%的请求小于多少毫秒</td><td>44.571</td><td>40</td></tr></tbody></table><p>从此次实验可以得出，多线程比单线程的性能有一定提升，当然这是在简单的环境下，更为复杂的 SSR 计算相信会有更多的性能提升。</p><p>Cluster 这种复杂的编程方式对轻巧的 Node.js 并不有好，加之容器化技术的不断发展，多个 K8s Pod 完全就可以覆盖 Cluster 功能，Egg.js 从 18 年就开始讨论是否使用单进程模型，目前新版本已近支持。所以，对于 Node.js 而言 Worker Threads 才是今后解决密集计算的方向。</p>]]></content>
    
    <summary type="html">
    
      Cluster 这种复杂的编程方式对轻巧的 Node.js 并不有好，加之容器化技术的不断发展，多个 K8s Pod 完全就可以覆盖 Cluster 功能，Egg.js 从 18 年就开始讨论是否使用单进程模型，目前新版本已近支持。所以，对于 Node.js 而言 Worker Threads 才是今后解决密集计算的方向
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="SSR" scheme="https://mlib.wang/tags/SSR/"/>
    
  </entry>
  
  <entry>
    <title>码农与画家</title>
    <link href="https://mlib.wang/2020/08/16/coder-painter/"/>
    <id>https://mlib.wang/2020/08/16/coder-painter/</id>
    <published>2020-08-16T07:32:03.586Z</published>
    <updated>2020-08-19T04:42:01.965Z</updated>
    
    <content type="html"><![CDATA[<h2 id="又想起了那本《黑客与画家》"><a href="#又想起了那本《黑客与画家》" class="headerlink" title="又想起了那本《黑客与画家》"></a>又想起了那本《黑客与画家》</h2><p>最近总是想起这个书名，多年前在图灵社区购买的电子本，对于当时的自己来说感觉有些不适用，以至于内容忘记的差不多了，仅仅是书名让人感觉非常酷。写该文的时候又去翻阅了下，感觉有些东西还是很有趣的，有时间应该重读下。</p><p>过往的自己，手上大多是工具书，应用相关的，希望通过书中的介绍知道一个个技术的细节，感觉每看一页都是收获满满，对于《黑客与画家》这样非直观的技术呈现显得不感兴趣。</p><p>现在的自己，愿意通过源码去寻找技术细节（也是拜这些年 github 等社区带来的便利），更多是希望知道那些技术大师如何思考、如何设计程序、如何架构系统，需要更多其它的信息来构建自己的认知体系。<strong>为什么这样做</strong>比<strong>这是怎么做</strong>显得更加重要，<code>为什么</code>是因，<code>怎么</code>是果。</p><p>最近在给团队里年轻同事做培训或 Code Review 的时候也是感触良多，总是想起过去的自己，脑子中又闪现出了，<strong>码农与程序猿</strong>。</p><a id="more"></a><h2 id="业务总是无穷尽"><a href="#业务总是无穷尽" class="headerlink" title="业务总是无穷尽"></a>业务总是无穷尽</h2><p>这是一件好事情，正因为如此我们才得以有工作，有收入养活自己和家人。</p><p>过去的自己经常觉得上面分配下来的任务能合理规划时间，在预定的时间内完成是件非常了不起的事情，显示出自己的诚实有信，当然<strong>这条是永远不会过时的职场优点，也会让别人愿意和你合作</strong>。不过，当我们放下脚步，去细细询问一些细节，比如究竟是什么让你如此高效的话，一些坏味道会浮现上来，比如：</p><ul><li>新的业务需求，新的 <code>if-else</code> 判断</li><li>相似的功能点，重复的 <code>Ctrl + C</code> 和 <code>Ctrl + V</code></li><li>不断横向扩展的方法入参<br>……</li></ul><p>野蛮生长的代码往后或许会给别人，让 TA 们继续野蛮，而自己可能也习惯了简单粗暴的方式，在业务中“乐此不疲”，一年到头除了业务知识的长进和一些细枝末节的技术知识（比如，“远古时期”如何兼容各 IE 版本的样式，现在好了微软要结束对 IE 的支持了），对那些涌现的新技术，再也学不动了。似乎转产品、转管理是唯一的出路，因为之前创过业，做产品考虑的问题不比技术少，头发也是一把把掉；现在做点管理，同样要考虑很多，对上要规划和争取、对下要安抚和培养，反而做技术乐得自在，无非就是多学习，最后都是自己的财富。</p><h2 id="大多是平庸的"><a href="#大多是平庸的" class="headerlink" title="大多是平庸的"></a>大多是平庸的</h2><p>除了少数悟性高、脚踏实地、心智成熟的人之外，大部分都是平庸的。专业能力的提升需要悟性，把知识转化为产品需要脚踏实地的去做，团队协作、把东西做大做强需要心智成熟。我没有把天才列在上述 3 大特点之内，历史的长河中，自命不凡的天才都死的太早，而且大多自己作死。我自己也有时懊恼为什么之前要去和朋友创业，如果安心工作，也许又是一番风景了。应该和自己的平庸做妥协，这样也会顺理成章的接受他人的平庸，相互善待，摆正好心态，不管结果如何至少过程会让自己愉悦点，不能总说阿 Q 精神总是一无是处的。</p><h2 id="油画总是涂了一层又一层"><a href="#油画总是涂了一层又一层" class="headerlink" title="油画总是涂了一层又一层"></a>油画总是涂了一层又一层</h2><p>一个公司真正赚钱的业务线就那么几条，能做架构的也就那么些人，大部分是平庸无聊又被无尽业务业务淹没的码农，似乎能一眼望到老。</p><p>陈旧的老系统、他人的神奇代码，你不得不必须花大量的精力去和它们搏斗，日复一日的耗尽你一切，一不小心就被吞噬，这些远没有新需求、新系统来的香，你可以安心的饲养自己的怪兽。过去的自己也极其喜欢这为所欲为的状态，但是我并没有好的悟性，无法凭空在纯净的土壤中生出“花”来，不断做新的，学习新的东西只是徒增了一些快乐，成长总是伴随着痛苦的迭代，和过去的自己持续搏斗，你会</p><ul><li>明白为什么会要做这样或那样的修改，去满足时而复杂时而简单的需求</li><li>为了能早点下班，只能思考如何偷懒，有点被多方胁迫的感觉，尝试一些设计，去满足不同业务变化，各类设计模式和编程模型会出现在项目的各个角落</li><li>好的继续保持，坏的用别的替换或组合着用</li><li>代码也时而膨胀，时而精简</li><li>系统也经常神经质般的出现一些纰漏</li><li>又是为了早点下班，把单元测试、集成测试等等引入进来，尽可能束缚中手上的怪兽</li></ul><p>时间长了，你会发现</p><ul><li>系统在设计模式和编程模型的加持下，变得有条不紊</li><li>需求的变换，无非就是对一些模块更迭，不同的模块组合又能实现新的需求</li><li>想想各类 UI 组件库、插件机制、中间件机制等，无非就是处理了一些场景（其实也是业务）的抽象需求</li><li>而我们自己将业务中的点点滴滴汇集起来，不也就是属于自己的一套编程经验了吗，并没有那么多的不同</li><li>当你在感叹第三方类库彬彬有礼的时候，是否也察觉自己也把手上的系统变得礼貌了许多呢</li></ul><h2 id="“简历上如何才能体现亮点”"><a href="#“简历上如何才能体现亮点”" class="headerlink" title="“简历上如何才能体现亮点”"></a>“简历上如何才能体现亮点”</h2><p>| 这是在做培训的时候，一个实习生问的。</p><p>作为一个快要毕业的研究生来说，比起我这个低学历的“老年人”来说已经是极大的亮点了。平时也给她做了不少培训，影印了不少资料，但是真的能运用到工作中的还是有限的，倒不是她不努力，只是经验尚浅，不知道该如何运用，还需要更多重复在一张纸上画画，这不是教出来而是练出来，并自己总结悟出来的。那些流行度极广的框架或类库都是把“垃圾”工作有效的整理和隐藏起来，你只需要“精致”的去运用上层就好。把<code>垃圾</code>转为<code>精致</code>不就是亮点吗？</p><p>想要建造罗马城，应该学会砌砖，整个过程需要数年时间。</p><p>迭代需要时间，而技术工作的寿命又显得那么短暂，外面的培训机构各类的花式广告标语又在制造一场场焦虑，身边的朋友同学工资早已翻倍，而自己依旧平庸。我也想不出什么好的办法，唯一能做的是持续的画画，不断的画画，一层又一层，把会的分享出去，把困惑和别人探讨，既然平庸更该为下一次机会做好准备。</p><h2 id="码农与画家"><a href="#码农与画家" class="headerlink" title="码农与画家"></a>码农与画家</h2><p>我想所有的工作都是需要日夜重复，在平庸中找寻突破的，无论是码农还是画家，很多时候是孤独的在和手上的作品搏斗。</p><p>上面的东西，最近总是在脑子里出现，最后还是决定写下来。本想写的细点，突出一些重点，但自己并没有什么真本事是列举，大道理都明白，就像很多成功学的书一样，废话多于实操。</p><p>对于刚毕业或工作没几年的朋友来说或许是不适用的。而对于像我这样的“老年人”来说反而有闲暇时间去画画了。</p>]]></content>
    
    <summary type="html">
    
      我想所有的工作都是需要日夜重复，在平庸中找寻突破的，无论是码农还是画家，很多时候是孤独的在和手上的作品搏斗。
    
    </summary>
    
      <category term="架构" scheme="https://mlib.wang/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="随想" scheme="https://mlib.wang/tags/%E9%9A%8F%E6%83%B3/"/>
    
  </entry>
  
  <entry>
    <title>Lighthouse 流程和架构分析</title>
    <link href="https://mlib.wang/2020/07/07/lighthouse/"/>
    <id>https://mlib.wang/2020/07/07/lighthouse/</id>
    <published>2020-07-07T13:56:46.000Z</published>
    <updated>2020-07-14T03:58:57.770Z</updated>
    
    <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>随着公司业务的不断扩展 ，系统也变得越来越臃肿，需要被不断的拆分，引进诸如微前端这样的框架，开发人员也不断的扩充，甚至有不同办公地点的同事协作开发。除了基本的开发规范外，也需要有一套完善的监控来测试和记录每次代码提交是否比之前版本存在性能不足等问题，在 CI 阶段发现问题，提早解决避免上线后带来性能损失而流失用户。团队成员也能在工作中不断的成长、驱动、交付出优质的应用。</p><h3 id="前端经常要关注的几个指标："><a href="#前端经常要关注的几个指标：" class="headerlink" title="前端经常要关注的几个指标："></a>前端经常要关注的几个指标：</h3><p><strong>First Contentful Paint：</strong>浏览器首次绘制文本、图片（包含背景图）、非白色的 canvas 或 SVG 的时间节点。<em>反映了网络的可用性和页面资源是否庞大导致传输时间过长。</em></p><p><strong>First Meaningful Paint：</strong>页面的“主要内容”开始出现在屏幕上的时间点，测量用户加载体验的主要指标。<em>反映了是否太多非重要资源加载或执行的优先级高于主要的呈现资源。</em></p><p><strong>First CPU Idle：</strong>页面主线程首次可以触发 input 操作，通常叫做最小可交互时间。</p><p><strong>Time to Interactive：</strong>页面完全达到可交互状态的时间点。</p><p><br></p><h2 id="Lighthouse-介绍"><a href="#Lighthouse-介绍" class="headerlink" title="Lighthouse 介绍"></a>Lighthouse 介绍</h2><blockquote><p>是一个开源的自动化工具，用于改进网络应用的质量。 您可以将其作为一个 Chrome 扩展程序运行，或从命令行运行。 您为 Lighthouse 提供一个您要审查的网址，它将针对此页面运行一连串的测试，然后生成一个有关页面性能的报告。</p></blockquote><p><img src="/images/lighthouse/report.png" alt="Lighthouse 报告"></p><a id="more"></a><p><br></p><h2 id="原理分析"><a href="#原理分析" class="headerlink" title="原理分析"></a>原理分析</h2><p><img src="/images/lighthouse/architecture.png" alt="Lighthouse 架构图"></p><p><strong>Driver：</strong> 和 Chrome 交互的对象</p><p><strong>Gatherers：</strong> 收集网页的一些基础信息，用于后续的 Audit</p><p><strong>Artifacts：</strong> 一系列 Gatherers 的信息集合</p><p><strong>Audit：</strong> 测试单个功能/优化/指标。用 Artifacts 作为输入，计算出该项指标的得分，生成<em>Lighthouse 标准的数据对象</em></p><p><strong>Report：</strong> 根据 Lighthouse 标准的数据对象生成可视化页面</p><p><strong>Lighthouse 通过 Driver 模块用 DevTools Protocol 与 Chrome 通信，按照需求对其进行操作，在 Gatherers 模块收集一些信息（artifacts）,在 Audits 模块中进行计算，得到最终打分结果，生成 LHR 根式的报告，渲染成 HTML 文件。</strong></p><h3 id="Lighthouse-CI"><a href="#Lighthouse-CI" class="headerlink" title="Lighthouse CI"></a>Lighthouse CI</h3><p>官方示例</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">name:</span> <span class="hljs-string">CI</span></span><br><span class="line"><span class="hljs-attr">on:</span> <span class="hljs-string">[push]</span></span><br><span class="line"><span class="hljs-attr">jobs:</span></span><br><span class="line"><span class="hljs-attr">  lighthouseci:</span></span><br><span class="line"><span class="hljs-attr">    runs-on:</span> <span class="hljs-string">ubuntu-latest</span></span><br><span class="line"><span class="hljs-attr">    steps:</span></span><br><span class="line"><span class="hljs-attr">      - uses:</span> <span class="hljs-string">actions/checkout@v2</span></span><br><span class="line"><span class="hljs-attr">      - uses:</span> <span class="hljs-string">actions/setup-node@v1</span></span><br><span class="line"><span class="hljs-attr">      - run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-string">&amp;&amp;</span> <span class="hljs-string">npm</span> <span class="hljs-string">install</span> <span class="hljs-bullet">-g</span> <span class="hljs-string">@lhci/cli@0.4.x</span></span><br><span class="line"><span class="hljs-attr">      - run:</span> <span class="hljs-string">npm</span> <span class="hljs-string">run</span> <span class="hljs-string">build</span></span><br><span class="line"><span class="hljs-attr">      - run:</span> <span class="hljs-string">lhci</span> <span class="hljs-string">autorun</span> <span class="hljs-bullet">--upload.target=temporary-public-storage</span></span><br></pre></td></tr></table></figure><ul><li><p><strong>npm run build：</strong> 将静态资源打包，一般打包后的资源会存放在 dist 目录里</p></li><li><p><strong>lhci autorun：</strong> 常用命令，如其字面意思，自动完成整个测试流程，在它里面包含了<code>healthcheck</code>、<code>collect</code>、<code>assert</code>、<code>upload</code>命令</p></li></ul><h3 id="collect-命令源码分析"><a href="#collect-命令源码分析" class="headerlink" title="collect 命令源码分析"></a>collect 命令源码分析</h3><blockquote><p><em>@lhci/cli 版本 0.4.x</em></p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// autorun</span></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runCommand</span>(<span class="hljs-params">options</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 执行 healthcheck</span></span><br><span class="line">  <span class="hljs-keyword">const</span> healthcheckStatus = runChildCommand(<span class="hljs-string">"healthcheck"</span>, [</span><br><span class="line">    ...defaultFlags,</span><br><span class="line">    <span class="hljs-string">"--fatal"</span>,</span><br><span class="line">  ]).status;</span><br><span class="line">  <span class="hljs-comment">// 执行 collect，重点命令</span></span><br><span class="line">  <span class="hljs-keyword">const</span> collectStatus = runChildCommand(<span class="hljs-string">"collect"</span>, [</span><br><span class="line">    ...defaultFlags,</span><br><span class="line">    ...collectArgs,</span><br><span class="line">  ]).status;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 默认不执行 assert 命令， 需要 assert 参数 并且 没有 upload 参数</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (</span><br><span class="line">    ciConfiguration.assert ||</span><br><span class="line">    (!ciConfiguration.assert &amp;&amp; !ciConfiguration.upload)</span><br><span class="line">  ) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> assertStatus = runChildCommand(<span class="hljs-string">"assert"</span>, [</span><br><span class="line">      ...defaultFlags,</span><br><span class="line">      ...assertArgs,</span><br><span class="line">    ]).status;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 默认不执行 upload 命令， 例子中有 upload 参数 会执行它</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (ciConfiguration.upload) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> uploadStatus = runChildCommand(<span class="hljs-string">"upload"</span>, defaultFlags).status;</span><br><span class="line">    <span class="hljs-keyword">if</span> (options.failOnUploadFailure &amp;&amp; uploadStatus !== <span class="hljs-number">0</span>)</span><br><span class="line">      process.exit(uploadStatus);</span><br><span class="line">    <span class="hljs-keyword">if</span> (uploadStatus !== <span class="hljs-number">0</span>)</span><br><span class="line">      process.stderr.write(<span class="hljs-string">`WARNING: upload command failed.\n`</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上述代码中可以很直观看到 <code>autorun</code> 里面包含的命令</p><ul><li>healthcheck 一些检查，比如是否安装了 Chrome、客户端版本和服务端版本是否一致等等</li><li>collect 重要命令，它的整个流程基本涵盖了架构图，从信息的采集到生成报告</li><li>assert 性能分析是否通过，会有相关的提示</li><li>upload 上传报告到指定的服务器，上面例子的上传目标是 <code>temporary-public-storage</code>，一个 google 提供的临时公共服务器</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runCommand</span>(<span class="hljs-params">options</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (!options.additive) clearSavedReportsAndLHRs();</span><br><span class="line"></span><br><span class="line">  checkIgnoredChromeFlagsOption(options);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> puppeteer = <span class="hljs-keyword">new</span> PuppeteerManager(options);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 检查是否有 staticDistDir 参数（默认是dist、build或public，也可以通过--static-dist-dir指定）</span></span><br><span class="line">  <span class="hljs-comment">// staticDistDir是打包后的静态资源目录</span></span><br><span class="line">  <span class="hljs-comment">// 有 =&gt; 创建 express server， 将静态资源加载进服务中（一般都是有的，除非手动关闭）</span></span><br><span class="line">  <span class="hljs-comment">// 没 =&gt; 执行 startServerCommand，开发者自己创建一个服务</span></span><br><span class="line">  <span class="hljs-comment">// 没有服务支持，浏览器无法打开页面进行测试</span></span><br><span class="line">  <span class="hljs-keyword">const</span> &#123; urls, close &#125; = <span class="hljs-keyword">await</span> startServerAndDetermineUrls(options);</span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> url <span class="hljs-keyword">of</span> urls) &#123;</span><br><span class="line">    <span class="hljs-comment">// 如果有 puppeteerScript 参数，那么会出触发该脚本</span></span><br><span class="line">    <span class="hljs-keyword">await</span> puppeteer.invokePuppeteerScriptForUrl(url);</span><br><span class="line">    <span class="hljs-comment">//</span></span><br><span class="line">    <span class="hljs-keyword">await</span> runOnUrl(url, options, &#123; puppeteer &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runOnUrl</span>(<span class="hljs-params">url, options, context</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> runner = getRunner(options); <span class="hljs-comment">//</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 默认执行3次</span></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; options.numberOfRuns; i++) &#123;</span><br><span class="line">    <span class="hljs-comment">// 每次新开一个Node.js进程 调用 lighthouse-cli</span></span><br><span class="line">    <span class="hljs-keyword">const</span> lhr = <span class="hljs-keyword">await</span> runner.runUntilSuccess(url, &#123;</span><br><span class="line">      ...options,</span><br><span class="line">      settings,</span><br><span class="line">    &#125;);</span><br><span class="line">    saveLHR(lhr); <span class="hljs-comment">// 保存 lighthouse result 数据</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><a href="https://github.com/puppeteer/puppeteer" target="_blank" rel="noopener">puppeteer</a>：一个通过 DevTools Protocol 操控 Headless Chrome 的 Node.js 类库</li><li>numberOfRuns 默认是 3，会分别开启 3 个 Node.js 进程各走一次流程，最后在 .lighthouseci 目录下生成 3 对 lhr-xxx.json 和 lhr-xxx.html 文件（前者是分析结果，后者是渲染的网页），及一个 assertion-results.json 文件</li><li>runUntilSuccess 开始执行 lighthouse-cli 里的逻辑</li></ul><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lighthouse-cli 部分代码</span></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">runLighthouse</span>(<span class="hljs-params">url, flags, config</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> launchedChrome;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 通过 chrome-launcher 启动一个 headless Chrome</span></span><br><span class="line">  launchedChrome = <span class="hljs-keyword">await</span> getDebuggableChrome(flags);</span><br><span class="line">  flags.port = launchedChrome.port; <span class="hljs-comment">// 需要知道该Chrome端口号，为了之后的 websocket 通信</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// lighthouse-core/index.js</span></span><br><span class="line">  <span class="hljs-keyword">const</span> runnerResult = <span class="hljs-keyword">await</span> lighthouse(url, flags, config);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (runnerResult) &#123;</span><br><span class="line">    <span class="hljs-keyword">await</span> saveResults(runnerResult, flags);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> runnerResult;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在 lighthouse-cli 中主要就是启动一个 headless Chrome（无界面的 Chrome）,后续交由 lighthouse-core 核心模块完成。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lighthouse-core/index.js</span></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lighthouse</span>(<span class="hljs-params">url, flags = &#123;&#125;, configJSON, connection</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 将自定义配置和默认配置做合并</span></span><br><span class="line">  <span class="hljs-comment">// 根据配置信息创建大量继承Gatherer的对象，有3个方法beforePass、pass、afterPass</span></span><br><span class="line">  <span class="hljs-keyword">const</span> config = generateConfig(configJSON, flags);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// ChromeProtocol 封装了和 Chrome 通信的 websocket</span></span><br><span class="line">  <span class="hljs-keyword">const</span> connection =</span><br><span class="line">    connection || <span class="hljs-keyword">new</span> ChromeProtocol(flags.port, flags.hostname);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 收集 Gather 和计算 Audit 的核心方法</span></span><br><span class="line">  <span class="hljs-keyword">return</span> Runner.run(connection, &#123; url, config &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params">connection, runOpts</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 从浏览器中获取所有的 artifacts</span></span><br><span class="line">  artifacts = <span class="hljs-keyword">await</span> Runner._gatherArtifactsFromBrowser(</span><br><span class="line">    requestedUrl,</span><br><span class="line">    runOpts,</span><br><span class="line">    connection</span><br><span class="line">  );</span><br><span class="line">  <span class="hljs-comment">// 根据获取的artifacts，计算需要的 audits，得出结果</span></span><br><span class="line">  <span class="hljs-keyword">const</span> auditResults = <span class="hljs-keyword">await</span> Runner._runAudits(</span><br><span class="line">    settings,</span><br><span class="line">    runOpts.config.audits,</span><br><span class="line">    artifacts,</span><br><span class="line">    lighthouseRunWarnings</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> lhr = &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 按照 lhr 格式生成报告</span></span><br><span class="line">  lhr.i18n.icuMessagePaths = i18n.replaceIcuMessageInstanceIds(</span><br><span class="line">    lhr,</span><br><span class="line">    settings.locale</span><br><span class="line">  );</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> report = generateReport(lhr, settings.output);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> &#123; lhr, artifacts, report &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> _gatherArtifactsFromBrowser(<span class="hljs-params"></span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  requestedUrl,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  runnerOpts,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  connection</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> driver = runnerOpts.driverMock || <span class="hljs-keyword">new</span> Driver(connection);</span><br><span class="line">  <span class="hljs-keyword">const</span> gatherOpts = &#123;</span><br><span class="line">    driver,</span><br><span class="line">    requestedUrl,</span><br><span class="line">    settings: runnerOpts.config.settings,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-comment">// 收集 Gather，生成结果集合 artifacts</span></span><br><span class="line">  <span class="hljs-keyword">const</span> artifacts = <span class="hljs-keyword">await</span> GatherRunner.run(</span><br><span class="line">    runnerOpts.config.passes,</span><br><span class="line">    gatherOpts</span><br><span class="line">  );</span><br><span class="line">  <span class="hljs-keyword">return</span> artifacts;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码的逻辑非常清晰，就是根据现有数据（artifacts），计算出结果数据（audits），生成报告。</p><h4 id="如何得到-artifacts-这些信息的呢？"><a href="#如何得到-artifacts-这些信息的呢？" class="headerlink" title="如何得到 artifacts 这些信息的呢？"></a>如何得到 artifacts 这些信息的呢？</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// gather-runner.js</span></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">run</span>(<span class="hljs-params">passConfigs, options</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> artifacts = &#123;&#125;;</span><br><span class="line">  <span class="hljs-keyword">const</span> driver = options.driver;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 和 Chrome 进行连接</span></span><br><span class="line">  <span class="hljs-keyword">await</span> driver.connect();</span><br><span class="line">  <span class="hljs-comment">// 加载个 about:blank 空白页面</span></span><br><span class="line">  <span class="hljs-keyword">await</span> GatherRunner.loadBlank(driver);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 创建 artifacts</span></span><br><span class="line">  <span class="hljs-comment">// 一些基础信息，比如userAgent、移动还是桌面emulate</span></span><br><span class="line">  <span class="hljs-keyword">const</span> baseArtifacts = <span class="hljs-keyword">await</span> GatherRunner.initializeBaseArtifacts(options);</span><br><span class="line">  <span class="hljs-comment">// 通过一定数量的字符串拼接计算出待测试驱动的性能</span></span><br><span class="line">  baseArtifacts.BenchmarkIndex = <span class="hljs-keyword">await</span> options.driver.getBenchmarkIndex();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 将环境配置好</span></span><br><span class="line">  <span class="hljs-keyword">await</span> GatherRunner.setupDriver(driver, options);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// passConfigs 就是 需要收集的Gather集合</span></span><br><span class="line">  <span class="hljs-comment">// runPass是一个很长的周期，真正开始做数据分析的方法</span></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> passConfig <span class="hljs-keyword">of</span> passConfigs) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> passContext = &#123;</span><br><span class="line">      driver,</span><br><span class="line">      url: options.requestedUrl,</span><br><span class="line">      settings: options.settings,</span><br><span class="line">      passConfig,</span><br><span class="line">      baseArtifacts,</span><br><span class="line">      LighthouseRunWarnings: baseArtifacts.LighthouseRunWarnings,</span><br><span class="line">    &#125;;</span><br><span class="line">    <span class="hljs-comment">// loadBlank =&gt; setupPassNetwork =&gt; cleanBrowserCaches</span></span><br><span class="line">    <span class="hljs-comment">// =&gt; beforePass // gather 对象对外暴露的接口</span></span><br><span class="line">    <span class="hljs-comment">// =&gt; beginRecording</span></span><br><span class="line">    <span class="hljs-comment">// =&gt; loadPage</span></span><br><span class="line">    <span class="hljs-comment">// =&gt; pass // gather 对象对外暴露的接口</span></span><br><span class="line">    <span class="hljs-comment">// =&gt; endRecording</span></span><br><span class="line">    <span class="hljs-comment">// =&gt; afterPass // gather 对象对外暴露的接口</span></span><br><span class="line">    <span class="hljs-comment">// =&gt; collectArtifacts</span></span><br><span class="line">    <span class="hljs-keyword">const</span> passResults = <span class="hljs-keyword">await</span> GatherRunner.runPass(passContext);</span><br><span class="line">    <span class="hljs-comment">// 将所有结果挂在 artifacts 对象上</span></span><br><span class="line">    <span class="hljs-built_in">Object</span>.assign(artifacts, passResults.artifacts);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> &#123; ...baseArtifacts, ...artifacts &#125;; <span class="hljs-comment">// Cast to drop Partial&lt;&gt;.</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Gatherer 基类</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Gatherer</span> </span>&#123;</span><br><span class="line">  get name() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.constructor.name;</span><br><span class="line">  &#125;</span><br><span class="line">  beforePass(passContext) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  pass(passContext) &#123;&#125;</span><br><span class="line"></span><br><span class="line">  afterPass(passContext, loadData) &#123;&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>runPass 是一个重要的生命周期，如果要给 Lighthouse 写自定义的扩展，必须要了解它。其实就是模拟人的行为，打开空网页（loadBlank），设置网络参数（setupPassNetwork），情况缓存（cleanBrowserCaches），beforePass（注入页面加载前注入脚本获取关键信息），beginRecording（页面加载前记录 devtoolsLog 和 trace），pass（页面加载中），endRecording（页面加载结束记录 devtoolsLog 和 trace），afterPass（页面加载结束注入脚本获取关键信息），collectArtifacts（收集相关信息）。其中，beforePass、pass 和 afterPass 在写自定义 gather 时可以注入脚本获取自己需要的信息的，非常有用。最后将收集的信息挂载到 artifacts 上。系统内置的信息收集类都在 lighthouse-core 下的 gather/gatherers 目录里。</p><p><img src="/images/lighthouse/gatherers.png" alt="gatherers"></p><p>以收集图片信息的 <code>ImageElements</code> 为例，它对外暴露了 afterPass 接口，是一个经典应用</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// image-elements.js</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageElements</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Gatherer</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">async</span> afterPass(passContext, loadData) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> driver = passContext.driver;</span><br><span class="line">    <span class="hljs-keyword">const</span> indexedNetworkRecords = loadData.networkRecords.reduce(</span><br><span class="line">      (map, record) =&gt; &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (</span><br><span class="line">          /^image/.test(record.mimeType) &amp;&amp;</span><br><span class="line">          record.finished &amp;&amp;</span><br><span class="line">          record.statusCode === <span class="hljs-number">200</span></span><br><span class="line">        ) &#123;</span><br><span class="line">          map[record.url] = record;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="hljs-keyword">return</span> map;</span><br><span class="line">      &#125;</span><br><span class="line">    );</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> expression = <span class="hljs-string">`(function() &#123;</span></span><br><span class="line"><span class="hljs-string">      <span class="hljs-subst">$&#123;pageFunctions.getElementsInDocumentString&#125;</span>; // define function on page</span></span><br><span class="line"><span class="hljs-string">      <span class="hljs-subst">$&#123;getClientRect.toString()&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">      <span class="hljs-subst">$&#123;getHTMLImages.toString()&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">      <span class="hljs-subst">$&#123;getCSSImages.toString()&#125;</span>;</span></span><br><span class="line"><span class="hljs-string">      <span class="hljs-subst">$&#123;collectImageElementInfo.toString()&#125;</span>;</span></span><br><span class="line"><span class="hljs-string"></span></span><br><span class="line"><span class="hljs-string">      return collectImageElementInfo();</span></span><br><span class="line"><span class="hljs-string">    &#125;)()`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> elements = <span class="hljs-keyword">await</span> driver.evaluateAsync(expression);</span><br><span class="line">    <span class="hljs-keyword">const</span> top50Images = <span class="hljs-built_in">Object</span>.values(indexedNetworkRecords)</span><br><span class="line">      .sort(<span class="hljs-function">(<span class="hljs-params">a, b</span>) =&gt;</span> b.resourceSize - a.resourceSize)</span><br><span class="line">      .slice(<span class="hljs-number">0</span>, <span class="hljs-number">50</span>);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> imageUsage = [];</span><br><span class="line">    <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> element <span class="hljs-keyword">of</span> elements) &#123;</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">      <span class="hljs-comment">// 在Chrome注入并执行 determineNaturalSize 方法，获取图片的原始宽和高</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> imageUsage;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">determineNaturalSize</span>(<span class="hljs-params">url</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> img = <span class="hljs-keyword">new</span> Image();</span><br><span class="line">    img.addEventListener(<span class="hljs-string">"error"</span>, (_) =&gt;</span><br><span class="line">      reject(<span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"determineNaturalSize failed img load"</span>))</span><br><span class="line">    );</span><br><span class="line">    img.addEventListener(<span class="hljs-string">"load"</span>, () =&gt; &#123;</span><br><span class="line">      resolve(&#123;</span><br><span class="line">        naturalWidth: img.naturalWidth,</span><br><span class="line">        naturalHeight: img.naturalHeight,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    img.src = url;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所有 afterPass 方法是在页面加载完后执行的，所以会比 beforePass 多一个<code>loadData</code>参数，记录了网络加载的数据，比如，图片。</p><p>在 ImageElements 中</p><ul><li>先找出所有正常加载的图片</li><li>expression，定义一个闭包，将相关需要用到的方法通过字符串的形式拼接起来，再用 driver.evaluateAsync 将它们注入到 Chrome, 并执行</li><li>按照尺寸大小排序，获取最大的前 50 个图片信息</li><li>elements 和 top50Images，进行相关的逻辑处理获取图片的原始尺寸，最后返回结果集 imageUsage</li></ul><p><strong>从上述代码我们可以知道，将 JavaScript 方法通过 <code>driver.evaluateAsync</code> 注入到 Chrome 里并执行，收集页面的信息。</strong></p><h4 id="有了信息，该如何计算呢？"><a href="#有了信息，该如何计算呢？" class="headerlink" title="有了信息，该如何计算呢？"></a>有了信息，该如何计算呢？</h4><p>系统内置的计算类都在 lighthouse-core 下的 audits 目录里。整体的流程和 gather 很像，都是遍历配置里的集合，然后触发暴露的方法（此处是 audit）,然后合并输出，大概过程如下。</p><p><img src="/images/lighthouse/audits.png" alt="audits"></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// 接上面 lighthouse-core/index.js 里的</span></span><br><span class="line"><span class="hljs-keyword">const</span> auditResults = <span class="hljs-keyword">await</span> Runner._runAudits(</span><br><span class="line">  settings,</span><br><span class="line">  runOpts.config.audits,</span><br><span class="line">  artifacts, <span class="hljs-comment">// 之前收集的信息</span></span><br><span class="line">  lighthouseRunWarnings</span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> _runAudits(<span class="hljs-params">settings, audits, artifacts, runWarnings</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 迭代配置里生成的audits对象集合</span></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">const</span> auditDefn <span class="hljs-keyword">of</span> audits) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> auditResult = <span class="hljs-keyword">await</span> Runner._runAudit(</span><br><span class="line">      auditDefn,</span><br><span class="line">      artifacts,</span><br><span class="line">      sharedAuditContext,</span><br><span class="line">      runWarnings</span><br><span class="line">    );</span><br><span class="line">    auditResults.push(auditResult);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">return</span> auditResults;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">function</span> _runAudit(<span class="hljs-params"></span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  auditDefn,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  artifacts,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  sharedAuditContext,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  runWarnings</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> audit = auditDefn.implementation;</span><br><span class="line">  <span class="hljs-keyword">let</span> auditResult;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> auditOptions = <span class="hljs-built_in">Object</span>.assign(</span><br><span class="line">    &#123;&#125;,</span><br><span class="line">    audit.defaultOptions,</span><br><span class="line">    auditDefn.options</span><br><span class="line">  );</span><br><span class="line">  <span class="hljs-keyword">const</span> auditContext = &#123;</span><br><span class="line">    options: auditOptions,</span><br><span class="line">    ...sharedAuditContext,</span><br><span class="line">  &#125;;</span><br><span class="line">  <span class="hljs-comment">// 调用 audit 方法</span></span><br><span class="line">  <span class="hljs-keyword">const</span> product = <span class="hljs-keyword">await</span> audit.audit(narrowedArtifacts, auditContext);</span><br><span class="line"></span><br><span class="line">  auditResult = Audit.generateAuditResult(audit, product);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> auditResult;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Audit</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Audit 基类内容比较多，主要对外暴露的是 audit 方法，子类必须重写</span></span><br><span class="line">  <span class="hljs-keyword">static</span> audit(artifacts, context) &#123;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"audit() method must be overriden"</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们依旧以图片的为例。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// /audits/image-size-responsive.js</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ImageSizeResponsive</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Audit</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">static</span> audit(artifacts) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> DPR = artifacts.ViewportDimensions.devicePixelRatio;</span><br><span class="line">    <span class="hljs-keyword">const</span> results = <span class="hljs-built_in">Array</span>.from(artifacts.ImageElements) <span class="hljs-comment">// 从 gather ImageElements里收集的信息</span></span><br><span class="line">      .filter(isCandidate) <span class="hljs-comment">// 过滤掉没用的图片</span></span><br><span class="line">      .filter(<span class="hljs-function"><span class="hljs-params">image</span> =&gt;</span> !imageHasRightSize(image, DPR)) <span class="hljs-comment">// 算出图片尺寸是否过大</span></span><br><span class="line">      .filter(</span><br><span class="line">        image =&gt; isVisible(image.clientRect, artifacts.ViewportDimensions) <span class="hljs-comment">// 算出图片是否在可是区域</span></span><br><span class="line">      )</span><br><span class="line">      .map(<span class="hljs-function"><span class="hljs-params">image</span> =&gt;</span> getResult(image, DPR)); <span class="hljs-comment">// 获取图片的相关信息，组成集合</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> headings = [</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">    ];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> finalResults = <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">      <span class="hljs-comment">// 如果集合中没有含有过大并且在可视区域的图片，那么为true</span></span><br><span class="line">      <span class="hljs-comment">// 之后，所有 audits 中的 score 为 true 将被累加其数量，并按照百分比算出相关得分</span></span><br><span class="line">      score: <span class="hljs-built_in">Number</span>(results.length === <span class="hljs-number">0</span>),</span><br><span class="line">      details: Audit.makeTableDetails(headings, finalResults)</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>gather 和 audit 是核心的流程和概念，上文我们已经简单的分析了整个代码，从 2 者的目录结构图也不难发现 audit 数量远远大于 gather，这也是为什么 2 者分开的重要原因，audit 通过 artifacts 去获取自己想要的数据再进行逻辑计算，增加了 gather 数据的复用性，和各自的扩展性，各个模块的测试也变得容易。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Lighthouse 是一个非常有用的前端性能评测工具，本文主要讲的基础概念，后续将介绍 puppeteer 的使用，如何利用 gather 和 audit 自定义性能监控指标。另外对内置的 gather 和 audit 研究也能极大争强自己对前端的认知，对 Driver 的学习能增加对 DevTools 和 Chrome 的新认知，非常值得深挖。</p>]]></content>
    
    <summary type="html">
    
      Lighthouse 是一个非常有用的前端性能评测工具，本文主要讲的基础概念，后续将介绍 puppeteer 的使用，如何利用 gather 和 audit 自定义性能监控指标。另外对内置的 gather 和 audit 研究也能极大争强自己对前端的认知，对 Driver 的学习能增加对 DevTools 和 Chrome 的新认知，非常值得深挖
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
      <category term="性能监控" scheme="https://mlib.wang/tags/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    
      <category term="Web" scheme="https://mlib.wang/tags/Web/"/>
    
  </entry>
  
  <entry>
    <title>Node.js服务支持多SSR版本</title>
    <link href="https://mlib.wang/2020/06/29/node-gateway-ssr-multi-version/"/>
    <id>https://mlib.wang/2020/06/29/node-gateway-ssr-multi-version/</id>
    <published>2020-06-29T06:59:30.000Z</published>
    <updated>2020-11-05T03:45:46.428Z</updated>
    
    <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h3><p>通常，系统环境分为生产、测试和开发等多套，测试又可能因为验证不同的业务版本、BUG 部署 N 套， 意味着每套环境都会有一整套系统，从入口网关到大量的微服务节点，还有数据库等等。人力上需要有人去维护它们，无论是用于测试数还是系统的运维工作，每多一套系统都需要额外部署和购买大量资源，其中很多服务节点的版本是相同的，这都大大增加了成本。</p><p>为了解决这样的问题，我们可以通过网关路由的方式，比如测试环境，所有的应用都部署在一套环境中，通过 HTTP Header 信息将不同的应用通过路由串联起来，大概如下：</p><p>Server A V1 -&gt; Server B V1</p><p>Server A V2 -&gt; Server B 其它版本</p><a id="more"></a><p><br></p><h3 id="前端资源怎么区分多版本"><a href="#前端资源怎么区分多版本" class="headerlink" title="前端资源怎么区分多版本"></a>前端资源怎么区分多版本</h3><p><strong>这里的 SSR 服务，基本是移动端的 hybrid 应用，所以在 Native 打开它时可以在 HTTP Header 注入版本信息，如果 PC 端，可以通过其它方式告诉服务器需要路由的版本，比如 URL Query 或 Cookie 之类</strong></p><ol><li>前置一个网关应用，在收到版本信息后，路由到 SSR 服务</li></ol><p>优点：</p><ul><li>无需改变当前的 SSR 服务</li></ul><p>缺点：</p><ul><li>作为 SSR 服务，其本身已经是一个网关，再前置一个网关有些奇怪</li><li>每部署一个 SSR 服务节点，可能就需要更新前置网关的配置，需要 2 步操作</li><li>需要多个 Docker 部署不同版本的 SSR 服务</li></ul><ol start="2"><li>改造 SSR 服务，收到 HTTP Header 版本信息后，在内部做版本的路由</li></ol><p>优点：</p><ul><li>一个 SSR 应用，就一个 Docker</li><li>只要告诉一个应用（SSR）当前有哪些是需要使用的版本即可</li></ul><p>缺点：</p><ul><li>市面上大部分的 SSR 框架都是对应一个 SSR 版本的，不存在多版本并行，需要一定的开发和维护</li></ul><p><strong>综合考虑，既然是为了节省整体成本，那就彻底点，选择了第二个方案，一劳永逸。</strong></p><p><br></p><h3 id="改造-SSR-服务"><a href="#改造-SSR-服务" class="headerlink" title="改造 SSR 服务"></a>改造 SSR 服务</h3><h4 id="CI-CD-阶段"><a href="#CI-CD-阶段" class="headerlink" title="CI\CD 阶段"></a>CI\CD 阶段</h4><p>打包客户端和服务器资源，上传到静态服务器上，其中包含重要的 client-manifest.json 和 server-manifest.json，两者记录的是资源的名称和其对应的资源访问路径，client-manifest.json 用于在服务渲染时候根据资源名插入指定的访问路径，server-manifest.json 用于将资源从静态服务器下载到 Node.js 服务器上，用于 SSR 用。</p><h4 id="启动和运行阶段"><a href="#启动和运行阶段" class="headerlink" title="启动和运行阶段"></a>启动和运行阶段</h4><ul><li>访问配置中心，找到该应用的部署版本，比如 [‘v1,’v2’]</li><li>与本地版本做 diff 算法，算出新增和遗弃的版本</li><li>拉去新版本的 SSR 文件到本地磁盘</li><li>路由解析，因为内部的 SSR 技术被广泛应用，为了不改动代码，通过@babel/parser 和 @babel/traverse 这两个类库，先将代码转成 AST，再解析出路由信息</li><li>移除本地遗弃的 SSR 文件</li><li>将新的路由信息更新到路由表中</li><li>定时执行上述步骤</li></ul><p>我们用的是 Egg.js，所以上述步骤在 Agent 中完成，再广播给所有 Worker 进程。另外，为了更好的迭代和任务划分，使用<a href="https://mlib.wang/plugboard/?s=blog">PlugBoard</a>插件化所有步骤。</p><p><img src="/images/node-gateway-ssr-multi-version/arch.png" alt="架构"></p><p>客户端发起访问，找到对应的路由版本（如果没有走默认路由），路由请求，有缓存直接输出，没有就走 SSR 流程，查找该版本的 client-manifest.json，找到对应的浏览器访问路径，返回给客户端。</p><p>至此，整个方案的流程完毕。项目上线后，可以通过关闭多版本共存的参数，按照市面上的常规流程运行应用。如果小团队的运维体系薄弱（没有 K8S 之类运维系统），也能用该套方案实现一定的蓝绿发布等。</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;背景&quot;&gt;&lt;a href=&quot;#背景&quot; class=&quot;headerlink&quot; title=&quot;背景&quot;&gt;&lt;/a&gt;背景&lt;/h3&gt;&lt;p&gt;通常，系统环境分为生产、测试和开发等多套，测试又可能因为验证不同的业务版本、BUG 部署 N 套， 意味着每套环境都会有一整套系统，从入口网关到大量的微服务节点，还有数据库等等。人力上需要有人去维护它们，无论是用于测试数还是系统的运维工作，每多一套系统都需要额外部署和购买大量资源，其中很多服务节点的版本是相同的，这都大大增加了成本。&lt;/p&gt;
&lt;p&gt;为了解决这样的问题，我们可以通过网关路由的方式，比如测试环境，所有的应用都部署在一套环境中，通过 HTTP Header 信息将不同的应用通过路由串联起来，大概如下：&lt;/p&gt;
&lt;p&gt;Server A V1 -&amp;gt; Server B V1&lt;/p&gt;
&lt;p&gt;Server A V2 -&amp;gt; Server B 其它版本&lt;/p&gt;
    
    </summary>
    
      <category term="架构" scheme="https://mlib.wang/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://mlib.wang/tags/%E6%9E%B6%E6%9E%84/"/>
    
  </entry>
  
  <entry>
    <title>Istio简单概念</title>
    <link href="https://mlib.wang/2020/06/28/nodejs-istio-k8s-docker/"/>
    <id>https://mlib.wang/2020/06/28/nodejs-istio-k8s-docker/</id>
    <published>2020-06-28T02:00:00.000Z</published>
    <updated>2020-06-29T09:44:54.527Z</updated>
    
    <content type="html"><![CDATA[<p><em>文章中主要是一些概念，简单记录这段时间对 Istio 的学习。</em></p><p>对于全栈来说，学习 Istio 还是很有必要的，在此过程中还要学习 K8s、Docker 等基本的运维知识，那么在设计 BFF 层时候也会考虑到部署、扩容、金丝雀发布等问题，提升程序的健壮性。</p><h3 id="JavaScript-全栈"><a href="#JavaScript-全栈" class="headerlink" title="JavaScript 全栈"></a>JavaScript 全栈</h3><p>在 JavaScript 流行的今天，各种框架层出不穷，无论是学习前端的 3 架马车（React\Vue\Angular）、还是运用后端的 Node.js 框架（Express\Koa\Egg.js）等，最后你都会前后端通吃，它们被 JavaScript 这门语言串联在了一起，尤其是当你去翻阅大量前端使用的 CLI 工具源码的时候，几乎都有 Express 的影子，所以在 JavaScript 技术栈里，前后端（这里的后端不是指复杂的后端架构和设计）本身并不分家。<em>当然复杂的后端或前端工作并不适合全栈工程师去做，那也是后话了。</em></p><p><br></p><h3 id="BFF-层"><a href="#BFF-层" class="headerlink" title="BFF 层"></a>BFF 层</h3><p>这些年来提出了 BFF 层的概念，根据业务的不同，不同公司有自己的设计和实现，比如将纯前端从 Nginx 移到了 Node.js Server 运行环境、服务端渲染（SSR）、生成或者拼接业务数据返回给前端使用（Node.js 微服务、GraphQL 等）…</p><p><br></p><h3 id="Node-js-微服务"><a href="#Node-js-微服务" class="headerlink" title="Node.js 微服务"></a>Node.js 微服务</h3><p>自己也做过很长一段时间的全栈，用 Node.js 开发后端业务，把数据吐给前端，不需要等着后端同事返回数据或者来回沟通的烦恼。现在做后端必定会遇到微服务的概念，不同的微服务有自己的 SDK 等工具帮助完成相关的注册发现，大多数情况下它们对 Java 的支持度最好，Node.js 有时候并不友善，要完善你不得不去写一些代码，比如熔断、报警等等，也是带来大量的开发测试成本。如果不幸公司内部 Java 组选择了不支持 Node.js 的架构，那么简直是灾难。</p><p><strong>微服务的 SDK 基本上和网络通讯相关，下文的网络化可以解决这个问题。</strong></p><a id="more"></a><p><br></p><h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>手动拷贝代码到服务器上 》 Docker 化 》 K8s</p><p>如果没有 K8s，只是 Docker 的话，部署过程还是很僵硬的。有了 K8s：</p><ul><li>自动化的容器部署</li><li>按需扩展、收缩和替换</li><li>Docker 之间的负载均衡</li><li>轻松升级版本和一键回滚</li><li>认证</li><li>服务的发现</li><li>基础的服务监控和监控检查</li><li>…</li></ul><p>K8s 可以相对轻松地管理成千上万的微服务，但是正如前面提到，因为微服务的语言不通，导致不通微服务在网络层面的功能完整性是不同的（SDK 的支持度不同），产生木桶效应。为了避免这个效应要么增加人员投入到不完善的 SDK 开发当中保持其迭代和稳定，要么聚集大量支持度较高的 SDK 开发者去完成业务工作。其实这个都是在浪费人力资源。</p><p><br></p><h3 id="网格化"><a href="#网格化" class="headerlink" title="网格化"></a>网格化</h3><p>网格化增加了服务之间通信的便捷性，解决了微服务不同语言 SDK 的差异问题，每个微服务只要聚焦自身的业务而不再需要关心服务之间的熔断、报警等问题。</p><p>Istio 构建在 K8s 之上，是网格化概念的一个实现，我就以它为例。</p><p><img src="/images/nodejs-istio-k8s-docker/arch.jpg" alt="Istio 架构"></p><p>服务 A 和服务 B 并不直接通信，而是通过代理的方式，这个代理基本上支持 HTTP/1.1、HTTP/2、gRPC 或 TCP 等协议。</p><h4 id="Envoy"><a href="#Envoy" class="headerlink" title="Envoy"></a>Envoy</h4><p>在 Istio 中默认使用<strong>Envoy</strong>作为这个代理的实现，我们称之为 Sidecar，把微服务网络通信的 SDK 抽取出来，统一交给这个 Sidecar 管理控制。</p><p>主要的功能：</p><ul><li>HTTP 7 层路由</li><li>支持多种通信协议</li><li>服务发现和动态配置</li><li>健康检查</li><li>高级负载均衡</li><li>将流量行为和数据提取，转发给 Mixer 组件</li></ul><p>原理，K8s 环境中，同一个 Pod 内的不同容器间共享网络栈，使得 Sidecar 可以接管进出这个容器的网络流量。</p><h4 id="Pilot"><a href="#Pilot" class="headerlink" title="Pilot"></a>Pilot</h4><p>配置和管理 Envoy 代理，比如流量规则、超时、熔断等，将这些信息通过通过 API 转我 Envoy 理解的格式，并广播给它们。</p><h4 id="Mixer"><a href="#Mixer" class="headerlink" title="Mixer"></a>Mixer</h4><p>Envoy 通信时候，都会向 Mixer 发出预检请求，验证行为的有效性、上报数据等，为了提高性能可以使用缓存和异步提交数据。</p><p>主要功能：</p><ul><li>策略：Istio 依仗该功能实现限流、黑白名单等功能</li><li>遥测：Istio 通过它收集所有的流量数据</li></ul><h4 id="Citadel"><a href="#Citadel" class="headerlink" title="Citadel"></a>Citadel</h4><p>身份和证书管理</p><h4 id="Galley"><a href="#Galley" class="headerlink" title="Galley"></a>Galley</h4><p>Galley 是 Istio 的配置验证、提取、处理和分发组件。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>官方 <a href="https://istio.io/latest/zh/docs/examples/bookinfo/" target="_blank" rel="noopener">Bookinfo 应用</a>，它由 Python、Java、Ruby、Node.js，4 种语言框架组成。实例中实现了多版本切换、金丝雀发布等等。各个模块只要专注在自己的业务领域，不需要关心网络控制。</p><p><img src="/images/nodejs-istio-k8s-docker/book-app.png" alt="Bookinfo 应用 架构"></p><p>网格化逐渐成为未来趋势，很多大厂在对内部系统做大量改造和升级，作为全栈工程师和架构师来说也需要紧跟时代的步伐。</p>]]></content>
    
    <summary type="html">
    
      学Istio必定要学习K8s Docker等基本的运维知识，那么在设计一个BFF层的时候必定会考虑到是不是符合它们的设计哲学，是否是一个方便维护的应用 某个节点压力大的时候该怎么办 某个节点出现问题该怎么排查等等
    
    </summary>
    
      <category term="架构" scheme="https://mlib.wang/categories/%E6%9E%B6%E6%9E%84/"/>
    
    
      <category term="架构" scheme="https://mlib.wang/tags/%E6%9E%B6%E6%9E%84/"/>
    
      <category term="运维" scheme="https://mlib.wang/tags/%E8%BF%90%E7%BB%B4/"/>
    
  </entry>
  
  <entry>
    <title>简单梳理Node.js创建子进程的方法（下）—— cluster</title>
    <link href="https://mlib.wang/2020/05/03/node-js-net-cluster-fork/"/>
    <id>https://mlib.wang/2020/05/03/node-js-net-cluster-fork/</id>
    <published>2020-05-03T07:24:53.000Z</published>
    <updated>2020-05-05T07:28:46.467Z</updated>
    
    <content type="html"><![CDATA[<p>前文简单梳理了Node.js使用<strong>child_process</strong>模块创建子进程的4种方法，<code>exec</code>、<code>execFile</code>、<code>fork</code>和<code>spawn</code>。接下来我们看看<strong>cluster</strong>模块如何创建子进程，后续更多内容会介绍cluster.fork启动Net Server时候为何不会因为共同监听同一个端口而不报错。</p><p><strong>cluster</strong></p><ul><li><a href="http://nodejs.cn/api/cluster.html#cluster_cluster_fork_env" target="_blank" rel="noopener">fork</a>: 衍生出一个新的工作进程，这只能通过主进程调用。</li></ul><a id="more"></a><p><br></p><p><strong>翻翻源码看看他们怎么实现的</strong></p><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// libuv</span><br><span class="line"><span class="hljs-section">#define UV_VERSION_MAJOR 1</span></span><br><span class="line"><span class="hljs-section">#define UV_VERSION_MINOR 33</span></span><br><span class="line"><span class="hljs-section">#define UV_VERSION_PATCH 1</span></span><br><span class="line"></span><br><span class="line">// V8</span><br><span class="line"><span class="hljs-section">#define V8_MAJOR_VERSION 7</span></span><br><span class="line"><span class="hljs-section">#define V8_MINOR_VERSION 8</span></span><br><span class="line"><span class="hljs-section">#define V8_BUILD_NUMBER 279</span></span><br><span class="line"><span class="hljs-section">#define V8_PATCH_LEVEL 17</span></span><br><span class="line"></span><br><span class="line">// Node.js</span><br><span class="line"><span class="hljs-section">#define NODE_MAJOR_VERSION 14</span></span><br><span class="line"><span class="hljs-section">#define NODE_MINOR_VERSION 0</span></span><br><span class="line"><span class="hljs-section">#define NODE_PATCH_VERSION 0</span></span><br></pre></td></tr></table></figure><p><strong>cluster</strong>源码位置</p><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">lib</span><br><span class="line">  - internal</span><br><span class="line"><span class="hljs-code">    - cluster</span></span><br><span class="line"><span class="hljs-code">    - child.js</span></span><br><span class="line"><span class="hljs-code">      - master.js</span></span><br><span class="line"><span class="hljs-code">      - round_robin_handle.js</span></span><br><span class="line"><span class="hljs-code">      - shared_handle.js</span></span><br><span class="line"><span class="hljs-code">      - utils.js</span></span><br><span class="line"><span class="hljs-code">      - worker.js</span></span><br><span class="line">  - cluster.js</span><br></pre></td></tr></table></figure><p><br></p><p><strong>官方示例</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> cluster = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cluster'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> http = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> numCPUs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'os'</span>).cpus().length;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">if</span> (cluster.isMaster) &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`主进程 <span class="hljs-subst">$&#123;process.pid&#125;</span> 正在运行`</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 衍生工作进程。</span></span><br><span class="line">  <span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; numCPUs; i++) &#123;</span><br><span class="line">    cluster.fork();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  cluster.on(<span class="hljs-string">'exit'</span>, (worker, code, signal) =&gt; &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`工作进程 <span class="hljs-subst">$&#123;worker.process.pid&#125;</span> 已退出`</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 工作进程可以共享任何 TCP 连接。</span></span><br><span class="line">  <span class="hljs-comment">// 在本例子中，共享的是 HTTP 服务器。</span></span><br><span class="line">  http.createServer(<span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">    res.writeHead(<span class="hljs-number">200</span>);</span><br><span class="line">    res.end(<span class="hljs-string">'你好世界\n'</span>);</span><br><span class="line">  &#125;).listen(<span class="hljs-number">8000</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">`工作进程 <span class="hljs-subst">$&#123;process.pid&#125;</span> 已启动`</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><br></p><h3 id="Q-cluster-isMaster模块如何区分是主进程还是子进程的？"><a href="#Q-cluster-isMaster模块如何区分是主进程还是子进程的？" class="headerlink" title="Q:cluster.isMaster模块如何区分是主进程还是子进程的？"></a>Q:cluster.isMaster模块如何区分是主进程还是子进程的？</h3><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/cluster.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> childOrMaster = <span class="hljs-string">'NODE_UNIQUE_ID'</span> <span class="hljs-keyword">in</span> process.env ? <span class="hljs-string">'child'</span> : <span class="hljs-string">'master'</span>;</span><br><span class="line"><span class="hljs-built_in">module</span>.exports = <span class="hljs-built_in">require</span>(<span class="hljs-string">`internal/cluster/<span class="hljs-subst">$&#123;childOrMaster&#125;</span>`</span>);</span><br></pre></td></tr></table></figure><p><code>lib/cluster.js</code>是整个cluster的入口，根据环境变量中是否有<code>NODE_UNIQUE_ID</code>来区分主或子进程。</p><p>主进程通过<code>cluster.fork</code>创建子进程的时候，会将<code>NODE_UNIQUE_ID</code>传入子进程的环境变量中，最后通过<strong>child_process.fork</strong>去创建新的子进程。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/internal/cluster/master.js</span></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">cluster.isMaster = <span class="hljs-literal">true</span>;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line"><span class="hljs-comment">// fork的代码下文还会提到</span></span><br><span class="line"><span class="hljs-keyword">const</span> workerEnv = &#123; ...process.env, ...env, <span class="hljs-attr">NODE_UNIQUE_ID</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span>`</span> &#125;;</span><br><span class="line"><span class="hljs-keyword">return</span> fork(cluster.settings.exec, cluster.settings.args, &#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  env: workerEnv,</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// lib/internal/cluster/child.js</span></span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">cluster.isMaster = <span class="hljs-literal">false</span>;</span><br></pre></td></tr></table></figure><h3 id="Q-cluster-fork创建子进程过程中做了些什么？"><a href="#Q-cluster-fork创建子进程过程中做了些什么？" class="headerlink" title="Q:cluster.fork创建子进程过程中做了些什么？"></a>Q:cluster.fork创建子进程过程中做了些什么？</h3><p><code>cluster.setupMaster</code>是对整个环境参数的配置；</p><p>通过<code>createWorkerProcess</code>里的<code>child_process.fork</code>去创建子进程；</p><p>之后将其和一个<code>Worker</code>对象做关联，worker、其子进程和当前cluster(master)都会收到几乎相同的<code>message</code>、<code>exit</code>和<code>disconnect</code>事件，<strong>Worker</strong>这边不多扩展，可以查阅<code>lib/internal/cluster/worker.js</code>；</p><p>子进程会监听<code>internalMessage</code>事件，什么是internalMessage事件呢？看看下面官方的介绍。</p><blockquote><p>当发送 <strong>{cmd: ‘NODE_foo’}</strong> 消息时有一种特殊情况。 <strong>cmd</strong> 属性中包含 <strong>NODE_</strong> 前缀的消息是预留给 Node.js 内核内部使用的，将不会触发子进程的 <strong>‘message’</strong>事件。 相反，这种消息可使用 <strong>‘internalMessage’</strong> 事件触发，且会被 Node.js 内部消费。 应用程序应避免使用此类消息或监听<strong>‘internalMessage’</strong> 事件，因为它可能会被更改且不会通知。</p></blockquote><p>此处<code>internalMessage</code>事件的回调方法是<code>internal(worker, onmessage)</code>，<strong>internal</strong>是<code>lib/internal/cluster/master.js</code>里的方法，主要作用是判断监听的消息里面是否存在需要执行的回调，如果没有就会执行入参回调，这里指的是<strong>onmessage</strong>；</p><p><strong>onmessage</strong>里面有很多if-else语句，主要是根据cluster.child传送进来的消息类型(<code>act</code>)做出不同的处理，这里列出了一个<code>queryServer</code>（因为后面会介绍Net Server里多个子进程如何监听同一个端口的）。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/internal/cluster/master.js</span></span><br><span class="line">cluster.fork = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">env</span>) </span>&#123;</span><br><span class="line">  cluster.setupMaster();</span><br><span class="line">  <span class="hljs-keyword">const</span> id = ++ids;</span><br><span class="line">  <span class="hljs-comment">// 创建子进程</span></span><br><span class="line">  <span class="hljs-keyword">const</span> workerProcess = createWorkerProcess(id, env);</span><br><span class="line">  <span class="hljs-comment">//</span></span><br><span class="line">  <span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">new</span> Worker(&#123;</span><br><span class="line">    id: id,</span><br><span class="line">    process: workerProcess, <span class="hljs-comment">// 新建的子进程</span></span><br><span class="line">  &#125;);</span><br><span class="line">  </span><br><span class="line">  worker.on(<span class="hljs-string">"message"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">message, handle</span>) </span>&#123;</span><br><span class="line">    cluster.emit(<span class="hljs-string">"message"</span>, <span class="hljs-keyword">this</span>, message, handle);</span><br><span class="line">  &#125;);</span><br><span class="line">  worker.process.once(<span class="hljs-string">"exit"</span>, (exitCode, signalCode) =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    worker.state = <span class="hljs-string">"dead"</span>;</span><br><span class="line">    worker.emit(<span class="hljs-string">"exit"</span>, exitCode, signalCode);</span><br><span class="line">    cluster.emit(<span class="hljs-string">"exit"</span>, worker, exitCode, signalCode);</span><br><span class="line">  &#125;);</span><br><span class="line">  worker.process.once(<span class="hljs-string">"disconnect"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    worker.state = <span class="hljs-string">"disconnected"</span>;</span><br><span class="line">    worker.emit(<span class="hljs-string">"disconnect"</span>);</span><br><span class="line">    cluster.emit(<span class="hljs-string">"disconnect"</span>, worker);</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  worker.process.on(<span class="hljs-string">"internalMessage"</span>, internal(worker, onmessage));</span><br><span class="line">  <span class="hljs-comment">// 触发 fork 事件</span></span><br><span class="line">  process.nextTick(emitForkNT, worker);</span><br><span class="line">  cluster.workers[worker.id] = worker; </span><br><span class="line">  <span class="hljs-keyword">return</span> worker;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createWorkerProcess</span>(<span class="hljs-params">id, env</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> workerEnv = &#123; ...process.env, ...env, <span class="hljs-attr">NODE_UNIQUE_ID</span>: <span class="hljs-string">`<span class="hljs-subst">$&#123;id&#125;</span>`</span> &#125;;</span><br><span class="line">  <span class="hljs-comment">// ... 对一些参数的组合和设定</span></span><br><span class="line">  <span class="hljs-comment">// 调用child_process的fork方法创建子进程</span></span><br><span class="line">  <span class="hljs-keyword">return</span> fork(cluster.settings.exec, cluster.settings.args, &#123;</span><br><span class="line">    cwd: cluster.settings.cwd,</span><br><span class="line">    env: workerEnv,</span><br><span class="line">    silent: cluster.settings.silent,</span><br><span class="line">    windowsHide: cluster.settings.windowsHide,</span><br><span class="line">    execArgv: execArgv,</span><br><span class="line">    stdio: cluster.settings.stdio,</span><br><span class="line">    gid: cluster.settings.gid,</span><br><span class="line">    uid: cluster.settings.uid,</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onmessage</span>(<span class="hljs-params">message, handle</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">this</span>;</span><br><span class="line">  <span class="hljs-comment">// ... if message.act 类型很多 这里主要讲 queryServer</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (message.act === <span class="hljs-string">"queryServer"</span>) queryServer(worker, message);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/internal/cluster/utils.js</span></span><br><span class="line"><span class="hljs-comment">// 在cluster的chilid和master里的send都会调用sendHelper</span></span><br><span class="line"><span class="hljs-keyword">let</span> seq = <span class="hljs-number">0</span>;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">sendHelper</span>(<span class="hljs-params">proc, message, handle, cb</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (!proc.connected) <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;</span><br><span class="line">  <span class="hljs-comment">// NODE_* 开头的命令触发 internalMessage </span></span><br><span class="line">  message = &#123; <span class="hljs-attr">cmd</span>: <span class="hljs-string">"NODE_CLUSTER"</span>, ...message, seq &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> cb === <span class="hljs-string">"function"</span>) callbacks.set(seq, cb); <span class="hljs-comment">// 缓存回调</span></span><br><span class="line"></span><br><span class="line">  seq += <span class="hljs-number">1</span>;</span><br><span class="line">  <span class="hljs-comment">// cluster/child.js handle =&gt; null</span></span><br><span class="line">  <span class="hljs-comment">// cluster/master.js handle =&gt; null</span></span><br><span class="line">  <span class="hljs-keyword">return</span> proc.send(message, handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上就是cluster.fork的大致过程，引入一个Worker和internalMessage概念，之后会用得到。cluster的child和master之间传输信息，都是通过<code>sendHelper</code>方法。</p><h3 id="Q-cluster-fork创建的子进程如何共同监听TCP端口？"><a href="#Q-cluster-fork创建的子进程如何共同监听TCP端口？" class="headerlink" title="Q:cluster.fork创建的子进程如何共同监听TCP端口？"></a>Q:cluster.fork创建的子进程如何共同监听TCP端口？</h3><p>解答这个问题，主要是看<code>net</code>模块如何创建Server的，还有就是cluster中<code>child</code>和<code>master</code>如何通信的。</p><p>官方示例虽然用的是<code>http</code>创建的服务，但它底层是继承的<code>net</code>模块，为了方便梳理，我们从<code>net.createServer</code>入手一步步查看源码，主要的逻辑从<code>listen</code>开始。</p><h4 id="Child部分"><a href="#Child部分" class="headerlink" title="Child部分:"></a>Child部分:</h4><p>cluster.child里创建一个TCP服务，参数<code>port</code>是8000，<code>host</code>没有传参；</p><p>调用<code>listenInCluster</code>方法，一看这名字就知道和<strong>cluster</strong>有关；</p><p><code>listen</code>是在子进程里触发的，它会通过<code>cluster._getServer</code>拼出一个<code>act</code>为serverQuery的消息发送给cluster.master；</p><h4 id="Master部分"><a href="#Master部分" class="headerlink" title="Master部分:"></a>Master部分:</h4><p>前文提到，<code>master.onmessage</code>方法会根据消息的act不同而做出不同的处理，此处正是<code>serverQuery</code>；</p><p>进入<code>queryServer</code>方法，默认使用<code>RoundRobinHandle</code>循环分配任务；</p><p>在<code>RoundRobinHandle</code>构造函数中，会调用<code>net.createServer</code>创建一个Server，由于是在cluster.master里调用的，所以会在<code>listenInCluster</code>里调用<code>server._listen2</code>，会new 出 <code>TCP</code>（src/tcp_wrap.cc）作为句柄，并将其赋给<code>server._handle</code>，至此cluster.master已经拥有了处理TCP请求的能力，不过master有该能力是不行的，还需要让child拥有才行；</p><p><code>RoundRobinHandle</code>中一旦server触发了<code>listening</code>事件后，它会接管<code>server._handle</code>，用<code>distribute</code>重置其<code>onconnection</code>方法；</p><p><code>distribute</code>的作用就是转发新的请求TCP给cluster.child，从<code>free</code>列队中取出一个之前<code>add</code>进来的worker（这个worker和cluster.child有关联关系），发送一个<code>act</code>为<strong>newconn</strong>的消息让其处理这个TCP；</p><h4 id="回到Child部分"><a href="#回到Child部分" class="headerlink" title="回到Child部分:"></a>回到Child部分:</h4><p>cluster.child的<code>onconnection</code>收到<code>act</code>为<strong>newconn</strong>的请求后，会找到之前的创建的server，然后调用其<code>onconnection</code>（child里的该方法没有被重置）方法，然后封装出一个<code>Socket</code>对象，触发<code>onnection</code>事件；</p><p>到此，后面的就是普通业务逻辑代码了。</p><p><em>下面贴上了部分相关代码，还是比较多的，细节部分我也加上了注释。</em></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/net.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createServer</span>(<span class="hljs-params">options, connectionListener</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Server(options, connectionListener);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Server</span>(<span class="hljs-params">options, connectionListener</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// ... 大量内置属性和参数的初始化</span></span><br><span class="line">&#125;</span><br><span class="line">Server.prototype.listen = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">...args</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  <span class="hljs-comment">// 传了port参数（8000），没有host</span></span><br><span class="line">  <span class="hljs-keyword">var</span> backlog;</span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options.port === <span class="hljs-string">"number"</span> || <span class="hljs-keyword">typeof</span> options.port === <span class="hljs-string">"string"</span>) &#123;</span><br><span class="line">    backlog = options.backlog || backlogFromArgs;</span><br><span class="line">    <span class="hljs-keyword">if</span> (options.host) &#123;</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      <span class="hljs-comment">// </span></span><br><span class="line">      listenInCluster(</span><br><span class="line">        <span class="hljs-keyword">this</span>,</span><br><span class="line">        <span class="hljs-literal">null</span>,</span><br><span class="line">        options.port | <span class="hljs-number">0</span>,</span><br><span class="line">        <span class="hljs-number">4</span>,</span><br><span class="line">        backlog,</span><br><span class="line">        <span class="hljs-literal">undefined</span>,</span><br><span class="line">        options.exclusive</span><br><span class="line">      );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;</span><br><span class="line">  &#125;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listenInCluster</span>(<span class="hljs-params"></span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  server,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  address,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  port,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  addressType,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  backlog,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  fd,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  exclusive,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">  flags</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  exclusive = !!exclusive;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (cluster === <span class="hljs-literal">undefined</span>) cluster = <span class="hljs-built_in">require</span>(<span class="hljs-string">"cluster"</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (cluster.isMaster || exclusive) &#123;</span><br><span class="line">    server._listen2(address, port, addressType, backlog, fd, flags);</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> serverQuery = &#123;</span><br><span class="line">    address: address,</span><br><span class="line">    port: port, </span><br><span class="line">    addressType: addressType,</span><br><span class="line">    fd: fd,</span><br><span class="line">    flags,</span><br><span class="line">  &#125;;</span><br><span class="line">  cluster._getServer(server, serverQuery, listenOnMasterHandle);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listenOnMasterHandle</span>(<span class="hljs-params">err, handle</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    server._handle = handle;</span><br><span class="line">    server._listen2(address, port, addressType, backlog, fd, flags);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/internal/cluster/child.js</span></span><br><span class="line">cluster._getServer = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">obj, options, cb</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> address = options.address;</span><br><span class="line"><span class="hljs-comment">// ...</span></span><br><span class="line">  <span class="hljs-comment">// 当前创建的server信息是否之前已经在cluster.child里查询过</span></span><br><span class="line">  <span class="hljs-comment">// 有的话就累加计数index值</span></span><br><span class="line">  <span class="hljs-keyword">const</span> indexesKey = [</span><br><span class="line">    address, </span><br><span class="line">    options.port,</span><br><span class="line">    options.addressType,</span><br><span class="line">    options.fd,</span><br><span class="line">  ].join(<span class="hljs-string">":"</span>); </span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">let</span> index = indexes.get(indexesKey);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (index === <span class="hljs-literal">undefined</span>) index = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">else</span> index++;</span><br><span class="line"></span><br><span class="line">  indexes.set(indexesKey, index);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> message = &#123;</span><br><span class="line">    act: <span class="hljs-string">"queryServer"</span>,</span><br><span class="line">    index,</span><br><span class="line">    data: <span class="hljs-literal">null</span>,</span><br><span class="line">    ...options,</span><br><span class="line">  &#125;;</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">  send(message, (reply, handle) =&gt; &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (handle) shared(reply, handle, indexesKey, cb);</span><br><span class="line">    <span class="hljs-comment">// Shared listen socket.</span></span><br><span class="line">    <span class="hljs-keyword">else</span> rr(reply, indexesKey, cb); <span class="hljs-comment">// Round-robin 返回的 handle 是null</span></span><br><span class="line">  &#125;);</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">rr</span>(<span class="hljs-params">message, indexesKey, cb</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (message.errno) <span class="hljs-keyword">return</span> cb(message.errno, <span class="hljs-literal">null</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">var</span> key = message.key;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listen</span>(<span class="hljs-params">backlog</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">close</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (key === <span class="hljs-literal">undefined</span>) <span class="hljs-keyword">return</span>;</span><br><span class="line">    send(&#123; <span class="hljs-attr">act</span>: <span class="hljs-string">"close"</span>, key &#125;);</span><br><span class="line">    handles.delete(key);</span><br><span class="line">    indexes.delete(indexesKey);</span><br><span class="line">    key = <span class="hljs-literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getsockname</span>(<span class="hljs-params">out</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (key) <span class="hljs-built_in">Object</span>.assign(out, message.sockname);</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> handle = &#123; close, listen, <span class="hljs-attr">ref</span>: noop, <span class="hljs-attr">unref</span>: noop &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (message.sockname) &#123;</span><br><span class="line">    handle.getsockname = getsockname; <span class="hljs-comment">// TCP handles only.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  assert(handles.has(key) === <span class="hljs-literal">false</span>);</span><br><span class="line">  handles.set(key, handle);</span><br><span class="line">  cb(<span class="hljs-number">0</span>, handle); <span class="hljs-comment">// 将封装好的handle，作为listenInCluster的回调handle，赋给server._handle</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// Round-robin connection.</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onconnection</span>(<span class="hljs-params">message, handle</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> key = message.key; <span class="hljs-comment">// maseter里的key</span></span><br><span class="line">  <span class="hljs-keyword">const</span> server = handles.get(key); <span class="hljs-comment">// 是client创建的server？</span></span><br><span class="line">  <span class="hljs-keyword">const</span> accepted = server !== <span class="hljs-literal">undefined</span>;</span><br><span class="line"></span><br><span class="line">  send(&#123; <span class="hljs-attr">ack</span>: message.seq, accepted &#125;); <span class="hljs-comment">// 答复 master</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 虽然cluster.child rr里没有为server绑定，onconnection</span></span><br><span class="line">  <span class="hljs-comment">// 但是在cb回到net.js里，后面的逻辑绑定了onconnection方法</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (accepted) server.onconnection(<span class="hljs-number">0</span>, handle);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/internal/cluster/master.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">queryServer</span>(<span class="hljs-params">worker, message</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// worker是cluster.child worker</span></span><br><span class="line">  <span class="hljs-keyword">const</span> key =</span><br><span class="line">    <span class="hljs-string">`<span class="hljs-subst">$&#123;message.address&#125;</span>:<span class="hljs-subst">$&#123;message.port&#125;</span>:<span class="hljs-subst">$&#123;message.addressType&#125;</span>:`</span> +</span><br><span class="line">    <span class="hljs-string">`<span class="hljs-subst">$&#123;message.fd&#125;</span>:<span class="hljs-subst">$&#123;message.index&#125;</span>`</span>;</span><br><span class="line">  <span class="hljs-keyword">var</span> handle = handles.get(key);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (handle === <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="hljs-comment">// 默认是RoundRobin，Shared模式暂不讨论有兴趣可以看源码</span></span><br><span class="line">    <span class="hljs-keyword">var</span> <span class="hljs-keyword">constructor</span> = RoundRobinHandle;</span><br><span class="line">    // ...</span><br><span class="line">    handle = new <span class="hljs-keyword">constructor</span>(</span><br><span class="line">      key,</span><br><span class="line">      address,</span><br><span class="line">      message.port,</span><br><span class="line">      message.addressType,</span><br><span class="line">      message.fd,</span><br><span class="line">      message.flags</span><br><span class="line">    );</span><br><span class="line">    handles.set(key, handle);</span><br><span class="line">  &#125;</span><br><span class="line">  // ...</span><br><span class="line">  // 将cluster.child的worker添加到handle中</span><br><span class="line">  handle.add(worker, (errno, reply, handle) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> &#123; data &#125; = handles.get(key);</span><br><span class="line">    send(</span><br><span class="line">      worker,</span><br><span class="line">      &#123;</span><br><span class="line">        errno,</span><br><span class="line">        key,</span><br><span class="line">        ack: message.seq,</span><br><span class="line">        data,</span><br><span class="line">        ...reply,</span><br><span class="line">      &#125;,</span><br><span class="line">      handle <span class="hljs-comment">// round_robin_handle 里返回的是一个null</span></span><br><span class="line">    );</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/internal/cluster/round_robin_handle.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">RoundRobinHandle</span>(<span class="hljs-params">key, address, port, addressType, fd, flags</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.key = key;</span><br><span class="line">  <span class="hljs-keyword">this</span>.all = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Map</span>();</span><br><span class="line">  <span class="hljs-keyword">this</span>.free = [];</span><br><span class="line">  <span class="hljs-keyword">this</span>.handles = [];</span><br><span class="line">  <span class="hljs-keyword">this</span>.handle = <span class="hljs-literal">null</span>;</span><br><span class="line">  <span class="hljs-keyword">this</span>.server = net.createServer(assert.fail);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (fd &gt;= <span class="hljs-number">0</span>) <span class="hljs-keyword">this</span>.server.listen(&#123; fd &#125;);</span><br><span class="line">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (port &gt;= <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.server.listen(&#123;</span><br><span class="line">      port,</span><br><span class="line">      host: address,</span><br><span class="line">      <span class="hljs-comment">// Currently, net module only supports `ipv6Only` option in `flags`.</span></span><br><span class="line">      ipv6Only: <span class="hljs-built_in">Boolean</span>(flags &amp; constants.UV_TCP_IPV6ONLY),</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">this</span>.server.listen(address); <span class="hljs-comment">// UNIX socket path.</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">this</span>.server.once(<span class="hljs-string">"listening"</span>, () =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.handle = <span class="hljs-keyword">this</span>.server._handle;</span><br><span class="line">    <span class="hljs-comment">// 重置onconnection方法</span></span><br><span class="line">    <span class="hljs-comment">// distribute 做任务派发</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.handle.onconnection = <span class="hljs-function">(<span class="hljs-params">err, handle</span>) =&gt;</span> <span class="hljs-keyword">this</span>.distribute(err, handle);</span><br><span class="line">    <span class="hljs-keyword">this</span>.server._handle = <span class="hljs-literal">null</span>;</span><br><span class="line">    <span class="hljs-keyword">this</span>.server = <span class="hljs-literal">null</span>;</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">RoundRobinHandle.prototype.add = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">worker, send</span>) </span>&#123;</span><br><span class="line">  assert(<span class="hljs-keyword">this</span>.all.has(worker.id) === <span class="hljs-literal">false</span>);</span><br><span class="line">  <span class="hljs-keyword">this</span>.all.set(worker.id, worker);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> done = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.handle.getsockname) &#123;</span><br><span class="line">      <span class="hljs-comment">// tcp\udp 会有getsockname</span></span><br><span class="line">      <span class="hljs-keyword">const</span> out = &#123;&#125;;</span><br><span class="line">      <span class="hljs-keyword">this</span>.handle.getsockname(out);</span><br><span class="line">      <span class="hljs-comment">// TODO(bnoordhuis) Check err.</span></span><br><span class="line">      send(<span class="hljs-literal">null</span>, &#123; <span class="hljs-attr">sockname</span>: out &#125;, <span class="hljs-literal">null</span>);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      send(<span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>, <span class="hljs-literal">null</span>); <span class="hljs-comment">// UNIX socket.</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.handoff(worker); <span class="hljs-comment">// In case there are connections pending.</span></span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.server === <span class="hljs-literal">null</span>) <span class="hljs-keyword">return</span> done();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Still busy binding.</span></span><br><span class="line">  <span class="hljs-keyword">this</span>.server.once(<span class="hljs-string">"listening"</span>, done);</span><br><span class="line">  <span class="hljs-keyword">this</span>.server.once(<span class="hljs-string">"error"</span>, (err) =&gt; &#123;</span><br><span class="line">    send(err.errno, <span class="hljs-literal">null</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RoundRobinHandle.prototype.distribute = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">err, handle</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">this</span>.handles.push(handle);</span><br><span class="line">  <span class="hljs-keyword">const</span> worker = <span class="hljs-keyword">this</span>.free.shift();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (worker) <span class="hljs-keyword">this</span>.handoff(worker);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">RoundRobinHandle.prototype.handoff = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">worker</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// worker如果不存在那就跳出</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.all.has(worker.id) === <span class="hljs-literal">false</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span>; <span class="hljs-comment">// Worker is closing (or has closed) the server.</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> handle = <span class="hljs-keyword">this</span>.handles.shift(); <span class="hljs-comment">// 取出第一个待处理任务</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (handle === <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.free.push(worker);  <span class="hljs-comment">// 没有的话就会将worker归还到free里</span></span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> message = &#123; <span class="hljs-attr">act</span>: <span class="hljs-string">"newconn"</span>, <span class="hljs-attr">key</span>: <span class="hljs-keyword">this</span>.key &#125;;</span><br><span class="line"></span><br><span class="line">  sendHelper(worker.process, message, handle, (reply) =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (reply.accepted) handle.close();</span><br><span class="line">    <span class="hljs-keyword">else</span> <span class="hljs-keyword">this</span>.distribute(<span class="hljs-number">0</span>, handle); <span class="hljs-comment">// Worker is shutting down. Send to another.</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.handoff(worker);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><code>cluster</code>利用child_process的fork方法创建子进程，并传入新的环境变量<code>NODE_UNIQUE_ID</code>用于区分主子进程从而在require(‘cluster’)时候可以加载到对应的<code>master.js</code>和<code>child.js</code>文件。另外在默认的<code>RoundRobinHandle</code>模式下，<code>cluster</code>子进程之所以可以共同监听同个TCP端口，是在<code>net</code>模块里面做了master和child区分，child并没有真正的监听端口，而是child会去master查询该Server是否已经存在，如果没有会在<code>RoundRobinHandle</code>中创建中创建server，一旦有新的TCP连接进入，会转发给<code>free</code>里的worker（cluster.child）处理。</p>]]></content>
    
    <summary type="html">
    
      在默认的RoundRobinHandle模式下，从上可以看出，cluster子进程之所以可以共同监听同个TCP端口，是在net模块里面做了master和child区分，child并没有真正的监听端口，而是child会去master查询该Server是否已经存在，如果没有会在RoundRobinHandle中创建中创建server，一旦有新的TCP连接进入，会转发给free里的worker（cluster.child）处理
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>简单梳理Node.js创建子进程的方法（上）</title>
    <link href="https://mlib.wang/2020/04/06/child_process-exec-fork-spawn/"/>
    <id>https://mlib.wang/2020/04/06/child_process-exec-fork-spawn/</id>
    <published>2020-04-06T00:09:36.472Z</published>
    <updated>2020-05-03T07:54:55.717Z</updated>
    
    <content type="html"><![CDATA[<p><strong>Node.js 创建子进程的方法常用的有如下几种：</strong></p><p><strong>child_process</strong></p><ul><li><a href="http://nodejs.cn/api/child_process.html#child_process_child_process_exec_command_options_callback" target="_blank" rel="noopener">exec</a>: 衍生一个 shell 然后在该 shell 中执行 <code>command</code>，并缓冲任何产生的输出，最大缓存 1024*1024 个字节。</li><li><a href="http://nodejs.cn/api/child_process.html#child_process_child_process_execfile_file_args_options_callback" target="_blank" rel="noopener">execFile</a>: 函数类似<code>exec</code>，但默认情况下不会衍生 shell。 相反，指定的可执行文件<code>file</code> 会作为新进程直接地衍生，使其比<code>exec</code> 稍微更高效。和<code>exec</code>一样，它也有最大 1024*1204 个字节的显示缓存。</li><li><a href="http://nodejs.cn/api/child_process.html#child_process_child_process_fork_modulepath_args_options" target="_blank" rel="noopener">fork</a>: 是 <code>spawn</code>的一个特例，专门用于衍生新的 Node.js 进程。 与<code>spawn</code>一样返回<code>ChildProcess</code>对象。 返回的<code>ChildProcess</code>将会内置一个额外的通信通道，允许消息在父进程和子进程之间来回传递。</li><li><a href="http://nodejs.cn/api/child_process.html#child_process_child_process_spawn_command_args_options" target="_blank" rel="noopener">spawn</a>: 上诉的几个方法其实都是通过 spawn 实现的。</li></ul><p><strong>cluster</strong></p><ul><li><a href="http://nodejs.cn/api/cluster.html#cluster_cluster_fork_env" target="_blank" rel="noopener">fork</a>: 衍生出一个新的工作进程，这只能通过主进程调用。</li></ul><a id="more"></a><p><br></p><h3 id="翻翻源码看看他们怎么实现的"><a href="#翻翻源码看看他们怎么实现的" class="headerlink" title="翻翻源码看看他们怎么实现的"></a><strong>翻翻源码看看他们怎么实现的</strong></h3><p>源码版本和之前的<a href="https://miser.github.io/2020/03/01/v8-libuv-timer-event-loop/" target="_blank" rel="noopener">libuv &amp; Node.js EventLoop （一）</a>一样</p><figure class="highlight markdown hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">// libuv</span><br><span class="line"><span class="hljs-section">#define UV_VERSION_MAJOR 1</span></span><br><span class="line"><span class="hljs-section">#define UV_VERSION_MINOR 33</span></span><br><span class="line"><span class="hljs-section">#define UV_VERSION_PATCH 1</span></span><br><span class="line"></span><br><span class="line">// V8</span><br><span class="line"><span class="hljs-section">#define V8_MAJOR_VERSION 7</span></span><br><span class="line"><span class="hljs-section">#define V8_MINOR_VERSION 8</span></span><br><span class="line"><span class="hljs-section">#define V8_BUILD_NUMBER 279</span></span><br><span class="line"><span class="hljs-section">#define V8_PATCH_LEVEL 17</span></span><br><span class="line"></span><br><span class="line">// Node.js</span><br><span class="line"><span class="hljs-section">#define NODE_MAJOR_VERSION 14</span></span><br><span class="line"><span class="hljs-section">#define NODE_MINOR_VERSION 0</span></span><br><span class="line"><span class="hljs-section">#define NODE_PATCH_VERSION 0</span></span><br></pre></td></tr></table></figure><p><strong>child_process</strong>源码位置</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Node </span><br><span class="line">  - lib </span><br><span class="line">  - internal </span><br><span class="line">  - child_process.js </span><br><span class="line">  - child_process.js;</span><br></pre></td></tr></table></figure><p>在<code>lib/child_process.js</code>文件中，定义了<code>exec</code>、<code>execFile</code>、<code>fork</code>和<code>spawn</code>等方法，它们最后都会调用在<code>lib/internal/child_process.js</code>文件中的<code>spawn</code>方法。</p><p><br></p><p><strong>exec</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/child_process.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exec</span>(<span class="hljs-params">command, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> opts = normalizeExecArgs(command, options, callback);</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-built_in">module</span>.exports.execFile(opts.file, opts.options, opts.callback);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">normalizeExecArgs</span>(<span class="hljs-params">command, options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options === <span class="hljs-string">"function"</span>) &#123;</span><br><span class="line">    callback = options;</span><br><span class="line">    options = <span class="hljs-literal">undefined</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Make a shallow copy so we don't clobber the user's options object.</span></span><br><span class="line">  options = &#123; ...options &#125;;</span><br><span class="line">  options.shell = <span class="hljs-keyword">typeof</span> options.shell === <span class="hljs-string">"string"</span> ? options.shell : <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">    file: command,</span><br><span class="line">    options: options,</span><br><span class="line">    callback: callback,</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面发现 exec 其实就是封装了参数，主要是开启<code>shell</code>参数，然后调用 execFile 方法。</p><p><br></p><p><strong>execFile</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/child_process.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execFile</span>(<span class="hljs-params">file <span class="hljs-regexp">/* , args, options, callback */</span></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> args = [];</span><br><span class="line">  <span class="hljs-keyword">let</span> callback;</span><br><span class="line">  <span class="hljs-keyword">let</span> options;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">  options = &#123;</span><br><span class="line">    encoding: <span class="hljs-string">"utf8"</span>,</span><br><span class="line">    timeout: <span class="hljs-number">0</span>,</span><br><span class="line">    maxBuffer: MAX_BUFFER,</span><br><span class="line">    killSignal: <span class="hljs-string">"SIGTERM"</span>,</span><br><span class="line">    cwd: <span class="hljs-literal">null</span>,</span><br><span class="line">    env: <span class="hljs-literal">null</span>,</span><br><span class="line">    shell: <span class="hljs-literal">false</span>, <span class="hljs-comment">// execFile 默认是不开启shell</span></span><br><span class="line">    ...options,</span><br><span class="line">  &#125;;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 通过spawn方法创建子进程</span></span><br><span class="line">  <span class="hljs-keyword">const</span> child = spawn(file, args, &#123;</span><br><span class="line">    cwd: options.cwd,</span><br><span class="line">    env: options.env,</span><br><span class="line">    gid: options.gid,</span><br><span class="line">    uid: options.uid,</span><br><span class="line">    shell: options.shell,</span><br><span class="line">    windowsHide: !!options.windowsHide,</span><br><span class="line">    windowsVerbatimArguments: !!options.windowsVerbatimArguments,</span><br><span class="line">  &#125;);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">var</span> encoding;</span><br><span class="line">  <span class="hljs-keyword">const</span> _stdout = []; <span class="hljs-comment">// 输出的内容</span></span><br><span class="line">  <span class="hljs-keyword">const</span> _stderr = []; <span class="hljs-comment">// 出错的内容</span></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  <span class="hljs-keyword">var</span> stdoutLen = <span class="hljs-number">0</span>; <span class="hljs-comment">// 输出内容的长度</span></span><br><span class="line">  <span class="hljs-keyword">var</span> stderrLen = <span class="hljs-number">0</span>; <span class="hljs-comment">// 出错内容的长度</span></span><br><span class="line">  <span class="hljs-keyword">var</span> killed = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否已经被杀死</span></span><br><span class="line">  <span class="hljs-keyword">var</span> exited = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 是否已经退出</span></span><br><span class="line">  <span class="hljs-keyword">var</span> timeoutId; <span class="hljs-comment">// 是否有定时器</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">var</span> ex = <span class="hljs-literal">null</span>; <span class="hljs-comment">// 出错的上下文对象</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">var</span> cmd = file; <span class="hljs-comment">// 命令或文件</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 退出回调方法</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">exithandler</span>(<span class="hljs-params">code, signal</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (exited) <span class="hljs-keyword">return</span>;</span><br><span class="line">    exited = <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (timeoutId) &#123;</span><br><span class="line">      clearTimeout(timeoutId);</span><br><span class="line">      timeoutId = <span class="hljs-literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!callback) <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// merge chunks</span></span><br><span class="line">    <span class="hljs-keyword">var</span> stdout;</span><br><span class="line">    <span class="hljs-keyword">var</span> stderr;</span><br><span class="line">    <span class="hljs-keyword">if</span> (encoding || (child.stdout &amp;&amp; child.stdout.readableEncoding)) &#123;</span><br><span class="line">      stdout = _stdout.join(<span class="hljs-string">""</span>);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      stdout = Buffer.concat(_stdout); <span class="hljs-comment">// 如果不传入 encoding 参数，默认是Buffer拼接输出</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (encoding || (child.stderr &amp;&amp; child.stderr.readableEncoding)) &#123;</span><br><span class="line">      stderr = _stderr.join(<span class="hljs-string">""</span>);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">      stderr = Buffer.concat(_stderr); <span class="hljs-comment">// 如果不传入 encoding 参数，默认是Buffer拼接输出</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!ex &amp;&amp; code === <span class="hljs-number">0</span> &amp;&amp; signal === <span class="hljs-literal">null</span>) &#123;</span><br><span class="line">      callback(<span class="hljs-literal">null</span>, stdout, stderr); <span class="hljs-comment">// 没有错误，执行回调</span></span><br><span class="line">      <span class="hljs-keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (args.length !== <span class="hljs-number">0</span>) cmd += <span class="hljs-string">` <span class="hljs-subst">$&#123;args.join(<span class="hljs-string">" "</span>)&#125;</span>`</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!ex) &#123;</span><br><span class="line">      <span class="hljs-comment">// eslint-disable-next-line no-restricted-syntax</span></span><br><span class="line">      ex = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Error</span>(<span class="hljs-string">"Command failed: "</span> + cmd + <span class="hljs-string">"\n"</span> + stderr);</span><br><span class="line">      ex.killed = child.killed || killed;</span><br><span class="line">      ex.code = code &lt; <span class="hljs-number">0</span> ? getSystemErrorName(code) : code;</span><br><span class="line">      ex.signal = signal;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ex.cmd = cmd;</span><br><span class="line">    callback(ex, stdout, stderr); <span class="hljs-comment">// 有错误，执行回调</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">errorhandler</span>(<span class="hljs-params">e</span>) </span>&#123;</span><br><span class="line">    ex = e;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// child.stdout 和 child.stderr 都销毁</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (child.stdout) child.stdout.destroy();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (child.stderr) child.stderr.destroy();</span><br><span class="line"></span><br><span class="line">    exithandler();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">kill</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (child.stdout) child.stdout.destroy();</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (child.stderr) child.stderr.destroy();</span><br><span class="line"></span><br><span class="line">    killed = <span class="hljs-literal">true</span>;</span><br><span class="line">    <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">      child.kill(options.killSignal);</span><br><span class="line">    &#125; <span class="hljs-keyword">catch</span> (e) &#123;</span><br><span class="line">      ex = e;</span><br><span class="line">      exithandler();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 如果定义了子进程的超时时间，就定时销毁它</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (options.timeout &gt; <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    timeoutId = setTimeout(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">delayedKill</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      kill();</span><br><span class="line">      timeoutId = <span class="hljs-literal">null</span>;</span><br><span class="line">    &#125;, options.timeout);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (child.stdout) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (encoding) child.stdout.setEncoding(encoding);</span><br><span class="line"></span><br><span class="line">    child.stdout.on(<span class="hljs-string">"data"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onChildStdout</span>(<span class="hljs-params">chunk</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> encoding = child.stdout.readableEncoding;</span><br><span class="line">      <span class="hljs-keyword">const</span> length = encoding</span><br><span class="line">        ? Buffer.byteLength(chunk, encoding)</span><br><span class="line">        : chunk.length;</span><br><span class="line">      stdoutLen += length; <span class="hljs-comment">// 不断累加输出的长度</span></span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (stdoutLen &gt; options.maxBuffer) &#123;</span><br><span class="line">        <span class="hljs-comment">// 超过的话就报错</span></span><br><span class="line">        <span class="hljs-keyword">const</span> truncatedLen = options.maxBuffer - (stdoutLen - length);</span><br><span class="line">        _stdout.push(chunk.slice(<span class="hljs-number">0</span>, truncatedLen));</span><br><span class="line"></span><br><span class="line">        ex = <span class="hljs-keyword">new</span> ERR_CHILD_PROCESS_STDIO_MAXBUFFER(<span class="hljs-string">"stdout"</span>);</span><br><span class="line">        kill();</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        _stdout.push(chunk); <span class="hljs-comment">// 不断累积chunk</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 整体逻辑和上面的child.stdout基本一致</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (child.stderr) &#123;</span><br><span class="line">    <span class="hljs-keyword">if</span> (encoding) child.stderr.setEncoding(encoding);</span><br><span class="line"></span><br><span class="line">    child.stderr.on(<span class="hljs-string">"data"</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">onChildStderr</span>(<span class="hljs-params">chunk</span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> encoding = child.stderr.readableEncoding;</span><br><span class="line">      <span class="hljs-keyword">const</span> length = encoding</span><br><span class="line">        ? Buffer.byteLength(chunk, encoding)</span><br><span class="line">        : chunk.length;</span><br><span class="line">      stderrLen += length;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (stderrLen &gt; options.maxBuffer) &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> truncatedLen = options.maxBuffer - (stderrLen - length);</span><br><span class="line">        _stderr.push(chunk.slice(<span class="hljs-number">0</span>, truncatedLen));</span><br><span class="line"></span><br><span class="line">        ex = <span class="hljs-keyword">new</span> ERR_CHILD_PROCESS_STDIO_MAXBUFFER(<span class="hljs-string">"stderr"</span>);</span><br><span class="line">        kill();</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        _stderr.push(chunk);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  child.addListener(<span class="hljs-string">"close"</span>, exithandler);</span><br><span class="line">  child.addListener(<span class="hljs-string">"error"</span>, errorhandler);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>exec</code>和<code>execFile</code>最大的一个区别就是参数<code>shell</code>默认是否开启，其它基本都是相同的。另外，它们对输出的内容有大小限制是在<code>child.stderr.on(&#39;data&#39;)</code>和<code>child.stdout.on(&#39;data&#39;)</code>获取数据时候被限制。</p><p>如果不做类似的规定，<code>_stderr</code>和<code>_stdout</code>无限被输出，那么内存会不断的膨胀导致性能问题，甚至程序奔溃。（这是我猜的原因）</p><p>另外说到底，<strong>最后还是对<code>spawn</code>方法的封装了调用。</strong></p><p><br></p><p><strong>fork</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/child_process.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fork</span>(<span class="hljs-params">modulePath <span class="hljs-regexp">/* , args, options */</span></span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// Get options and args arguments.</span></span><br><span class="line">  <span class="hljs-keyword">var</span> execArgv;</span><br><span class="line">  <span class="hljs-keyword">var</span> options = &#123;&#125;;</span><br><span class="line">  <span class="hljs-keyword">var</span> args = [];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// fork方法的stdio参数，必须带有一个ipc参数</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> options.stdio === <span class="hljs-string">"string"</span>) &#123;</span><br><span class="line">    options.stdio = stdioStringToArray(options.stdio, <span class="hljs-string">"ipc"</span>);</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!<span class="hljs-built_in">Array</span>.isArray(options.stdio)) &#123;</span><br><span class="line">    <span class="hljs-comment">// Use a separate fd=3 for the IPC channel. Inherit stdin, stdout,</span></span><br><span class="line">    <span class="hljs-comment">// and stderr from the parent if silent isn't set.</span></span><br><span class="line">    options.stdio = stdioStringToArray(</span><br><span class="line">      options.silent ? <span class="hljs-string">"pipe"</span> : <span class="hljs-string">"inherit"</span>,</span><br><span class="line">      <span class="hljs-string">"ipc"</span></span><br><span class="line">    );</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (!options.stdio.includes(<span class="hljs-string">"ipc"</span>)) &#123;</span><br><span class="line">    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> ERR_CHILD_PROCESS_IPC_REQUIRED(<span class="hljs-string">"options.stdio"</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  options.execPath = options.execPath || process.execPath; <span class="hljs-comment">// 默认用父进程的Node执行文件</span></span><br><span class="line">  options.shell = <span class="hljs-literal">false</span>; <span class="hljs-comment">// 不开启 shell</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> spawn(options.execPath, args, options);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面代码有个非常引人注意就是 12~22 行，fork 方法的 stdio 参数，必须带有一个 ipc 参数，这个<code>ipc</code>的作用将在后续深入挖掘后介绍。最后也是调用<code>spawn</code>创建子进程。</p><p><br></p><p><strong>spawn</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// lib/child_process.js</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">spawn</span>(<span class="hljs-params">file, args, options</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">const</span> child = <span class="hljs-keyword">new</span> ChildProcess();</span><br><span class="line"></span><br><span class="line">  options = normalizeSpawnArguments(file, args, options);</span><br><span class="line">  debug(<span class="hljs-string">"spawn"</span>, options);</span><br><span class="line">  child.spawn(options);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> child;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>lib/child_process.js</code>里的 spawn 方法就简单的将传入的参数做整理，然后直接调用 ChildProcess 实例对象的 spawn。</p><p><br></p><p><strong>ChildProcess</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// `lib/internal/child_process.js`</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">ChildProcess</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">  EventEmitter.call(<span class="hljs-keyword">this</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">this</span>._handle = <span class="hljs-keyword">new</span> Process(); <span class="hljs-comment">// new 出一个 ProcessWrap 对象 （ process_wrap.cc）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ChildProcess.prototype.spawn = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">options</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 默认使用 pipe</span></span><br><span class="line">  <span class="hljs-keyword">let</span> stdio = options.stdio || <span class="hljs-string">"pipe"</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 重置stdio变量，这个是个很重要的方法，后续将继续介绍</span></span><br><span class="line">  stdio = getValidStdio(stdio, <span class="hljs-literal">false</span>);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">const</span> ipc = stdio.ipc;</span><br><span class="line">  <span class="hljs-keyword">const</span> ipcFd = stdio.ipcFd;</span><br><span class="line">  stdio = options.stdio = stdio.stdio;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 调用ProcessWrap对应的spawn去创建新进程</span></span><br><span class="line">  <span class="hljs-keyword">const</span> err = <span class="hljs-keyword">this</span>._handle.spawn(options);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 如果err存在，就会有相关代码处理创建子进程出错的场景</span></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">this</span>.pid = <span class="hljs-keyword">this</span>._handle.pid;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; stdio.length; i++) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> stream = stdio[i];</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (stream.handle) &#123;</span><br><span class="line">      <span class="hljs-comment">// When i === 0 - we're dealing with stdin</span></span><br><span class="line">      <span class="hljs-comment">// (which is the only one writable pipe).</span></span><br><span class="line">      <span class="hljs-comment">// 创建 socket</span></span><br><span class="line">      stream.socket = createSocket(</span><br><span class="line">        <span class="hljs-keyword">this</span>.pid !== <span class="hljs-number">0</span> ? stream.handle : <span class="hljs-literal">null</span>,</span><br><span class="line">        i &gt; <span class="hljs-number">0</span></span><br><span class="line">      );</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span> &amp;&amp; <span class="hljs-keyword">this</span>.pid !== <span class="hljs-number">0</span>) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>._closesNeeded++;</span><br><span class="line">        stream.socket.on(<span class="hljs-string">"close"</span>, () =&gt; &#123;</span><br><span class="line">          maybeClose(<span class="hljs-keyword">this</span>);</span><br><span class="line">        &#125;);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">this</span>.stdin =</span><br><span class="line">    stdio.length &gt;= <span class="hljs-number">1</span> &amp;&amp; stdio[<span class="hljs-number">0</span>].socket !== <span class="hljs-literal">undefined</span> ? stdio[<span class="hljs-number">0</span>].socket : <span class="hljs-literal">null</span>;</span><br><span class="line">  <span class="hljs-keyword">this</span>.stdout =</span><br><span class="line">    stdio.length &gt;= <span class="hljs-number">2</span> &amp;&amp; stdio[<span class="hljs-number">1</span>].socket !== <span class="hljs-literal">undefined</span> ? stdio[<span class="hljs-number">1</span>].socket : <span class="hljs-literal">null</span>;</span><br><span class="line">  <span class="hljs-keyword">this</span>.stderr =</span><br><span class="line">    stdio.length &gt;= <span class="hljs-number">3</span> &amp;&amp; stdio[<span class="hljs-number">2</span>].socket !== <span class="hljs-literal">undefined</span> ? stdio[<span class="hljs-number">2</span>].socket : <span class="hljs-literal">null</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">this</span>.stdio = [];</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; stdio.length; i++)</span><br><span class="line">    <span class="hljs-keyword">this</span>.stdio.push(stdio[i].socket === <span class="hljs-literal">undefined</span> ? <span class="hljs-literal">null</span> : stdio[i].socket);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Add .send() method and start listening for IPC data</span></span><br><span class="line">  <span class="hljs-comment">// setupChannel 方法很长，主要就是实现了数据的发送和接受</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (ipc !== <span class="hljs-literal">undefined</span>) setupChannel(<span class="hljs-keyword">this</span>, ipc);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> err;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">stdioStringToArray</span>(<span class="hljs-params">stdio, channel</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 主要将stdio参数格式化为[xxx,xxx,xxx]形式的数组</span></span><br><span class="line">  <span class="hljs-comment">// 如果有channel，[xxx,xxx,xxx,channel]</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getValidStdio</span>(<span class="hljs-params">stdio, sync</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> ipc;</span><br><span class="line">  <span class="hljs-keyword">var</span> ipcFd;</span><br><span class="line"></span><br><span class="line">  stdio = stdio.reduce(<span class="hljs-function">(<span class="hljs-params">acc, stdio, i</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">cleanup</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; acc.length; i++) &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> ((acc[i].type === <span class="hljs-string">"pipe"</span> || acc[i].type === <span class="hljs-string">"ipc"</span>) &amp;&amp; acc[i].handle)</span><br><span class="line">          acc[i].handle.close();</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (stdio === <span class="hljs-string">"ignore"</span>) &#123;</span><br><span class="line">      acc.push(&#123; <span class="hljs-attr">type</span>: <span class="hljs-string">"ignore"</span> &#125;); <span class="hljs-comment">// 子进程的输出不需要在控制台显示</span></span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stdio === <span class="hljs-string">"pipe"</span> || (<span class="hljs-keyword">typeof</span> stdio === <span class="hljs-string">"number"</span> &amp;&amp; stdio &lt; <span class="hljs-number">0</span>)) &#123;</span><br><span class="line">      <span class="hljs-keyword">var</span> a = &#123;</span><br><span class="line">        type: <span class="hljs-string">"pipe"</span>,</span><br><span class="line">        readable: i === <span class="hljs-number">0</span>, <span class="hljs-comment">// 0是stdin，需要读</span></span><br><span class="line">        writable: i !== <span class="hljs-number">0</span>, <span class="hljs-comment">// 1是stdout，2是stderr 需要写</span></span><br><span class="line">      &#125;;</span><br><span class="line">      <span class="hljs-comment">// spawn 调用的时候，sync为false，为stdin、stdout、stderr创建一个SOCKET类型Pipe</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (!sync) a.handle = <span class="hljs-keyword">new</span> Pipe(PipeConstants.SOCKET);</span><br><span class="line"></span><br><span class="line">      acc.push(a);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stdio === <span class="hljs-string">"ipc"</span>) &#123;</span><br><span class="line">      <span class="hljs-comment">// 创建一个IPC类型Pipe</span></span><br><span class="line">      ipc = <span class="hljs-keyword">new</span> Pipe(PipeConstants.IPC);</span><br><span class="line">      ipcFd = i; <span class="hljs-comment">// ipc位置</span></span><br><span class="line"></span><br><span class="line">      acc.push(&#123;</span><br><span class="line">        type: <span class="hljs-string">"pipe"</span>,</span><br><span class="line">        handle: ipc,</span><br><span class="line">        ipc: <span class="hljs-literal">true</span>,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (stdio === <span class="hljs-string">"inherit"</span>) &#123;</span><br><span class="line">      acc.push(&#123;</span><br><span class="line">        type: <span class="hljs-string">"inherit"</span>,</span><br><span class="line">        fd: i,</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-comment">// ...还有很多代码，不在讨论范围</span></span><br><span class="line">    <span class="hljs-keyword">return</span> acc;</span><br><span class="line">  &#125;, []);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> &#123; stdio, ipc, ipcFd &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>ChildProcess</code>并不能直接创建新的进程，需要底层 V8 的帮助，在构造函数里面直接 new ProcessWrap 赋给了 this._handle。</p><p><code>ChildProcess.prototype.spawn</code>开始主要处理主要的<a href="http://nodejs.cn/api/child_process.html#child_process_options_stdio" target="_blank" rel="noopener"><code>stdio</code></a>参数，明确父子进程通过哪些方式来获取数据信息，官方文档给出了一些示例，如果不清楚可以多做点实验。如果是<code>pipe</code>或者是<code>ipc</code>都会实例化一个 Pipe 对象，只是参数类型不同。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// pipe_wrap.cc</span></span><br><span class="line"><span class="hljs-keyword">void</span> PipeWrap::New(<span class="hljs-keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args) &#123;</span><br><span class="line">  <span class="hljs-keyword">switch</span> (type) &#123;</span><br><span class="line">    <span class="hljs-keyword">case</span> SOCKET:</span><br><span class="line">      provider = PROVIDER_PIPEWRAP;</span><br><span class="line">      ipc = <span class="hljs-literal">false</span>;</span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line">    <span class="hljs-keyword">case</span> IPC:</span><br><span class="line">      provider = PROVIDER_PIPEWRAP;</span><br><span class="line">      ipc = <span class="hljs-literal">true</span>;</span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">new</span> PipeWrap(env, args.This(), provider, ipc);</span><br><span class="line">&#125;</span><br><span class="line">PipeWrap::PipeWrap(Environment* env,</span><br><span class="line">                   Local&lt;Object&gt; object,</span><br><span class="line">                   ProviderType provider,</span><br><span class="line">                   <span class="hljs-keyword">bool</span> ipc)</span><br><span class="line">    : ConnectionWrap(env, object, provider) &#123;</span><br><span class="line">  <span class="hljs-keyword">int</span> r = uv_pipe_init(env-&gt;event_loop(), &amp;handle_, ipc);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// deps/uv/src/unix/pipe.c</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uv_pipe_init</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop, <span class="hljs-keyword">uv_pipe_t</span>* handle, <span class="hljs-keyword">int</span> ipc)</span> </span>&#123;</span><br><span class="line">  uv__stream_init(loop, (<span class="hljs-keyword">uv_stream_t</span>*)handle, UV_NAMED_PIPE);</span><br><span class="line">  handle-&gt;shutdown_req = <span class="hljs-literal">NULL</span>;</span><br><span class="line">  handle-&gt;connect_req = <span class="hljs-literal">NULL</span>;</span><br><span class="line">  handle-&gt;pipe_fname = <span class="hljs-literal">NULL</span>;</span><br><span class="line">  handle-&gt;ipc = ipc;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>它们唯一的区别就是<code>uv_pipe_t</code>的 ipc 参数是 true 还是 false，<strong>所有的事件都被老老实实的绑定在 libuv 上</strong>。</p><p>回到<code>ChildProcess.prototype.spawn</code>中，已经重置了 stdio 参数后，到了真正创建子进程的地方了，<code>this._handle.spawn(options);</code>，通过<code>process_wrap.cc</code>里的 ProcessWrap.Spawn 去创建，整个创建方法也极长，主要是对传入的参数进行处理，然后再调用<code>uv_spawn</code>。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// deps/uv/src/unix/process.c</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uv_spawn</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">             <span class="hljs-keyword">uv_process_t</span>* process,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">             <span class="hljs-keyword">const</span> <span class="hljs-keyword">uv_process_options_t</span>* options)</span> </span>&#123;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">if</span> defined(__APPLE__) &amp;&amp; (TARGET_OS_TV || TARGET_OS_WATCH)</span></span><br><span class="line">  <span class="hljs-comment">/* fork is marked __WATCHOS_PROHIBITED __TVOS_PROHIBITED. */</span></span><br><span class="line">  <span class="hljs-keyword">return</span> UV_ENOSYS;</span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">else</span></span></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line"></span><br><span class="line">  uv_signal_start(&amp;loop-&gt;child_watcher, uv__chld, SIGCHLD);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* Acquire write lock to prevent opening new fds in worker threads */</span></span><br><span class="line">  uv_rwlock_wrlock(&amp;loop-&gt;cloexec_lock);</span><br><span class="line">  pid = fork();</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">-1</span>) &#123;</span><br><span class="line">    err = UV__ERR(errno);</span><br><span class="line">    uv_rwlock_wrunlock(&amp;loop-&gt;cloexec_lock);</span><br><span class="line">    uv__close(signal_pipe[<span class="hljs-number">0</span>]);</span><br><span class="line">    uv__close(signal_pipe[<span class="hljs-number">1</span>]);</span><br><span class="line">    <span class="hljs-keyword">goto</span> error;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (pid == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    uv__process_child_init(options, stdio_count, pipes, signal_pipe[<span class="hljs-number">1</span>]);</span><br><span class="line">    <span class="hljs-built_in">abort</span>();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* Release lock in parent process */</span></span><br><span class="line">  uv_rwlock_wrunlock(&amp;loop-&gt;cloexec_lock);</span><br><span class="line">  uv__close(signal_pipe[<span class="hljs-number">1</span>]);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过系统层面的<code>fork</code>函数创建子进程，由于 fork 的特殊性，一次调用返回二次，当返回 0 的时候回执行子进程的逻辑，回去通过<code>uv__process_child_init</code>初始化整个子进程的上下文信息。</p><p>再回到<code>ChildProcess.prototype.spawn</code>中，遍历<code>stdio</code>，如果成员有 handle 字段，就通过<code>createSocket</code>为其创建一个 socket 对象</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">createSocket</span>(<span class="hljs-params">pipe, readable</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> net.Socket(&#123; <span class="hljs-attr">handle</span>: pipe, readable, <span class="hljs-attr">writable</span>: !readable &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>无论是参数<code>stdio</code>是 pipe 还是 ipc 都会创建 socket，在父子进程通信的时候，父进程通过子进程暴露出来的 stdin、stdout 和 stderr 来展示子进程执行的信息，缺乏之间的数据互通性，这也是导致<code>exec</code>和<code>execFile</code>可使用的场景有限，而<code>fork</code>会带一个 ipc 参数给 stdio 参数（可以回过去翻翻 fork 源码），所以可以执行父子进程的通信操作，比如 send 方法等，具体的实现可以看<code>setupChannel</code>。</p><p><br></p><p><br></p><p><strong>综上，</strong>Node.js 在<code>child_process</code>里创建进程的流程大致梳理了下，在 JavaScript 层面并没有什么复杂的，在 libuv 层面注册了很多相关的事件，有空可以研究研究。之后会写一篇关于 cluster.fork 的介绍，其实就是对 child_process.fork 更多的封装。</p>]]></content>
    
    <summary type="html">
    
      Node.js 创建子进程的方法常用的有如下几种。child_process, exec、execFile、fork、spawn；cluster, fork。
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Node.js 监控中心架构迭代</title>
    <link href="https://mlib.wang/2020/04/03/monitor-hub/"/>
    <id>https://mlib.wang/2020/04/03/monitor-hub/</id>
    <published>2020-04-02T23:17:29.367Z</published>
    <updated>2020-07-14T03:58:57.772Z</updated>
    
    <content type="html"><![CDATA[<p>之前写了一篇<a href="https://miser.github.io/2020/02/21/node-perf-heapdump-flame-graph/" target="_blank" rel="noopener">收集 Node.js 应用的内存堆栈快照和 CPU 火焰图</a>文章，其中的架构非常粗糙，但是初步算是满足了现在的监控需求。不过随着业务的增长，单台<strong>TCP Server</strong>可定无法满足高可用的需求，一旦出现问题那就没办法持续使用了，所以需要一个重新设计和改造。</p><a id="more"></a><p><img src="/images/monitor-hub/image-20200403185942130.png" alt="粗糙的1.0版本"></p><p><strong>大致流程介绍：</strong></p><p>一个 Docker 中，可能运行多个 Node.js 进程，比如 Egg.js 框架，另外<code>Helper Process</code>是用来做火焰图采集的，前面的文章提到过，目前它的功能相对单一应该被优化。</p><p>所有的 Node.js 进程都会被看做事一个<code>Client</code>通过 TCP 长连接连入<code>Server</code>，他们做双向通信，Client 将心跳和监控数据（CPU、内存、EventLoop、GC 等）源源不断送入 Server 中，Server 将对用的数据存入到 ES 中。</p><p>用户通过<code>Admin Web</code>可以查看每个应用的基础数据图表，发送生成内存堆栈信息和 CPU 火焰图的信息给指定的 Client，Client 生成文件后上传到<code>FS</code>（文件系统），之后 Admin Web 去 FS 上抓取该文件。</p><p><strong>Q:为什么是这样一个粗糙的设计？</strong></p><ul><li>以快速上线去生产验证可用性为目标之一，尽量减少对其它系统的依赖，依赖<code>ES</code>是为了存数据、<code>FS</code>是为了存文件，过多的依赖对于部署上线还是测试链路都是增加成本，在人力有限的情况下拖的越久越容易杀死项目。</li></ul><p><strong>Q:为什么用长链接而不是短链接？</strong></p><ul><li>长链接的好处在简单模型下有个最大的好处就是我不需要去维护客户端是否存活，因为一旦客户端挂了，那么它就会自动断开，既能发送监控警报，又不需要做相关的治理工作，治理工作又是一个细活。</li><li>另外客户端没有将数据集中定时批量发送，而是每次取到相关数据就发送给 Server。为了减少开销就用了长链接，自定义的协议传输效率也高。</li><li>在开发过程中，长链接的开发模型比短连接复杂很多，不容易维护。</li></ul><p><strong>Q:目前遇到的问题和思考</strong></p><ul><li>单机 Server 一旦挂了就没办法继续监控，导致的风险极大，需要做集群，但是长链接并不适合做扩展，所以必须长改短。</li><li>如果 Server 是集群，那势必需要 Client 去找到它，那么将引入<code>服务注册和发现</code>功能，比如 Eureka、Consul 等，将 Client、Server 和 Admin Web 连入。</li><li>有了 Eureka、Consul 之类中间件，其实 Admin Web 可以直接通过它找到 Client，不过为了功能单一性，还是让 Server 转发用户命令。</li><li>之前的 Helper Process 是在做火焰图时候临时加入，所有的<code>Worker Process</code>都是平等的 Client，在启动它的时候存在竞争问题，哪里一个 Client 去启动它呢？可以做一个类似 Egg.js 的启动命令，有 Master 进程、数个 Worker 进程已经一个 Helper Process。当然在 Egg.js 框架里，完全可以用 Agent 进程代替它，写个相关插件即可。</li><li>如果所有的 Client 和 Helper Process 都在 Master 下，那么我们可以通过 Helper Process 代理将所有的 Client 基础数据批量上传到 Server，通过父进程 Master 做转发，这样也减轻了不断传数据的性能瓶颈；另外所有的 Client 注册到注册中心也不合适，也可以通过 Helper Process 代理，这样每个 Docker 就一个服务注册了。</li><li>生成文件的过程是漫长的，不可能让短链接一直等，所以需要一个消息列队去通知 Admin Web，XXXX Client 的 XXXX 文件已经好了，让它去 FS 上拉取，需要引入 RMQ 等。</li><li>为 Admin Web 可以方便获取 Client 列表，可以将注册中心里的服务信息格式处理后存在 Redis 中，这样就引入了 Redis，如果不平凡刷新这个列表可以每次读取注册中心里的数据做格式处理。</li></ul><p><img src="/images/monitor-hub/image-20200403210837664.png" alt="迭代2.0版本"></p><p><strong>综上思考</strong>，Server 依旧做信息的存储和命令的转发工作，Admin Web 依旧是操作命令的入口，而整个 Client 端偏向 Egg.js 的风格。渐渐的整个监控中心就变得像一个微服务集群那样存在和运行，不同阶段有不同阶段的任务目标，讲不定之后会有新的挑战需要迭代。</p>]]></content>
    
    <summary type="html">
    
      为了更好的做BFF层，最近看了一些网关资料，Node.js的网关类库相对薄弱很多。Express Gateway，背靠强大的Express社区，很多现成的中间件可以运用其中，省去了不少开发成本和风险。
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
      <category term="性能监控" scheme="https://mlib.wang/tags/%E6%80%A7%E8%83%BD%E7%9B%91%E6%8E%A7/"/>
    
  </entry>
  
  <entry>
    <title>libuv &amp; Node.js EventLoop （一）</title>
    <link href="https://mlib.wang/2020/03/01/v8-libuv-timer-event-loop/"/>
    <id>https://mlib.wang/2020/03/01/v8-libuv-timer-event-loop/</id>
    <published>2020-02-29T21:39:36.647Z</published>
    <updated>2020-09-27T05:01:49.031Z</updated>
    
    <content type="html"><![CDATA[<p>在网络上查询<a href="https://libuv.org/" target="_blank" rel="noopener">libuv</a>和EventLoop相关信息的时候，经常看到不同的文章所表达的意思差距较多，主要原因有二吧：</p><ul><li>它们的<code>libuv</code>和<code>V8</code>大版本不同，导致具体的实现略有差异</li><li>另外它们的代码错综复杂，又是大多数JavaScript工作者不擅长的C/C++，只是从上而下的看，或许一些细节无法完全理解或是认知的分歧</li></ul><p>与其受他人影响，不如自己来好好梳理下。</p><p><strong>版本</strong></p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// libuv</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_MAJOR 1</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_MINOR 33</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_VERSION_PATCH 1</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// V8</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_MAJOR_VERSION 7</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_MINOR_VERSION 8</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_BUILD_NUMBER 279</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> V8_PATCH_LEVEL 17</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// Node.js</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_MAJOR_VERSION 14</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_MINOR_VERSION 0</span></span><br><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> NODE_PATCH_VERSION 0</span></span><br></pre></td></tr></table></figure><p>没有列出具体版本号的代码分析都是耍流氓，2010年的代码和2020年的代码可能差距甚远，“上古”分析固然在当时是对的，但是在今日也许是错误的。</p><a id="more"></a><p><br></p><p><br></p><h3 id="libuv-amp-EventLoop文档比较"><a href="#libuv-amp-EventLoop文档比较" class="headerlink" title="libuv &amp; EventLoop文档比较"></a>libuv &amp; EventLoop文档比较</h3><p><img src="/images/v8-libuv-timer-event-loop/loop_iteration.png" alt="_images/loop_iteration.png"></p><p>上图出自<code>libuv</code>的<a href="http://docs.libuv.org/en/v1.x/design.html#the-i-o-loop" target="_blank" rel="noopener">The I/O loop</a>介绍，具体的信息可以看其文档。</p><p><img src="/images/v8-libuv-timer-event-loop/image-20200301145547994.png" alt="image-20200301145547994"></p><p>上图出自<a href="https://nodejs.org/en/docs/guides/event-loop-timers-and-nexttick/#event-loop-explained" target="_blank" rel="noopener">Event Loop Explained</a>，两者的各个阶段基本是对应的。哪怕是很多其它自行画的图解中，也基本差不多，但唯独<code>pending callbacks</code>阶段，我看到很多文章里面把它标为<code>I/O callbacks</code>，不知道是不是历史原因，但是就从二者的目前文档解释来看是不妥的。</p><blockquote><p>Pending callbacks are called. All I/O callbacks are called right after polling for I/O, for the most part. There are cases, however, in which calling such a callback is deferred for the next loop iteration. If the previous iteration deferred any I/O callback it will be run at this point. —— libuv</p></blockquote><p><strong>libuv</strong>里的<code>pending callbacks</code>：大多数的I/O callbacks应该在polling阶段完成，有部分会被延迟到下一个pending callbacks阶段执行。</p><p><br></p><blockquote><p>This phase executes callbacks for some system operations such as types of TCP errors. For example if a TCP socket receives <code>ECONNREFUSED</code> when attempting to connect, some *nix systems want to wait to report the error. This will be queued to execute in the <strong>pending callbacks</strong> phase. —— Node.js</p></blockquote><p><strong>Node.js</strong>里的<code>pending callbacks</code>：这个阶段会执行系统上因一些错误而引起的callbacks，如TCP错误。</p><p>我觉得<code>pending callbacks</code>比较合理，一方面如libuv所说，它是一部分延迟的I/O回调，在Node.js里面指的是一些系统上的错误（这些错误也是I/O引起的）。而大多数的I/O操作其实是在 <code>poll</code>阶段。</p><p><br></p><p><br></p><h2 id="libuv的大致流程代码"><a href="#libuv的大致流程代码" class="headerlink" title="libuv的大致流程代码"></a>libuv的大致流程代码</h2><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uv_run</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop, uv_run_mode mode)</span> </span>&#123; <span class="hljs-comment">// 默认 mode 是 UV_RUN_DEFAULT</span></span><br><span class="line">  <span class="hljs-keyword">int</span> timeout;</span><br><span class="line">  <span class="hljs-keyword">int</span> r;</span><br><span class="line">  <span class="hljs-keyword">int</span> ran_pending;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 是否还存在alive的事件</span></span><br><span class="line">  r = uv__loop_alive(loop);</span><br><span class="line">  <span class="hljs-keyword">if</span> (!r)</span><br><span class="line">    uv__update_time(loop); <span class="hljs-comment">// 存在的话更新当前的时间，可以把这个时间理解为libuv里面统一的时间，方便触发定时任务</span></span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (r != <span class="hljs-number">0</span> &amp;&amp; loop-&gt;stop_flag == <span class="hljs-number">0</span>) &#123;</span><br><span class="line">    uv__update_time(loop); <span class="hljs-comment">// 和libuv图里的 Update loop time对应</span></span><br><span class="line">    uv__run_timers(loop); <span class="hljs-comment">// 执行 timers 阶段</span></span><br><span class="line">    ran_pending = uv__run_pending(loop); <span class="hljs-comment">// 执行pending 阶段；返回0表示空，1表示有；</span></span><br><span class="line">    uv__run_idle(loop); <span class="hljs-comment">// idle 阶段； Node.js里面不太关心</span></span><br><span class="line">    uv__run_prepare(loop); <span class="hljs-comment">// prepare 阶段； Node.js里面不太关心</span></span><br><span class="line"></span><br><span class="line">    timeout = <span class="hljs-number">0</span>; <span class="hljs-comment">// 初始化阻塞 poll 阶段的超时时间</span></span><br><span class="line">    <span class="hljs-keyword">if</span> ((mode == UV_RUN_ONCE &amp;&amp; !ran_pending) || mode == UV_RUN_DEFAULT)</span><br><span class="line">      timeout = uv_backend_timeout(loop); <span class="hljs-comment">// 算出阻塞 poll 阶段的超时时间</span></span><br><span class="line">    <span class="hljs-comment">// 根据timers里最近的超时时间算出一个差值 diff = loop.time - min.timeout</span></span><br><span class="line">    <span class="hljs-comment">// 如果 diff &gt;= 0 , timeout = 0</span></span><br><span class="line">    <span class="hljs-comment">// 否则 timeout = min(diff, INT_MAX)</span></span><br><span class="line">    </span><br><span class="line">    uv__io_poll(loop, timeout); <span class="hljs-comment">// 执行 poll 阶段</span></span><br><span class="line">    uv__run_check(loop); <span class="hljs-comment">// 执行 check 阶段</span></span><br><span class="line">    uv__run_closing_handles(loop); <span class="hljs-comment">// 执行 close 阶段</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// mode 默认 UV_RUN_DEFAULT 所以不执行下面</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (mode == UV_RUN_ONCE) &#123;</span><br><span class="line">      uv__update_time(loop);</span><br><span class="line">      uv__run_timers(loop);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// 查看是否还有alive事件</span></span><br><span class="line">    r = uv__loop_alive(loop);</span><br><span class="line">    <span class="hljs-keyword">if</span> (mode == UV_RUN_ONCE || mode == UV_RUN_NOWAIT)</span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">/* The if statement lets gcc compile it to a conditional store. Avoids</span></span><br><span class="line"><span class="hljs-comment">   * dirtying a cache line.</span></span><br><span class="line"><span class="hljs-comment">   */</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (loop-&gt;stop_flag != <span class="hljs-number">0</span>)</span><br><span class="line">    loop-&gt;stop_flag = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> r;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述<code>uv_run</code>方法同样表达了之前图的循环流程，接下来我们看看各个阶段的具体执行方法。</p><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uv__run_timers</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">heap_node</span>* <span class="hljs-title">heap_node</span>;</span> <span class="hljs-comment">// timers 里的都是按照最小堆存放的</span></span><br><span class="line">  <span class="hljs-keyword">uv_timer_t</span>* handle;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (;;) &#123;</span><br><span class="line">    heap_node = heap_min(timer_heap(loop)); <span class="hljs-comment">// 从堆顶取出一个</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (heap_node == <span class="hljs-literal">NULL</span>) <span class="hljs-comment">// 不存在就退出</span></span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    handle = container_of(heap_node, <span class="hljs-keyword">uv_timer_t</span>, heap_node); </span><br><span class="line">    <span class="hljs-keyword">if</span> (handle-&gt;timeout &gt; loop-&gt;time) <span class="hljs-comment">// 触发时间没达到也退出</span></span><br><span class="line">      <span class="hljs-keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    uv_timer_stop(handle);</span><br><span class="line">    uv_timer_again(handle);</span><br><span class="line">    </span><br><span class="line">    handle-&gt;timer_cb(handle); <span class="hljs-comment">// 执行回调</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>timers里存放的事件都是最小堆的数据结构排列的，不断的取出根节点比较当前的<code>loop-&gt;time</code>就能知道是执行还是退出，<strong>那么这里的<code>handle-&gt;timer_cb</code>是我们平时JavaScript里的setTimeout回调吗？</strong>后续解答</p><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">uv__run_pending</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  QUEUE* q;</span><br><span class="line">  QUEUE pq;</span><br><span class="line">  <span class="hljs-keyword">uv__io_t</span>* w;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">if</span> (QUEUE_EMPTY(&amp;loop-&gt;pending_queue))</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">  QUEUE_MOVE(&amp;loop-&gt;pending_queue, &amp;pq);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (!QUEUE_EMPTY(&amp;pq)) &#123; <span class="hljs-comment">// 双向链表，为空就跳出</span></span><br><span class="line">    q = QUEUE_HEAD(&amp;pq);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line">    w = QUEUE_DATA(q, <span class="hljs-keyword">uv__io_t</span>, pending_queue);</span><br><span class="line">    w-&gt;cb(loop, w, POLLOUT); <span class="hljs-comment">// 执行回调</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>libuv里面事件很多是由双向链表构建而成，等着被一个个执行，双向链表的好处就是插入很容易。</p><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> UV_LOOP_WATCHER_DEFINE(name, type)                                    \</span></span><br><span class="line"><span class="hljs-keyword">void</span> uv__run_#<span class="hljs-meta">#name(uv_loop_t* loop) &#123;                                      \</span></span><br><span class="line">    uv_#<span class="hljs-meta">#name##_t* h;                                                         \</span></span><br><span class="line">    QUEUE <span class="hljs-built_in">queue</span>;                                                              \</span><br><span class="line">    QUEUE* q;                                                                 \</span><br><span class="line">    QUEUE_MOVE(&amp;loop-&gt;name##_handles, &amp;<span class="hljs-built_in">queue</span>);                                \</span><br><span class="line">    <span class="hljs-keyword">while</span> (!QUEUE_EMPTY(&amp;<span class="hljs-built_in">queue</span>)) &#123;                                            \</span><br><span class="line">      q = QUEUE_HEAD(&amp;<span class="hljs-built_in">queue</span>);                                                 \</span><br><span class="line">      h = QUEUE_DATA(q, uv_##name##<span class="hljs-keyword">_t</span>, <span class="hljs-built_in">queue</span>);                                \</span><br><span class="line">      QUEUE_REMOVE(q);                                                        \</span><br><span class="line">      QUEUE_INSERT_TAIL(&amp;loop-&gt;name##_handles, q);                            \</span><br><span class="line">      h-&gt;name##_cb(h);                                                        \</span><br><span class="line">    &#125;                                                                         \</span><br><span class="line">  &#125;     </span><br><span class="line"></span><br><span class="line">UV_LOOP_WATCHER_DEFINE(prepare, PREPARE)</span><br><span class="line">UV_LOOP_WATCHER_DEFINE(check, CHECK)</span><br><span class="line">UV_LOOP_WATCHER_DEFINE(idle, IDLE)</span><br></pre></td></tr></table></figure><p><code>UV_LOOP_WATCHER_DEFINE</code>宏直接初始化了<code>prepare</code>、<code>check</code>和<code>idle</code>3个阶段，都是双向链表。</p><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// uv__io_poll 太长了，不重要的代码已经移除</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">uv__io_poll</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop, <span class="hljs-keyword">int</span> timeout)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// ...</span></span><br><span class="line">  <span class="hljs-keyword">if</span> (loop-&gt;nfds == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 没有需要执行的 直接退出</span></span><br><span class="line">    assert(QUEUE_EMPTY(&amp;loop-&gt;watcher_queue));</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 将loop-&gt;watcher_queue列队里的待观察的文件描述符绑定到epoll上</span></span><br><span class="line">  <span class="hljs-keyword">while</span> (!QUEUE_EMPTY(&amp;loop-&gt;watcher_queue)) &#123;</span><br><span class="line">    q = QUEUE_HEAD(&amp;loop-&gt;watcher_queue);</span><br><span class="line">    QUEUE_REMOVE(q);</span><br><span class="line">    QUEUE_INIT(q);</span><br><span class="line"></span><br><span class="line">    w = QUEUE_DATA(q, <span class="hljs-keyword">uv__io_t</span>, watcher_queue);</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">if</span> (w-&gt;events == <span class="hljs-number">0</span>)</span><br><span class="line">      op = EPOLL_CTL_ADD; <span class="hljs-comment">// 添加</span></span><br><span class="line">    <span class="hljs-keyword">else</span></span><br><span class="line">      op = EPOLL_CTL_MOD; <span class="hljs-comment">// 修改</span></span><br><span class="line"></span><br><span class="line">    epoll_ctl(loop-&gt;backend_fd, op, w-&gt;fd, &amp;e) <span class="hljs-comment">// epoll_ctl 底层的系统函数，将文件描述符关联起来</span></span><br><span class="line"></span><br><span class="line">    w-&gt;events = w-&gt;pevents;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  sigmask = <span class="hljs-number">0</span>;</span><br><span class="line">  <span class="hljs-keyword">if</span> (loop-&gt;flags &amp; UV_LOOP_BLOCK_SIGPROF) &#123;</span><br><span class="line">    sigemptyset(&amp;sigset);</span><br><span class="line">    sigaddset(&amp;sigset, SIGPROF);</span><br><span class="line">    sigmask |= <span class="hljs-number">1</span> &lt;&lt; (SIGPROF - <span class="hljs-number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  base = loop-&gt;time;</span><br><span class="line">  real_timeout = timeout;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">for</span> (;;) &#123;</span><br><span class="line">    nfds = epoll_wait(loop-&gt;backend_fd,</span><br><span class="line">                        events,</span><br><span class="line">                        ARRAY_SIZE(events),</span><br><span class="line">                        timeout);</span><br><span class="line">    </span><br><span class="line">    <span class="hljs-keyword">if</span> (nfds == <span class="hljs-number">0</span>) &#123; <span class="hljs-comment">// 超时，没有新的事件准备好</span></span><br><span class="line">      assert(timeout != <span class="hljs-number">-1</span>); <span class="hljs-comment">// -1 表示不会超时，而nfds为0表示超时，存在矛盾所以抛出异常</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">0</span>) <span class="hljs-comment">// 退出</span></span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">      </span><br><span class="line">      <span class="hljs-keyword">goto</span> update_timeout; <span class="hljs-comment">// 重新更新时间 准备下次循环 epoll_wait </span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (nfds == <span class="hljs-number">-1</span>) &#123; <span class="hljs-comment">// 出错</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (errno == ENOSYS) &#123;</span><br><span class="line">        <span class="hljs-comment">/* epoll_wait() or epoll_pwait() failed, try the other system call. */</span></span><br><span class="line">        assert(no_epoll_wait == <span class="hljs-number">0</span> || no_epoll_pwait == <span class="hljs-number">0</span>);</span><br><span class="line">        <span class="hljs-keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (errno != EINTR)</span><br><span class="line">        <span class="hljs-built_in">abort</span>();</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">-1</span>)</span><br><span class="line">        <span class="hljs-keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">0</span>)</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">goto</span> update_timeout;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    have_signals = <span class="hljs-number">0</span>;</span><br><span class="line">    nevents = <span class="hljs-number">0</span>;</span><br><span class="line"></span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers] = (<span class="hljs-keyword">void</span>*) events;</span><br><span class="line">    loop-&gt;watchers[loop-&gt;nwatchers + <span class="hljs-number">1</span>] = (<span class="hljs-keyword">void</span>*) (<span class="hljs-keyword">uintptr_t</span>) nfds;</span><br><span class="line">    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; nfds; i++) &#123;</span><br><span class="line">      pe = events + i;</span><br><span class="line">      fd = pe-&gt;data.fd;</span><br><span class="line">      w = loop-&gt;watchers[fd];</span><br><span class="line">      w-&gt;cb(loop, w, pe-&gt;events); <span class="hljs-comment">// 这个for循环很长，这里我简化了，其实就是准备好的IO就执行回调</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">0</span>)</span><br><span class="line">      <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (timeout == <span class="hljs-number">-1</span>)</span><br><span class="line">      <span class="hljs-keyword">continue</span>;</span><br><span class="line"></span><br><span class="line">update_timeout:</span><br><span class="line">    assert(timeout &gt; <span class="hljs-number">0</span>);</span><br><span class="line"></span><br><span class="line">    real_timeout -= (loop-&gt;time - base);</span><br><span class="line">    <span class="hljs-keyword">if</span> (real_timeout &lt;= <span class="hljs-number">0</span>)</span><br><span class="line">      <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">    timeout = real_timeout;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>uv__io_poll</code>里的timeout参数是根据<code>timers</code>里的最近一次定时时间计算出来的。方法内部使用了<code>epoll</code>，是IO多路复用的一个概念。一共有三种：<code>select</code>、<code>poll</code>和<code>epoll</code>。</p><blockquote><p>epoll是<a href="https://baike.baidu.com/item/Linux内核" target="_blank" rel="noopener">Linux内核</a>为处理大批量<a href="https://baike.baidu.com/item/文件描述符/9809582" target="_blank" rel="noopener">文件描述符</a>而作了改进的poll，是Linux下多路复用IO接口select/poll的增强版本，它能显著提高程序在大量<a href="https://baike.baidu.com/item/并发连接/3763280" target="_blank" rel="noopener">并发连接</a>中只有少量活跃的情况下的系统<a href="https://baike.baidu.com/item/CPU/120556" target="_blank" rel="noopener">CPU</a>利用率。另一点原因就是获取事件的时候，它无须遍历整个被侦听的描述符集，只要遍历那些被内核IO事件异步唤醒而加入Ready队列的描述符集合就行了。epoll除了提供select/poll那种IO事件的水平触发（Level Triggered）外，还提供了边缘触发（Edge Triggered），这就使得用户空间程序有可能缓存IO状态，减少epoll_wait/epoll_pwait的调用，提高应用程序效率。 ——百度百科</p></blockquote><p>我觉得libuv使用epoll主要是因为支持其自身的异步特点</p><ul><li>epoll监控的文件描述符远远大于select/poll</li><li>在大量并发的时候epoll性能远远高于select/poll，而少量异步select/poll相对好点。Node.js利用了libuv的高并发特点。</li></ul><p><br></p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">uv__run_closing_handles</span><span class="hljs-params">(<span class="hljs-keyword">uv_loop_t</span>* loop)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">uv_handle_t</span>* p;</span><br><span class="line">  <span class="hljs-keyword">uv_handle_t</span>* q;</span><br><span class="line"></span><br><span class="line">  p = loop-&gt;closing_handles;</span><br><span class="line">  loop-&gt;closing_handles = <span class="hljs-literal">NULL</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">while</span> (p) &#123;</span><br><span class="line">    q = p-&gt;next_closing;</span><br><span class="line">    uv__finish_close(p);</span><br><span class="line">    p = q;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>一个个触发<code>close</code>回调</p><p><br></p><p>上述就是libuv各个阶段的大体流程，<code>poll</code>最为复杂，还有很多东西可以留着细品。</p><p><br></p><p><br></p><h2 id="Node-js-setTimeout"><a href="#Node-js-setTimeout" class="headerlink" title="Node.js setTimeout"></a>Node.js setTimeout</h2><p>上文中提到<strong>那么这里的<code>handle-&gt;timer_cb</code>是我们平时JavaScript里的setTimeout回调吗？回答：不是的</strong></p><p>看看Node.js里面如何具体实现这个<code>setTimemout</code>方法的</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">setTimeout</span>(<span class="hljs-params">callback, after, arg1, arg2, arg3</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">var</span> args = [arg1, arg2, arg3]; <span class="hljs-comment">// 简化了代码</span></span><br><span class="line">  <span class="hljs-keyword">const</span> timeout = <span class="hljs-keyword">new</span> Timeout(callback, after, args, <span class="hljs-literal">false</span>);</span><br><span class="line">  active(timeout);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> timeout;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">Timeout</span>(<span class="hljs-params">callback, after, args, isRepeat</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 省略了部分代码</span></span><br><span class="line">  after *= <span class="hljs-number">1</span>; </span><br><span class="line">  <span class="hljs-keyword">if</span> (!(after &gt;= <span class="hljs-number">1</span> &amp;&amp; after &lt;= TIMEOUT_MAX)) &#123;</span><br><span class="line">    after = <span class="hljs-number">1</span>; <span class="hljs-comment">// 定时验证不过 就为1 </span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-keyword">this</span>._idleTimeout = after;</span><br><span class="line">  <span class="hljs-keyword">this</span>._onTimeout = callback;</span><br><span class="line">  <span class="hljs-keyword">this</span>._timerArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">active</span>(<span class="hljs-params">item</span>) </span>&#123;</span><br><span class="line">  insert(item, <span class="hljs-literal">true</span>, getLibuvNow());  <span class="hljs-comment">// getLibuvNow 获取 loop-&gt;time时间</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">insert</span>(<span class="hljs-params">item, refed, start</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">let</span> msecs = item._idleTimeout;</span><br><span class="line">  <span class="hljs-keyword">if</span> (msecs &lt; <span class="hljs-number">0</span> || msecs === <span class="hljs-literal">undefined</span>)</span><br><span class="line">    <span class="hljs-keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Truncate so that accuracy of sub-millisecond timers is not assumed.</span></span><br><span class="line">  msecs = <span class="hljs-built_in">Math</span>.trunc(msecs);</span><br><span class="line"></span><br><span class="line">  item._idleStart = start;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// Use an existing list if there is one, otherwise we need to make a new one.</span></span><br><span class="line">  <span class="hljs-comment">// timerListMap 是一个键值对，key 是定时时间，value 是一个TimersList</span></span><br><span class="line">  <span class="hljs-keyword">var</span> list = timerListMap[msecs];</span><br><span class="line">  <span class="hljs-keyword">if</span> (list === <span class="hljs-literal">undefined</span>) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> expiry = start + msecs; <span class="hljs-comment">// 过期时间</span></span><br><span class="line">    timerListMap[msecs] = list = <span class="hljs-keyword">new</span> TimersList(expiry, msecs); <span class="hljs-comment">// 双向链表</span></span><br><span class="line">    timerListQueue.insert(list); <span class="hljs-comment">// timerListQueue 用数组实现的最小堆</span></span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (nextExpiry &gt; expiry) &#123;</span><br><span class="line">      scheduleTimer(msecs); <span class="hljs-comment">// 如果此次定时任务的有效时间小的话，调用 V8 scheduleTimer</span></span><br><span class="line">      nextExpiry = expiry;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="hljs-comment">// ... 这边简略代码</span></span><br><span class="line">  L.append(list, item); <span class="hljs-comment">// 将setTimeout创建的Timeout对象添加到list尾部</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过上述代码，我们也可以看出JavaScript层面也有一个维护timers的最小堆，并没有吧具体的某个setTimeout注册到V8里面，只是将定时时间告诉了V8<code>scheduleTimer(msecs);</code>，下面是V8相关代码。</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// timers.cc</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">ScheduleTimer</span><span class="hljs-params">(<span class="hljs-keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">auto</span> env = Environment::GetCurrent(args);</span><br><span class="line">  env-&gt;ScheduleTimer(args[<span class="hljs-number">0</span>]-&gt;IntegerValue(env-&gt;context()).FromJust());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// env.cc</span></span><br><span class="line"><span class="hljs-keyword">void</span> Environment::ScheduleTimer(<span class="hljs-keyword">int64_t</span> duration_ms) &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (started_cleanup_) <span class="hljs-keyword">return</span>;</span><br><span class="line">  uv_timer_start(timer_handle(), RunTimers, duration_ms, <span class="hljs-number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-keyword">void</span> Environment::RunTimers(<span class="hljs-keyword">uv_timer_t</span>* handle) &#123;</span><br><span class="line">  Environment* env = Environment::from_timer_handle(handle);</span><br><span class="line">  </span><br><span class="line">  <span class="hljs-comment">// timers_callback_function 从何而来呢？</span></span><br><span class="line">  Local&lt;Function&gt; cb = env-&gt;timers_callback_function();</span><br><span class="line">  <span class="hljs-keyword">do</span> &#123;</span><br><span class="line">    ret = cb-&gt;Call(env-&gt;context(), process, <span class="hljs-number">1</span>, &amp;arg);</span><br><span class="line">  &#125; <span class="hljs-keyword">while</span> (ret.IsEmpty() &amp;&amp; env-&gt;can_call_into_js());</span><br><span class="line">&#125;</span><br><span class="line"><span class="hljs-comment">// uv/timer.c</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">uv_timer_start</span><span class="hljs-params">(<span class="hljs-keyword">uv_timer_t</span>* handle,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                   uv_timer_cb cb,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                   <span class="hljs-keyword">uint64_t</span> timeout,</span></span></span><br><span class="line"><span class="hljs-function"><span class="hljs-params">                   <span class="hljs-keyword">uint64_t</span> repeat)</span> </span>&#123;</span><br><span class="line">  <span class="hljs-comment">// 给uv_timer_t对象初始化相关属性</span></span><br><span class="line">  <span class="hljs-comment">// 并没有JavaScript层面的回调方法，具体的回调也只是C++的RunTimers</span></span><br><span class="line">  handle-&gt;timer_cb = cb;</span><br><span class="line">  handle-&gt;timeout = clamped_timeout;</span><br><span class="line">  handle-&gt;repeat = repeat;</span><br><span class="line">  handle-&gt;start_id = handle-&gt;loop-&gt;timer_counter++;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// 将uv_timer_t添加到timer_heap上</span></span><br><span class="line">  heap_insert(timer_heap(handle-&gt;loop),</span><br><span class="line">              (struct heap_node*) &amp;handle-&gt;heap_node,</span><br><span class="line">              timer_less_than);</span><br><span class="line">  uv__handle_start(handle);</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>V8部分注册在timers阶段的是一个C++的回调方法</strong>，其内部是执行<code>timers_callback_function</code>方法，它从何来来？</p><figure class="highlight c++ hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// timers.cc</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">SetupTimers</span><span class="hljs-params">(<span class="hljs-keyword">const</span> FunctionCallbackInfo&lt;Value&gt;&amp; args)</span> </span>&#123;</span><br><span class="line">  CHECK(args[<span class="hljs-number">0</span>]-&gt;IsFunction());</span><br><span class="line">  CHECK(args[<span class="hljs-number">1</span>]-&gt;IsFunction());</span><br><span class="line">  <span class="hljs-keyword">auto</span> env = Environment::GetCurrent(args);</span><br><span class="line"></span><br><span class="line">  env-&gt;set_immediate_callback_function(args[<span class="hljs-number">0</span>].As&lt;Function&gt;()); <span class="hljs-comment">// 注册了immediate回调</span></span><br><span class="line">  env-&gt;set_timers_callback_function(args[<span class="hljs-number">1</span>].As&lt;Function&gt;()); <span class="hljs-comment">// 注册了timers回调</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// node.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123;</span><br><span class="line">  setupTaskQueue,</span><br><span class="line">  queueMicrotask</span><br><span class="line">&#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'internal/process/task_queues'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> &#123; nextTick, runNextTicks &#125; = setupTaskQueue();</span><br><span class="line">process.nextTick = nextTick;</span><br><span class="line">process._tickCallback = runNextTicks;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; getTimerCallbacks &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'internal/timers'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> &#123; setupTimers &#125; = internalBinding(<span class="hljs-string">'timers'</span>); <span class="hljs-comment">// c++ SetupTimers 方法传到了JavaScript层</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123; processImmediate, processTimers &#125; = getTimerCallbacks(runNextTicks);</span><br><span class="line">setupTimers(processImmediate, processTimers);</span><br></pre></td></tr></table></figure><p>我们通过上述代码看到在<code>node.js</code>里面会将<code>processImmediate</code>和<code>processTimers</code>这两个JavaScript方法注册到对应的C++回调里，之后执行<code>timers_callback_function</code>其实就是执行<code>processTimers</code>方法。</p><p>另外，需要注意<code>微任务</code>相关的代码会被带到<code>getTimerCallbacks</code>。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">getTimerCallbacks</span>(<span class="hljs-params">runNextTicks</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processImmediate</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-comment">// 之后文章在做介绍</span></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">processTimers</span>(<span class="hljs-params">now</span>) </span>&#123;</span><br><span class="line">    nextExpiry = <span class="hljs-literal">Infinity</span>;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">let</span> list;</span><br><span class="line">    <span class="hljs-keyword">let</span> ranAtLeastOneList = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (list = timerListQueue.peek()) &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (list.expiry &gt; now) &#123; <span class="hljs-comment">// 当前列表的过期时间大于now(libuv loop-&gt;time), 还没有到过期或到触发时间</span></span><br><span class="line">        nextExpiry = list.expiry; <span class="hljs-comment">// nextExpiry 设置为 当前列表的过期时间</span></span><br><span class="line">        <span class="hljs-keyword">return</span> refCount &gt; <span class="hljs-number">0</span> ? nextExpiry : -nextExpiry;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span> (ranAtLeastOneList)</span><br><span class="line">        runNextTicks(); <span class="hljs-comment">// 微任务会被触发</span></span><br><span class="line">      <span class="hljs-keyword">else</span></span><br><span class="line">        ranAtLeastOneList = <span class="hljs-literal">true</span>;</span><br><span class="line">      listOnTimeout(list, now);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">listOnTimeout</span>(<span class="hljs-params">list, now</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> msecs = list.msecs;</span><br><span class="line"></span><br><span class="line">    debug(<span class="hljs-string">'timeout callback %d'</span>, msecs);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">var</span> diff, timer;</span><br><span class="line">    <span class="hljs-keyword">let</span> ranAtLeastOneTimer = <span class="hljs-literal">false</span>;</span><br><span class="line">    <span class="hljs-keyword">while</span> (timer = L.peek(list)) &#123; <span class="hljs-comment">// 如果不是一个空的list，持续执行</span></span><br><span class="line">      <span class="hljs-comment">// _idleStart 是插入libuv (loop-&gt;time)的时间</span></span><br><span class="line">      <span class="hljs-comment">// now 是当前libuv 执行此次callback的时间</span></span><br><span class="line">      diff = now - timer._idleStart; </span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// Check if this loop iteration is too early for the next timer.</span></span><br><span class="line">      <span class="hljs-comment">// This happens if there are more timers scheduled for later in the list.</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (diff &lt; msecs) &#123;</span><br><span class="line">        list.expiry = <span class="hljs-built_in">Math</span>.max(timer._idleStart + msecs, now + <span class="hljs-number">1</span>);</span><br><span class="line">        list.id = timerListId++;</span><br><span class="line">        timerListQueue.percolateDown(<span class="hljs-number">1</span>);</span><br><span class="line">        debug(<span class="hljs-string">'%d list wait because diff is %d'</span>, msecs, diff);</span><br><span class="line">        <span class="hljs-keyword">return</span>;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">if</span> (ranAtLeastOneTimer)</span><br><span class="line">        runNextTicks(); <span class="hljs-comment">// 微任务会被触发</span></span><br><span class="line">      <span class="hljs-keyword">else</span></span><br><span class="line">        ranAtLeastOneTimer = <span class="hljs-literal">true</span>;</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// The actual logic for when a timeout happens.</span></span><br><span class="line">      L.remove(timer);</span><br><span class="line"></span><br><span class="line">      <span class="hljs-keyword">const</span> asyncId = timer[async_id_symbol];</span><br><span class="line">      <span class="hljs-keyword">if</span> (!timer._onTimeout) &#123;</span><br><span class="line">        <span class="hljs-keyword">continue</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">try</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> args = timer._timerArgs;</span><br><span class="line">        <span class="hljs-keyword">if</span> (args === <span class="hljs-literal">undefined</span>)</span><br><span class="line">          timer._onTimeout(); <span class="hljs-comment">// _onTimeout setTimeout 回调</span></span><br><span class="line">        <span class="hljs-keyword">else</span></span><br><span class="line">          timer._onTimeout(...args);</span><br><span class="line">      &#125; <span class="hljs-keyword">finally</span> &#123;</span><br><span class="line">        <span class="hljs-comment">// ...</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">if</span> (list === timerListMap[msecs]) &#123;</span><br><span class="line">      <span class="hljs-keyword">delete</span> timerListMap[msecs];</span><br><span class="line">      timerListQueue.shift();</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-keyword">return</span> &#123;</span><br><span class="line">    processImmediate,</span><br><span class="line">    processTimers</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述代码很长，但是很容易理解，就是根据<code>libuv</code>的时间，将到期的定时任务一一执行了，格外需要注意的是微任务的执行<code>runNextTicks</code>，<strong>每次setTimeout的callback之后都会将<code>微任务</code>清空，而不是网上很多文章说的timer阶段之后将微任务清空，这个改动在Node.js 11版本</strong></p><blockquote><p>Timers<br>Interval timers will be rescheduled even if previous interval threw an error. #20002<br><strong>nextTick queue will be run after each immediate and timer. <a href="https://github.com/nodejs/node/pull/22842" target="_blank" rel="noopener">#22842</a></strong></p></blockquote><p>具体的原因是希望和浏览器里的行为更为一直，下面的代码在11之前和之后的执行结果略有不同。</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'time1'</span>);</span><br><span class="line">  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'promise1'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'time2'</span>);</span><br><span class="line">  <span class="hljs-built_in">Promise</span>.resolve().then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'promise2'</span>);</span><br><span class="line">  &#125;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 11之后</span></span><br><span class="line"><span class="hljs-comment">time1</span></span><br><span class="line"><span class="hljs-comment">promise1</span></span><br><span class="line"><span class="hljs-comment">time2</span></span><br><span class="line"><span class="hljs-comment">promise2</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">/* 11之前</span></span><br><span class="line"><span class="hljs-comment">time1</span></span><br><span class="line"><span class="hljs-comment">time2</span></span><br><span class="line"><span class="hljs-comment">promise1</span></span><br><span class="line"><span class="hljs-comment">promise2</span></span><br><span class="line"><span class="hljs-comment">*/</span></span><br></pre></td></tr></table></figure><p><br></p><p><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>至此，libuv和Node.js EventLoop关于<code>各个阶段</code>和<code>setTimeout</code>的实现已经做了简单介绍。具体的还是需要看各自版本的代码而定，不能轻易去“相信”网上的介绍，比如最后一个例子就很容易在不同版本出现不同的执行结果。之后，有时间介绍 <code>nextTick</code>的回调实现，这个比较复杂。</p>]]></content>
    
    <summary type="html">
    
      libuv和Node.js EventLoop关于各个阶段和setTimeout的实现已经做了简单介绍。具体的还是需要看各自版本的代码而定，不能轻易去“相信”网上的介绍，比如最后一个例子就很容易在不同版本出现不同的执行结果。之后，有时间介绍 `nextTick`的回调实现，这个比较复杂。
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>收集Node.js应用的内存堆栈快照和CPU火焰图</title>
    <link href="https://mlib.wang/2020/02/21/node-perf-heapdump-flame-graph/"/>
    <id>https://mlib.wang/2020/02/21/node-perf-heapdump-flame-graph/</id>
    <published>2020-02-20T23:31:54.489Z</published>
    <updated>2020-04-22T02:37:13.067Z</updated>
    
    <content type="html"><![CDATA[<p>如果你在一家对数据安全性很高的公司工作，团队规定不允许提交数据到第三方服务上，甚至连服务器内存、CPU使用情况等监控数据都不行，那对于像<a href="https://cn.aliyun.com/product/nodejs" target="_blank" rel="noopener">Alinode</a>这样监控和排查问题的大杀器基本都是无福享用了。大多数情况不得不面临自己开发一套类似监控体制去为生产环境保驾护航。</p><a id="more"></a><p><br></p><p><br></p><h2 id="数据"><a href="#数据" class="headerlink" title="数据"></a>数据</h2><p><em>Node.js是单进程的，即使像Egg.js这样的项目存在Agent、多个Worker进程，但依旧应该把它们分为独立的进程对待，所以监控的粒度是进程级别。</em></p><h4 id="基础数据"><a href="#基础数据" class="headerlink" title="基础数据"></a>基础数据</h4><ul><li>进程级别：内存、CPU、EventLoop、GC、调用该系统的时间消耗、该系统调用它人系统的时间消耗等。</li><li>系统级别：负载均衡 （<code>os.loadavg()</code>）</li></ul><p>上述这些数据，有些Node.js API直接暴露出来，有些需要写C++扩展去调用底层的V8 API来获取，好在市面上存在比较多的此类类库，比如<a href="https://github.com/RuntimeTools/appmetrics" target="_blank" rel="noopener">IBM appmetrics</a>就不错，它还有很多额外的监控数据可以收集，<code>主动</code>定时将它们提交到Elasticsearch，在用Grafana加载出来，还是很容易做到的。</p><p><br></p><h4 id="内存堆栈快照"><a href="#内存堆栈快照" class="headerlink" title="内存堆栈快照"></a>内存堆栈快照</h4><ul><li>通过多份内存堆栈快照可以帮助我们定位内存溢出的原因。</li></ul><h4 id="CPU火焰图"><a href="#CPU火焰图" class="headerlink" title="CPU火焰图"></a><a href="http://www.brendangregg.com/FlameGraphs/cpuflamegraphs.html" target="_blank" rel="noopener">CPU火焰图</a></h4><ul><li>通过它可以让我们知道是代码的哪部分导致CPU非常繁忙。</li></ul><p>上面这2个文件在系统调优和排查问题时起到至关重要的帮助，但是它们都是以文件的形式存储，又不像<code>基础数据</code>那么简易可以直接塞进DB里；另外获取这些资源过程是影响应用性能的，比如<code>内存堆栈快照</code>因为要罗列出所有的堆栈对象相互之间的关系和字节大小需要一定的计算量和时间，在此过程中系统处于无法响应的状态。为此，我们需要设计一套方法，在需要的时候去通知对应的Node.js进程，<code>被动</code>生成这些文件，而不是向先前那样<code>主动</code>收集。</p><p><br></p><p><br></p><h2 id="命令-amp-传输"><a href="#命令-amp-传输" class="headerlink" title="命令&amp;传输"></a>命令&amp;传输</h2><p>我们需要通过一些方法，告诉对应的Node.js进程该干些什么事情，是生成内存堆栈快照还是CPU火焰图，又或是别的什么。需要一个发送<code>命令</code>的地方，也需要一种方式将命令发送给指定的Node.js进程。将一个个孤立的Node.js进程连接起来有很多方式，比如TCP，或者HTTP。</p><p>我个人比较倾向用TCP，长链、双向、数据帧也轻巧很多，等等。像下图那样将他们连起来，<strong>仅用来示意，具体细节会有些不同，简单的粗暴将单箭头表示HTTP，双箭头表示TCP双向。</strong></p><p><img src="/images/node-perf-heapdump-flame-graph/connection_01.png" alt="连接示意图"></p><ul><li><strong>命令发送：</strong>一般会有一个Web界面，通过按钮提交命令请求。</li><li><strong>Hub：</strong>一个TCP服务，接受命令并将其转发到对应的Node.js进程上。</li><li><strong>Node.js Process:</strong> 可能一台服务器（或者Docker等）就一个Node.js进程，如Express；也有可能如Egg.js一样是多个Node.js进程。</li><li><strong>DFS：</strong>因为现在的服务基本都是部署在像Docker这样虚拟机上的，服务出现问题或人工原因很容易随时被系统销毁导致生产的快照或火焰图丢失，所以需要有个文件服务器持久化它们，因此一旦文件生产后就推送到文件服务器上待使用者去下载它们。</li></ul><p><br></p><p><br></p><h2 id="内存堆栈快照-1"><a href="#内存堆栈快照-1" class="headerlink" title="内存堆栈快照"></a>内存堆栈快照</h2><p>Node.js Process监听到发来的<code>命令</code>，通过调用<a href="https://www.npmjs.com/package/heapdump" target="_blank" rel="noopener">heapdump</a>很容易获得内存堆栈快照，再将文件推送到DFS上。如果想像<code>Alinode</code>那样自动又直接显示内存信息的话，改下<a href="https://github.com/ChromeDevTools/devtools-frontend" target="_blank" rel="noopener">devtools-frontend</a>，将其加入到系统中即可。</p><p><img src="/images/node-perf-heapdump-flame-graph/heapdump_01.png" alt="devtools 自动加载内存快照"></p><p><br></p><p><br></p><h2 id="CPU火焰图-1"><a href="#CPU火焰图-1" class="headerlink" title="CPU火焰图"></a>CPU火焰图</h2><p>火焰图比其它的数据麻烦很多，官方有专门的<a href="https://nodejs.org/zh-cn/docs/guides/diagnostics-flamegraph/" target="_blank" rel="noopener">文档</a>说明了整个流程，总的来说需要<a href="http://www.brendangregg.com/perf.html" target="_blank" rel="noopener">perf</a>和<a href="https://github.com/brendangregg/FlameGraph" target="_blank" rel="noopener">FlameGraph</a>这两个工具，具体的方法随意Google都能查到很多，就不多叙述了，关键是如何将它融入到上述的框架中呢？</p><p>假设和之前一样，Node.js进程用<code>socket.on(&quot;readable&quot;,callback)</code> 或 <code>socket.on(&quot;data&quot;,callback)</code>接受命令，并在callback中开启一个新的进程来执行<code>perf</code>等shell脚本，那么生成的火焰图不准确，为何？</p><p>Node.js是单进程，JavaScript部分是事件循环，密集计算会阻塞其它的操作，比如运行一个<code>斐波那契数列</code>计算。此刻，其它的异步任务就算完成也无法得到执行，比如底层IO获得了命令，但是由于JavaScript堵塞了而无法执行<code>callback</code>创建新进程执行shell脚本。等到<code>斐波那契数列</code>执行完后，callback才被执行。而我们火焰图需要排查的就是什么导致CPU一直繁忙的嗡嗡作响，而上述的问题就是密集的斐波那契数列计算，但是由于JavaScript的执行机制而有可能错过了开启perf的时机。大多数的时候，我们都是发现进程阻塞了或者CPU一直处于繁忙而去主动命令进程开启<code>perf</code>排查问题，所以这个方法获得的数据并不准确。</p><p>如果当前进程一直进程因为繁忙而无法执行新的JavaScript命令，那么我们是否可以通过一个简单的辅助进程来帮忙开启shell脚本呢？</p><h3 id="实验"><a href="#实验" class="headerlink" title="实验"></a>实验</h3><p>因为perf需要Linux环境，我们可以通过Docker在本地启动一个Node.js容器实验下，以Node.js 12为例。</p><p>下载完对应版本的Node.js Docker后，通过下面命令开启一个新的容器，必须带<code>--privileged</code>不然无法使用perf。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">docker run --privileged -itd node:12-buster /bin/bash // 启动</span><br><span class="line"></span><br><span class="line">docker attach xxxx  // 进入</span><br></pre></td></tr></table></figure><p>进入Docker容器后安装<code>perf</code></p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line"></span><br><span class="line">apt-get install linux-perf</span><br><span class="line"></span><br><span class="line">perf_4.19 // 执行该命令查看是否安装成功，不同的linux内核版本对应不同的perf版本</span><br></pre></td></tr></table></figure><p><a href="https://github.com/miser/test-perf" target="_blank" rel="noopener">代码</a></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> &#123;fork &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>)</span><br><span class="line">fork(<span class="hljs-string">'./helper'</span>)</span><br><span class="line"></span><br><span class="line">fibonacci(<span class="hljs-number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fibonacci</span>(<span class="hljs-params">n</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">if</span>(n==<span class="hljs-number">0</span> || n == <span class="hljs-number">1</span>) <span class="hljs-keyword">return</span> n;</span><br><span class="line">  <span class="hljs-keyword">return</span> fibonacci(n<span class="hljs-number">-1</span>) + fibonacci(n<span class="hljs-number">-2</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// helper.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> fs = <span class="hljs-built_in">require</span>(<span class="hljs-string">'fs'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">'path'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> &#123; spawn, exec &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>);</span><br><span class="line"><span class="hljs-keyword">const</span> unzipper = <span class="hljs-built_in">require</span>(<span class="hljs-string">"unzipper"</span>);</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> perfCMD = <span class="hljs-string">'perf_4.19'</span></span><br><span class="line"><span class="hljs-keyword">const</span> perfTime = <span class="hljs-number">60</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">execCMD</span>(<span class="hljs-params">cmd, callback</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">    exec(cmd, (error, stdout, stderr) =&gt; &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'shell: '</span>,cmd)</span><br><span class="line">      <span class="hljs-keyword">if</span> (error) &#123;</span><br><span class="line">        <span class="hljs-built_in">console</span>.error(<span class="hljs-string">`执行的错误: <span class="hljs-subst">$&#123;error&#125;</span>`</span>);</span><br><span class="line">        reject(error)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">if</span>(callback) &#123;</span><br><span class="line">        callback(stdout, stderr, resolve, reject);</span><br><span class="line">      &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">        resolve()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Flame</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>() &#123;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.nodes = [];</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>._init().catch(<span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">e</span>)</span>&#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(e)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _init () &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-built_in">Promise</span>(<span class="hljs-function">(<span class="hljs-params">resolve, reject</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> zipFilePath = path.join(<span class="hljs-string">'.'</span>, <span class="hljs-string">'FlameGraph.zip'</span>)</span><br><span class="line">      <span class="hljs-keyword">const</span> saveDir = process.cwd();</span><br><span class="line">      fs.createReadStream(zipFilePath)</span><br><span class="line">        .pipe(unzipper.Extract(&#123; <span class="hljs-attr">path</span>: saveDir &#125;))</span><br><span class="line">        .on(<span class="hljs-string">"error"</span>, reject)</span><br><span class="line">        .on(<span class="hljs-string">"finish"</span>, () =&gt; &#123;</span><br><span class="line">          <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"zip finish"</span>);</span><br><span class="line">          resolve();</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`chmod 700 ./FlameGraph/stackcollapse-perf.pl`</span>;</span><br><span class="line">      <span class="hljs-keyword">return</span> execCMD(cmd);</span><br><span class="line">    &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`chmod 700 ./FlameGraph/flamegraph.pl`</span>;</span><br><span class="line">      <span class="hljs-keyword">return</span> execCMD(cmd);</span><br><span class="line">    &#125;).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`ps -ef|grep node|grep -v grep|grep -v FlameGraph|awk '&#123;print $2&#125;'`</span>;</span><br><span class="line">      <span class="hljs-keyword">return</span> execCMD(cmd, (stdout, stderr, resolve, reject) =&gt; &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.nodes = stdout.split(<span class="hljs-string">'\n'</span>).filter( <span class="hljs-function"><span class="hljs-params">pid</span> =&gt;</span> pid &amp;&amp; pid != process.pid)</span><br><span class="line">        resolve();</span><br><span class="line">      &#125;);</span><br><span class="line">    &#125;);</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _chownMapFile()&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`chown root /tmp/perf-<span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.nodes[<span class="hljs-number">0</span>]&#125;</span>.map &amp;&amp; <span class="hljs-subst">$&#123;perfCMD&#125;</span> script &gt; nodestacks`</span>;</span><br><span class="line">    execCMD(cmd).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>._genFlameGraph();</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  _genFlameGraph()&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`./FlameGraph/stackcollapse-perf.pl &lt; nodestacks | ./FlameGraph/flamegraph.pl --colors js &gt; node-flamegraph-<span class="hljs-subst">$&#123;process.pid&#125;</span>.svg`</span></span><br><span class="line">    execCMD(cmd).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-built_in">console</span>.log(<span class="hljs-string">'had completed'</span>);</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  record() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> cmd = <span class="hljs-string">`<span class="hljs-subst">$&#123;perfCMD&#125;</span> record -F 99 -p <span class="hljs-subst">$&#123;<span class="hljs-keyword">this</span>.nodes[<span class="hljs-number">0</span>]&#125;</span> -g -- sleep <span class="hljs-subst">$&#123;perfTime&#125;</span>`</span>;</span><br><span class="line">    execCMD(cmd).then(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> t = <span class="hljs-number">1000</span> * (perfTime + <span class="hljs-number">5</span>);</span><br><span class="line">      setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>._chownMapFile()</span><br><span class="line">      &#125;, <span class="hljs-number">1000</span> * (perfTime + <span class="hljs-number">5</span>))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">const</span> flame = <span class="hljs-keyword">new</span> Flame();</span><br><span class="line">setTimeout(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-comment">// 模拟收到tcp命令</span></span><br><span class="line">  flame.record();</span><br><span class="line">&#125;, <span class="hljs-number">1000</span> * <span class="hljs-number">5</span>)</span><br></pre></td></tr></table></figure><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">// package.json</span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"name"</span>: <span class="hljs-string">"test-perf"</span>,</span><br><span class="line">  <span class="hljs-attr">"version"</span>: <span class="hljs-string">"1.0.0"</span>,</span><br><span class="line">  <span class="hljs-attr">"description"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">  <span class="hljs-attr">"main"</span>: <span class="hljs-string">"index.js"</span>,</span><br><span class="line">  <span class="hljs-attr">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"dev"</span>: <span class="hljs-string">"node --perf-basic-prof index.js"</span>,</span><br><span class="line">    <span class="hljs-attr">"clear"</span>: <span class="hljs-string">"rm isolate-* &amp; rm node-flamegraph-*.svg &amp; rm -rf FlameGraph"</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="hljs-attr">"keywords"</span>: [],</span><br><span class="line">  <span class="hljs-attr">"author"</span>: <span class="hljs-string">""</span>,</span><br><span class="line">  <span class="hljs-attr">"license"</span>: <span class="hljs-string">"ISC"</span>,</span><br><span class="line">  <span class="hljs-attr">"dependencies"</span>: &#123;</span><br><span class="line">    <span class="hljs-attr">"unzipper"</span>: <span class="hljs-string">"^0.10.8"</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>index.js: 创建一个辅助进程；执行斐波那契数列计算</li><li>hepler.js: 将压缩的FlameGraph.zip解压 =&gt; 给相关文件执行权限 =&gt; 获得当前系统中除自己以外的Node.js进程号（因为可能是多个，所以是个数组，例子中假设就一个进程）=&gt; 定时模拟获得生成火焰图的命令 =&gt; 执行 perf record =&gt; 延迟5秒后生成火焰图</li><li>package.json: 启动 index.js 需要加上<code>--perf-basic-prof</code>命令行参数；另外还需要<code>unzipper</code>类包</li></ul><p>将他们通过docker cp 从本地上传到docker中，并执行npm i安装依赖。</p><figure class="highlight shell hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev // 开始实验</span><br></pre></td></tr></table></figure><p>随着一阵的风扇狂响（CPU密集计算）之后，火焰图也生成好了，大致如下：</p><p><img src="/images/node-perf-heapdump-flame-graph/node-flamegraph.png" alt="CPU火焰图"></p><p>之前的框架也做部分调整，每个容器需要一个Helper.js进程</p><p><img src="/images/node-perf-heapdump-flame-graph/connection_02.png" alt="调整后的框架"></p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>我觉得程序员和程序猿之间的差别就在有没有一套好的监控体系和善用监控调优及排查问题的方法。如果没办法使用现成的第三方服务，往往需要自己动手去搭建，无论业务多么繁忙，唯有趁手的“兵器”才能取得真经，这是需要据理力争的东西。只有水下的冰够厚，水上的冰山才能更高。</p>]]></content>
    
    <summary type="html">
    
      如果你在一家对数据安全性很高的公司工作，团队规定不允许提交数据到第三方服务上，甚至连服务器内存、CPU使用情况等监控数据都不行，那对于像Alinode这样监控和排查问题的大杀器基本都是无福享用了。大多数情况不得不面临自己开发一套类似监控体制去为生产环境保驾护航。
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>V8是如何怎么处理JavaScript的</title>
    <link href="https://mlib.wang/2020/02/08/v8-parser-compiler-javascript/"/>
    <id>https://mlib.wang/2020/02/08/v8-parser-compiler-javascript/</id>
    <published>2020-02-08T01:18:53.485Z</published>
    <updated>2020-04-22T02:38:07.787Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文介绍的内容已经算是<code>旧闻</code>了，17年的时候就有大量的文章介绍过了，只是2020年伊始的疫情把人困在家里实在无聊，重新翻来几个视频打发下时间，以下文字算是简单梳理，更多的瑰宝需要我们自己翻阅资料研究，<strong>文章中的很多数据应该都过时了吧，仅用来参考吧。</strong></p></blockquote><p><strong>Parer</strong>和<strong>Compiler</strong>是2个重要的过程和概念，理解它们可以帮助开发者根据业务需求写出对V8或其它JavaScript引擎更为“友善”的代码，毕竟花在这两个过程中的成本是巨大的。</p><p><img src="/images/v8-parser-compiler/v8-pare-compile-cost.png" alt="国外几大网站花在Parser上的时间大约在15-20%"></p><a id="more"></a><h1 id="Parser"><a href="#Parser" class="headerlink" title="Parser"></a><strong>Parser</strong></h1><p><img src="/images/v8-parser-compiler/parser-phase.png" alt="红色部分就是接下来讨论的Parser部分"></p><p><strong>解析速率大约为 <code>1 MB / s</code></strong></p><p><br></p><h4 id="V8的Parser分2次解析："><a href="#V8的Parser分2次解析：" class="headerlink" title="V8的Parser分2次解析："></a><strong>V8的Parser分2次解析：</strong></h4><p><code>Layze（Pre-Parsing）：</code></p><ul><li>跳过还未被使用的代码</li><li>不会生成<code>AST</code>，会产生不带有变量引用和声明的<code>Scopes</code>信息</li><li>解析速度是Eage的2倍</li><li>根据JavaScript规范抛出一些特定的错误</li></ul><p><code>Eage（Full-Parsing）：</code></p><ul><li>解析那些被使用的代码</li><li>生成<code>AST</code></li><li>构建具体的<code>Scopes</code>信息，变量的引用、声明等</li><li>抛出所有的语法错误</li></ul><p><br></p><h4 id="Q-为什么会有2次解析？"><a href="#Q-为什么会有2次解析？" class="headerlink" title="Q:为什么会有2次解析？"></a>Q:为什么会有2次解析？</h4><p>如果都是用Full-Parsing的话，那么整个解析会非常漫长浪费时间。我们通过DevTools的<code>coverage</code>工具可以发现页面上大量的代码并没有被使用</p><p><br></p><h4 id="Q-2次解析会有什么负面影响？"><a href="#Q-2次解析会有什么负面影响？" class="headerlink" title="Q:2次解析会有什么负面影响？"></a>Q:2次解析会有什么负面影响？</h4><p>如果代码已经被Pre-Parsing解析过了，当被执行的时候还是会被Full-Parser解析一次那么开销是: <code>0.5 * parse + 1 * parse = 1.5 parse</code> 从某个角度来说更复杂了、开销更大了。鱼和熊掌不可兼得！</p><p><br></p><h4 id="Q-什么样的代码会被-Pre-Parsing-处理，什么样的会被-Full-Parsing-处理？"><a href="#Q-什么样的代码会被-Pre-Parsing-处理，什么样的会被-Full-Parsing-处理？" class="headerlink" title="Q:什么样的代码会被 Pre-Parsing 处理，什么样的会被 Full-Parsing 处理？"></a>Q:什么样的代码会被 <code>Pre-Parsing</code> 处理，什么样的会被 <code>Full-Parsing</code> 处理？</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">let</span> a = <span class="hljs-number">0</span>; <span class="hljs-comment">// Top-Level 顶层的代码都是 Full-Parsing</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// 立即执行函数表达式 IIFE = Immediately Invoked Function Expression</span></span><br><span class="line">(<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eager</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;)(); <span class="hljs-comment">// 函数体是 Full-Parsing</span></span><br><span class="line">                   </span><br><span class="line"><span class="hljs-comment">// 顶层的函数非IIFE</span></span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazy</span>(<span class="hljs-params"></span>) </span>&#123;...&#125; <span class="hljs-comment">// 函数体是 Pre-Parsing</span></span><br><span class="line"></span><br><span class="line">lazy(); <span class="hljs-comment">// -&gt; Full-Parsing 开始解析和编译！</span></span><br><span class="line">                 </span><br><span class="line"><span class="hljs-comment">// 强制触发Full-Parsing解析</span></span><br><span class="line">!<span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eager2</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;, <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">eager3</span>(<span class="hljs-params"></span>) </span>&#123;...&#125; <span class="hljs-comment">// All eager</span></span><br><span class="line"> </span><br><span class="line"><span class="hljs-keyword">let</span> f1 = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazy</span>(<span class="hljs-params"></span>) </span>&#123; ... &#125;; <span class="hljs-comment">// 函数体是 Pre-Parsing</span></span><br><span class="line">              </span><br><span class="line"><span class="hljs-keyword">let</span> f2 = <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazy</span>(<span class="hljs-params"></span>) </span>&#123;...&#125;(); <span class="hljs-comment">// 先触发了lazy 解析, 然后又eager解析</span></span><br></pre></td></tr></table></figure><p><br></p><h4 id="Q-如何强制Full-Parsing-（eager-）？"><a href="#Q-如何强制Full-Parsing-（eager-）？" class="headerlink" title="Q:如何强制Full-Parsing （eager ）？"></a>Q:如何强制Full-Parsing （eager ）？</h4><ul><li>lazy 预编译由前2位首字母决定；所以如果我们想跳过 lazy 触发 eager 编译，我们应该在前面加位操作符，例如’!|~’。</li><li>使用 <a href="https://github.com/nolanlawson/optimize-js" target="_blank" rel="noopener">optimize-js</a> 重新编译代码，具体的性改变可以参考它Github里的测试数据</li></ul><p><br></p><h4 id="Q-什么是连续重新解析"><a href="#Q-什么是连续重新解析" class="headerlink" title="Q:什么是连续重新解析"></a>Q:什么是连续重新解析</h4><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">lazy_outer</span>(<span class="hljs-params"></span>) </span>&#123; <span class="hljs-comment">// lazy parse this</span></span><br><span class="line">  <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">inner2</span>(<span class="hljs-params"></span>) </span>&#123;</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">lazy_outer(); <span class="hljs-comment">// lazy parsing inner &amp; inner2</span></span><br><span class="line">inner(); <span class="hljs-comment">// lazy parsing inner &amp; inner2 (3rd time!)</span></span><br></pre></td></tr></table></figure><p>从上可知，大量的深度内嵌的代码对解析有着性能影响，每一层的深度调用都会引发新一轮的<code>Pre-Parsing</code>。</p><p><br></p><h4 id="Q-既然Parser阶段会性能消耗很大，我们该怎么优化代码？"><a href="#Q-既然Parser阶段会性能消耗很大，我们该怎么优化代码？" class="headerlink" title="Q:既然Parser阶段会性能消耗很大，我们该怎么优化代码？"></a>Q:既然Parser阶段会性能消耗很大，我们该怎么优化代码？</h4><ol><li><strong>尽量减少代码</strong>，可以通过DevTools的<code>coverage</code>工具查看当前页面代码的使用率。</li><li>V8会缓存Parser阶段的结果并保存72小时，如果bundle中间有部分代码被修改了，那么整个bundle的Parser缓存都会失效，所以把经常变动的打包在一起，非经常变动的在一起，比如公共类库和业务代码分离。</li></ol><p><br></p><h4 id="Q-如何评估当前网站代码的Parser时间呢？（包括后面将的Compiler时间）"><a href="#Q-如何评估当前网站代码的Parser时间呢？（包括后面将的Compiler时间）" class="headerlink" title="Q:如何评估当前网站代码的Parser时间呢？（包括后面将的Compiler时间）"></a>Q:如何评估当前网站代码的Parser时间呢？（包括后面将的Compiler时间）</h4><p>1.使用 <code>chrome://tracing/</code>工具，我们以<a href="http://aimianwu.com" target="_blank" rel="noopener">爱眠物</a>为例</p><p>2.打开tracing界面，点击左上角的<code>Record</code>按钮</p><p>3.在弹出的界面中选择<code>Web developer</code>和在Edit categories里面选择<code>v8.runtime_stats</code></p><p>4.在新的Tab中输入 <a href="http://aimianwu.com" target="_blank" rel="noopener">http://aimianwu.com</a> ，回到tracing Tab</p><p>5.等待数据采集完成，然后”停止”记录</p><p>6.选择对应的Process和数据</p><p><img src="/images/v8-parser-compiler/parse-time.png" alt></p><p><img src="/images/v8-parser-compiler/parse-time-1.png" alt></p><p>7.查看V8里的Parse和Compile数据</p><p><img src="/images/v8-parser-compiler/parse-time-2.png" alt></p><p><br></p><p><br></p><h1 id="Compiler-Pipeline"><a href="#Compiler-Pipeline" class="headerlink" title="Compiler Pipeline"></a><strong>Compiler Pipeline</strong></h1><p>随着V8的迭代，整个Compiler Pipeline也在发生翻天覆地的变化。最近的一次大更新是在V8 5.9版本，用 Ignition + TurboFan 代替了从2010一直服务的Full-codegen + Crankshaft组合，当然整个过程也不是一蹴而就的，中间夹杂着特殊的版本， Ignition + TurboFan 、Full-codegen + Crankshaft它们以特殊的方式共存了一段时间，因为一开始TurboFan的性能无法满足需求，可以看<a href="https://docs.google.com/presentation/d/1chhN90uB8yPaIhx_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g18d89eb289_1_389" target="_blank" rel="noopener">这个PPT</a>。</p><p><br></p><h4 id="Q-为什么做了替换？官方介绍"><a href="#Q-为什么做了替换？官方介绍" class="headerlink" title="Q:为什么做了替换？官方介绍"></a>Q:为什么做了替换？<a href="https://v8.dev/blog/launching-ignition-and-turbofan" target="_blank" rel="noopener">官方介绍</a></h4><p>因为老的版本比较激进，直接将JavaScript翻译成了机器码，在执行性能上确实很快，但是带来了几个大问题</p><ul><li>直接将JavaScript编译成机器码既费时间又费内存，几乎占用了V8约1/3的堆内存，导致实际可被使用的内存减少；另外由于复杂的设计导致Crankshaft重复编译代码，拖累性能。</li><li>Crankshaft没有友善处理 try、catch、finally 等关键词 ；维护成本高，需要为多个芯片架构提供优化代码，但性能提升不够明显；对ES新的语法特性支持不够好、也无法支持WebAssembly；<br>在PC端老的组合感受还好，但是在移动端随着网页的不断复杂化，该组合的启动时间和性能慢慢有些力不从心了。</li></ul><p><br></p><h4 id="Q-什么样的代码对-V8-Compiler-友好？"><a href="#Q-什么样的代码对-V8-Compiler-友好？" class="headerlink" title="Q:什么样的代码对 V8 Compiler 友好？"></a>Q:什么样的代码对 V8 Compiler 友好？</h4><p>虽然JavaScript是动态语言，如橡皮泥一样随意被开发者“随意”塑造、快速开发出一个又一个应用，但是没有规矩就会带来混乱，增加编译器的优化负担，目前在V8中优化工作由TurboFan完成。Ignition会收集大量信息交给TurboFan去优化，多方面条件都满足的情况下会被优化成机器码，这个过程成为<code>Optimize</code>，当判断无法优化时就触发去优化——Deoptimize，这些代码逻辑又重新回到Ignition中成为字节码。</p><p>主要有以下2点<a href="https://www.youtube.com/watch?v=p-iiEDtpy6I" target="_blank" rel="noopener">视频</a></p><ul><li>自然是经常被调用的代码部分</li><li>不要总是在改变对象类型（虽然JavaScript是动态的）</li></ul><p><img src="/images/v8-parser-compiler/not-change-types-1.png" alt></p><p><img src="/images/v8-parser-compiler/not-change-types-2.png" alt></p><p><img src="/images/v8-parser-compiler/not-change-types-3.png" alt></p><blockquote><p>如果你总是在改变Objects，V8无法对它做优化。即使做了优化也会被De-optimisation，这意味着会有性能损失。</p></blockquote><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">load</span>(<span class="hljs-params">obj</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> obj.x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-keyword">var</span> obj = &#123;</span><br><span class="line">  x: <span class="hljs-number">1</span>,</span><br><span class="line">  y: <span class="hljs-number">4</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>对编译器而言 <code>obj = {}</code> 是一种类型， <code>obj = { x: &quot;Number&quot; }</code> 是另一种类型，<code>obj = { y: &quot;Number&quot; }</code> 又是一种类型等等，也就说数据类型和字段名必须一致，如果用过静态语言比如C++、Java就很容易理解。</p><p>像下面这样的代码</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">7</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">9</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> &#125;);</span><br></pre></td></tr></table></figure><p>没办法被优化，只有将参数的入参格式一致才行，比如</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-number">7</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-number">9</span>, <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">c</span>: <span class="hljs-number">3</span>, <span class="hljs-attr">d</span>: <span class="hljs-literal">undefined</span> &#125;);</span><br><span class="line">load(&#123; <span class="hljs-attr">x</span>: <span class="hljs-number">4</span>, <span class="hljs-attr">a</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">b</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">c</span>: <span class="hljs-literal">undefined</span>, <span class="hljs-attr">d</span>: <span class="hljs-number">1</span> &#125;);</span><br></pre></td></tr></table></figure><p>是不是觉得学习TypeScript很重要了呢？</p><h1 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h1><p><code>V8</code>在不断的迭代和进步，还有<a href="https://blog.chromium.org/2015/03/new-javascript-techniques-for-rapid.html" target="_blank" rel="noopener">Script Streaming</a>等等技术没有介绍。随便翻阅 <a href="https://v8.dev/" target="_blank" rel="noopener">https://v8.dev/</a> 就会发现数不尽的干货在里面躺着，等我们动手发掘和尝试。作为一个JavaScript工程师而言，无论是学习V8还是其它的编译引擎都能使得我们更好的写出高性能代码、优化代码、甚至在做架构的时候提供帮助。</p><p>另外，随着WebAssembly进入浏览器和Node.js，越来越多的C++等技术会被更方便的加入到JavaScript阵营当中。最近买了树莓派和Arduino，在它们身上使用JavaScript做一些功能多多少少离不开C/C++，感觉到了需要系统化学习C/C++的时候了。</p><h3 id="主要参考："><a href="#主要参考：" class="headerlink" title="主要参考："></a>主要参考：</h3><p><a href="https://www.youtube.com/watch?v=Fg7niTmNNLg" target="_blank" rel="noopener">Parsing JavaScript - better lazy than eager</a></p><p><a href="https://www.youtube.com/watch?v=p-iiEDtpy6I" target="_blank" rel="noopener">JavaScript engines - how do they even? </a></p><p><a href="https://medium.com/reloading/javascript-start-up-performance-69200f43b201" target="_blank" rel="noopener">JavaScript Start-up Performance</a></p><p><a href="https://docs.google.com/presentation/d/1chhN90uB8yPaIhx_h2M3lPyxPgdPmkADqSNAoXYQiVE/edit#slide=id.g1ba5e472dd_0_103" target="_blank" rel="noopener">V8: Hooking up the Ignition to the Turbofan</a></p>]]></content>
    
    <summary type="html">
    
      Parer和Compiler是2个重要的过程和概念，理解它们可以帮助开发者根据业务需求写出对V8或其它JavaScript引擎更为“友善”的代码，毕竟花在这两个过程中的成本是巨大的。
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Express Gateway</title>
    <link href="https://mlib.wang/2020/01/22/express-gateway/"/>
    <id>https://mlib.wang/2020/01/22/express-gateway/</id>
    <published>2020-01-22T07:32:03.586Z</published>
    <updated>2020-04-22T02:36:03.235Z</updated>
    
    <content type="html"><![CDATA[<p>为了更好的做BFF层，最近看了一些网关资料，Node.js的网关类库相对薄弱很多，主要有2个</p><ul><li><a href="https://www.express-gateway.io/" target="_blank" rel="noopener">Express Gateway</a></li><li><a href="https://moleculer.services/" target="_blank" rel="noopener">Moleculer</a></li></ul><p>和Lua <a href="https://konghq.com/" target="_blank" rel="noopener">Kong</a>相比缺少很多刚需，比如金丝雀发布、灰度发布等等；和Java Zuul等相比，又少了很多中文文档。但是不管如何这2个是Javascript技术栈的，对于一个Node.js程序工作者来说怎能不香呢？</p><p>今天我们主要介绍<strong>Express Gateway</strong>，背靠强大的Express社区，很多现成的中间件可以运用其中，省去了不少开发成本和风险。一些不是很大的项目或者没有时间慢慢构建底层的团队来说，我觉得可以试试。</p><a id="more"></a><p><br></p><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><h3 id="Endpoints"><a href="#Endpoints" class="headerlink" title="Endpoints"></a><strong>Endpoints</strong></h3><p>URL的集合，分为2类：</p><ul><li>API endpoints</li><li>Service endpoints</li></ul><p>API endpoints是暴露给外网访问的，通过它将请求转发到具体的内网Service endpoints服务上。</p><h3 id="Policies"><a href="#Policies" class="headerlink" title="Policies"></a><strong>Policies</strong></h3><p>策略（policy）以Express Middleware的方式相互组织，作用在API请求和网关的响应上，包含触发条件、具体行为和参数。</p><h3 id="Pipelines"><a href="#Pipelines" class="headerlink" title="Pipelines"></a><strong>Pipelines</strong></h3><p>一个管道（pipeline）是API endpoints上一组策略（policies）的连接关系，管道里的策略被定义和执行。通过管道配置各种策略，一个API请求由API endpoint接受。在管道里的最后一个策略通常是代理，它将请求路由到一个service endpoint。</p><p><br></p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>官方的<a href="https://www.express-gateway.io/getting-started/" target="_blank" rel="noopener">Installation</a>，可以通过CLI命令快速启动一个项目</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">npm install -g express-gateway</span><br><span class="line"></span><br><span class="line">eg gateway create</span><br><span class="line"></span><br><span class="line">cd <span class="hljs-string">`Dir Path`</span> &amp;&amp; npm start</span><br></pre></td></tr></table></figure><p><strong>2个重要的配置文件</strong></p><ul><li>system.config.yml：主要是数据库、加密方式、session等等</li><li>gateway.config.yml：主要就是路由相关的策略</li></ul><p>在浏览器里输入 <a href="http://localhost:8080/ip" target="_blank" rel="noopener">http://localhost:8080/ip</a> ，就会被路由到 <a href="https://httpbin.org/ip" target="_blank" rel="noopener">https://httpbin.org/ip</a> 这个网站，获得一个JSON数据</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="hljs-attr">"origin"</span>: <span class="hljs-string">"180.167.xxx.xxx"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然这是一个超级简单的例，用的是自带的proxy策略，如果有多个微服务节点默认使用的是<code>round-robin</code>做负载均衡，除此之外是<code>static</code>方式，只能指定死IP或URL了，显然无法满足真实的场景，很多时候需要我们自己根据实际的情况做代理开发，比如从注册中心获取微服务IP和端口做路由转发。</p><h2 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h2><p>具体的代码可以在<a href="https://github.com/miser/express-gateway-example" target="_blank" rel="noopener">express-gateway-example</a>查看。</p><ul><li>使用JWT做用户登录验证</li><li>2个微服务，一个是<code>account</code>，另一个是<code>banner</code><ul><li>account: 用户登录和需要验证有效身份后显示用户ID</li><li>banner: 无需登录就能访问2个banner图片</li></ul></li></ul><p>在新的文件夹下（express-gateway-example），通过eg(express-gateway)和express命令工具分别生成网关项目gateway和2个微服务项目account、banner，另外新建一个存放JWT秘钥的目录<code>secret-files</code>，在该目录下通过下面命令创建新的秘钥</p><figure class="highlight c hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">openssl genrsa -out <span class="hljs-keyword">private</span>.pem <span class="hljs-number">512</span></span><br><span class="line">openssl rsa -in <span class="hljs-keyword">private</span>.pem -outform PEM -pubout -out <span class="hljs-keyword">public</span>.pem</span><br></pre></td></tr></table></figure><p><strong>修改网关配置</strong></p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">//</span> <span class="hljs-string">gateway.config.yml</span></span><br><span class="line"><span class="hljs-attr">http:</span></span><br><span class="line"><span class="hljs-attr">  port:</span> <span class="hljs-number">8080</span></span><br><span class="line"><span class="hljs-comment"># admin:</span></span><br><span class="line"><span class="hljs-comment">#   port: 9876</span></span><br><span class="line"><span class="hljs-comment">#   host: localhost</span></span><br><span class="line"><span class="hljs-attr">apiEndpoints:</span></span><br><span class="line"><span class="hljs-attr">  login:</span></span><br><span class="line"><span class="hljs-attr">    host:</span> <span class="hljs-string">localhost</span></span><br><span class="line"><span class="hljs-attr">    paths:</span> <span class="hljs-string">'/account/login'</span></span><br><span class="line"><span class="hljs-attr">  account:</span></span><br><span class="line"><span class="hljs-attr">    host:</span> <span class="hljs-string">localhost</span></span><br><span class="line"><span class="hljs-attr">    paths:</span> <span class="hljs-string">'/account/*'</span></span><br><span class="line"><span class="hljs-attr">  banner:</span></span><br><span class="line"><span class="hljs-attr">    host:</span> <span class="hljs-string">localhost</span></span><br><span class="line"><span class="hljs-attr">    paths:</span> <span class="hljs-string">'/banner/*'</span></span><br><span class="line"><span class="hljs-attr">serviceEndpoints:</span></span><br><span class="line"><span class="hljs-attr">  accountSrv:</span></span><br><span class="line"><span class="hljs-attr">    url:</span> <span class="hljs-string">'http://localhost:3001'</span></span><br><span class="line"><span class="hljs-attr">  bannerSrv:</span></span><br><span class="line"><span class="hljs-attr">    url:</span> <span class="hljs-string">'http://localhost:3002'</span></span><br><span class="line"><span class="hljs-attr">policies:</span></span><br><span class="line"><span class="hljs-bullet">  -</span> <span class="hljs-string">jwt</span></span><br><span class="line"><span class="hljs-bullet">  -</span> <span class="hljs-string">proxy</span></span><br><span class="line"><span class="hljs-attr">pipelines:</span></span><br><span class="line"><span class="hljs-attr">  login:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">login</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">accountSrv</span> </span><br><span class="line"><span class="hljs-attr">  banner:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">banner</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">bannerSrv</span></span><br><span class="line"><span class="hljs-attr">  account:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">account</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - jwt:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              jwtExtractor:</span> <span class="hljs-string">'query'</span></span><br><span class="line"><span class="hljs-attr">              jwtExtractorField:</span> <span class="hljs-string">'token'</span></span><br><span class="line"><span class="hljs-attr">              checkCredentialExistence:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-attr">              secretOrPublicKeyFile:</span> <span class="hljs-string">'../secret-files/public.pem'</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">accountSrv</span></span><br></pre></td></tr></table></figure><p><strong>3个apiEndpoints</strong></p><ul><li>login：访问path <em>/account/login</em></li><li>account：访问path <em>/account/*</em></li><li>banner：访问path <em>/banner/*</em></li></ul><p><strong>2个serviceEndpoints</strong></p><ul><li>accountSrv：对应<code>account</code>服务，本地端口3001</li><li>bannerSrv：对应<code>banner</code>服务，本地端口3002</li></ul><p><strong>配置pipelines</strong></p><ul><li>login和banner这2个apiEndpoints被分别简单的路由到各自的微服务上</li><li>account这个apiEndpoints除了路由外还有JWT策略，action告诉系统它将以URL query的token字段传递加密的认证信息</li></ul><p><strong>启动项目和访问它们</strong></p><p>在各个目录下通过<code>npm start</code>分别启动它们，通过Postman GET请求<a href="http://localhost:8080/account/profile" target="_blank" rel="noopener">http://localhost:8080/account/profile</a> 发现返回401，可见没有通过token验证就会返回401，符合pipelines里account的配置；GET 请求<a href="http://localhost:8080/banner/" target="_blank" rel="noopener">http://localhost:8080/banner/</a> 会正常返回数据，它没有被JWT策略约束</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&quot;code&quot;:200,&quot;message&quot;:&quot;success&quot;,&quot;data&quot;:[&quot;/images/1.png&quot;,&quot;/images/2.png&quot;]&#125;</span><br></pre></td></tr></table></figure><p><strong>获取token</strong></p><p>POST <a href="http://localhost:8080/account/login" target="_blank" rel="noopener">http://localhost:8080/account/login</a> ,它在配置中也未加JWT策略，返回如下：</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,</span><br><span class="line">    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"success"</span>,</span><br><span class="line">    <span class="hljs-attr">"token"</span>: <span class="hljs-string">"eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6MjAyMCwibmFtZSI6Im1pc2VyIiwiaWF0IjoxNTgwMTQxODIwLCJleHAiOjE1ODAxNDU0MjB9.mixQa9rJqQAT2makAqWfpOCxTC-r0XussuoSrYYTb0aXcs0gMItSI5Aj6ShneX2H1BW1grXwtkrSqY8_FfhIjA"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>将token以URL query形式传参，重新访问profile接口，就正常返回用户ID了</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,</span><br><span class="line">    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"success"</span>,</span><br><span class="line">    <span class="hljs-attr">"data"</span>: &#123;</span><br><span class="line">        <span class="hljs-attr">"id"</span>: <span class="hljs-string">"2020"</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上述就是一个简单的Gateway简单的例子，除开内置的一些策略（中间件）外，我们还可以自己开发一些中间件来满足具体需求——<strong><code>插件</code></strong>。</p><p><br></p><h2 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h2><p>插件分两种：</p><ul><li><p><a href="https://www.express-gateway.io/docs/policies/customization/conditions/" target="_blank" rel="noopener">Conditions</a></p></li><li><p><a href="https://www.express-gateway.io/docs/policies/" target="_blank" rel="noopener">Policies</a></p></li></ul><p>无论是上述哪一个，写好后都要注册到网关中，在gateway项目中新建<code>plugins</code>目录，及其子目录<code>policies</code>、<code>conditions</code>， 和<code>manifest.js</code>、<code>policies/index.js</code>、<code>conditions/index.js</code>文件</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// manifest.js</span></span><br><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  version: <span class="hljs-string">'0.0.1'</span>,</span><br><span class="line">  init: <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params">pluginContext</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> policy = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./policies/index.js'</span>);</span><br><span class="line">    pluginContext.registerPolicy(policy);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> condition = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./conditions/index.js'</span>);</span><br><span class="line">    pluginContext.registerCondition(condition);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过registerPolicy和registerCondition将策略和条件注册到网关系统中，另外在<code>system.config.yml</code>配置文件中添加插件的配置路径</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">//</span> <span class="hljs-string">system.config.yml</span></span><br><span class="line"><span class="hljs-attr">plugins:</span></span><br><span class="line"><span class="hljs-attr">  example:</span></span><br><span class="line"><span class="hljs-attr">    package:</span> <span class="hljs-string">'./plugins/manifest.js'</span></span><br></pre></td></tr></table></figure><p><strong>Conditions 条件</strong></p><p>它通过定义一个方法来判断是否执行或跳过一个策略</p><blockquote><h5 id="function-req-conditionConfig-gt-true-false-Handler"><a href="#function-req-conditionConfig-gt-true-false-Handler" class="headerlink" title="function (req, conditionConfig) =&gt; true/false Handler"></a><code>function (req, conditionConfig) =&gt; true/false</code> Handler</h5><ul><li>Executes on each request in current pipeline. If not matched will prevent policy from being fired</li></ul></blockquote><p>在上面的例子中，我们在apiEndpoints和pipelines都定义了一个login，其实它是accountSrv的一个特殊的存在，除了login其它的url地址都是受JWT策略约束的，按照之前的写法显得格外的冗余，我们可以通过一个Condition来做改进，重新改写gateway.config.yml</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-string">//</span> <span class="hljs-string">gateway.config.yml</span></span><br><span class="line"><span class="hljs-attr">apiEndpoints:</span></span><br><span class="line">  <span class="hljs-comment"># login:</span></span><br><span class="line">  <span class="hljs-comment">#   host: localhost</span></span><br><span class="line">  <span class="hljs-comment">#   paths: '/account/login'</span></span><br><span class="line">  </span><br><span class="line"><span class="hljs-comment"># ...</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-attr">pipelines:</span></span><br><span class="line">  <span class="hljs-comment"># login:</span></span><br><span class="line">  <span class="hljs-comment">#   apiEndpoints:</span></span><br><span class="line">  <span class="hljs-comment">#     - login</span></span><br><span class="line">  <span class="hljs-comment">#   policies:</span></span><br><span class="line">  <span class="hljs-comment">#     - proxy:</span></span><br><span class="line">  <span class="hljs-comment">#         - action:</span></span><br><span class="line">  <span class="hljs-comment">#             serviceEndpoint: accountSrv </span></span><br><span class="line"><span class="hljs-attr">  account:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">account</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - jwt:</span></span><br><span class="line"><span class="hljs-bullet">          -</span> </span><br><span class="line"><span class="hljs-attr">            condition:</span></span><br><span class="line"><span class="hljs-attr">              name:</span> <span class="hljs-string">'white-list'</span></span><br><span class="line"><span class="hljs-attr">              list:</span> <span class="hljs-string">['/account/login']</span></span><br><span class="line"><span class="hljs-attr">            action:</span></span><br><span class="line"><span class="hljs-attr">              jwtExtractor:</span> <span class="hljs-string">'query'</span></span><br><span class="line"><span class="hljs-attr">              jwtExtractorField:</span> <span class="hljs-string">'token'</span></span><br><span class="line"><span class="hljs-attr">              checkCredentialExistence:</span> <span class="hljs-literal">false</span></span><br><span class="line"><span class="hljs-attr">              secretOrPublicKeyFile:</span> <span class="hljs-string">'../secret-files/public.pem'</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">accountSrv</span></span><br></pre></td></tr></table></figure><p>我们看到在jwt下面多了一个condition，然后在<code>conditions/index.js</code>里实现一个简单的URL Path 过滤</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  name: <span class="hljs-string">'white-list'</span>,</span><br><span class="line">  schema: &#123;</span><br><span class="line">    $id: <span class="hljs-string">'white-list'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  handler: <span class="hljs-function"><span class="hljs-params">conditionConfig</span> =&gt;</span> req =&gt; &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> conditionConfig.list.indexOf(req.url) &lt; <span class="hljs-number">0</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>这个Condition就完成了白名单功能了。</p><p><strong>Policies 策略</strong></p><p>它通过一个中间件方法对所有流入网关请求的预处理</p><p>结合上面的banner接口，我们新开发了一个v2版本的banner列表接口<code>/banner/v2/list</code>，为了老版本的客户端依旧能通过<code>/banner</code>接口访问到新的v2版本，我们需要做一个URL替换</p><figure class="highlight yaml hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-attr">pipelines:</span></span><br><span class="line"><span class="hljs-attr">  banner:</span></span><br><span class="line"><span class="hljs-attr">    apiEndpoints:</span></span><br><span class="line"><span class="hljs-bullet">      -</span> <span class="hljs-string">banner</span></span><br><span class="line"><span class="hljs-attr">    policies:</span></span><br><span class="line"><span class="hljs-attr">      - rewrite:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              search:</span> <span class="hljs-string">'/banner'</span></span><br><span class="line"><span class="hljs-attr">              replace:</span> <span class="hljs-string">'/banner/v1/list'</span></span><br><span class="line"><span class="hljs-attr">      - proxy:</span></span><br><span class="line"><span class="hljs-attr">          - action:</span></span><br><span class="line"><span class="hljs-attr">              serviceEndpoint:</span> <span class="hljs-string">bannerSrv</span></span><br></pre></td></tr></table></figure><p>在<code>policies/index.js</code>添加替换方法</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-built_in">module</span>.exports = &#123;</span><br><span class="line">  name: <span class="hljs-string">'rewrite'</span>,</span><br><span class="line">  schema: &#123;</span><br><span class="line">    $id: <span class="hljs-string">'rewrite'</span>,</span><br><span class="line">  &#125;,</span><br><span class="line">  policy: <span class="hljs-function">(<span class="hljs-params">actionParams</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-function">(<span class="hljs-params">req, res, next</span>) =&gt;</span> &#123;</span><br><span class="line">      req.url = req.url.replace(actionParams.search, actionParams.replace);</span><br><span class="line">      next()</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>当我们再GET <a href="http://localhost:8080/banner/" target="_blank" rel="noopener">http://localhost:8080/banner/</a> 时候，将返回新的v2版本的数据</p><figure class="highlight json hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    <span class="hljs-attr">"code"</span>: <span class="hljs-number">200</span>,</span><br><span class="line">    <span class="hljs-attr">"message"</span>: <span class="hljs-string">"success"</span>,</span><br><span class="line">    <span class="hljs-attr">"data"</span>: [</span><br><span class="line">        <span class="hljs-string">"/images/v2_1.png"</span></span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，简单的URL地址替换就完成了。</p><p><br></p><p><br></p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上诉只是Express-Gateway的一角，还有很多有趣灵活的功能值得慢慢探索。BFF层最为整个大系统的前沿征地，而网关更是前沿的前沿，配合GraphQL我相信能不断释放出JavaScript快速开发和迭代的能力，为客户端提供更好的服务和需求响应。</p>]]></content>
    
    <summary type="html">
    
      为了更好的做BFF层，最近看了一些网关资料，Node.js的网关类库相对薄弱很多。Express Gateway，背靠强大的Express社区，很多现成的中间件可以运用其中，省去了不少开发成本和风险。
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>2019 工作总结</title>
    <link href="https://mlib.wang/2019/12/30/summary-2019/"/>
    <id>https://mlib.wang/2019/12/30/summary-2019/</id>
    <published>2019-12-30T15:30:00.000Z</published>
    <updated>2019-12-31T10:36:39.004Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>It was the best of times, it was the worst of times.</p></blockquote><p>如果真要用一句话形容2019年工作的话，上述的<strong>双城记</strong>节选我觉得是极好。大概2018年尾的时候，公司的前端团队开始用Node.js做些后端业务等相关的工作并积累经验，与现有的Java基础架构做融合，微服务<a href="https://github.com/Netflix/eureka" target="_blank" rel="noopener">Eureka</a>、分布式协调服务<a href="https://zookeeper.apache.org/" target="_blank" rel="noopener">ZooKeeper</a>、分布式配置管理平台<a href="https://disconf.readthedocs.io/zh_CN/latest/" target="_blank" rel="noopener">Discon</a>、应用监控<a href="https://github.com/dianping/cat" target="_blank" rel="noopener">Cat</a>、消息列队<a href="https://rocketmq.apache.org/" target="_blank" rel="noopener">RocketMQ</a>、分布式署存储服务<a href="https://github.com/chrislusf/seaweedfs" target="_blank" rel="noopener">SeaweedFS</a>、数据库<a href="https://www.mysql.com/cn/" target="_blank" rel="noopener">MySQL</a>等等，大量的知识扑面而来。幸好之前有.NET C# + Javascript做Web开发经历，加上一些Node.js开发经验，比如<a href="http://aimianwu.com" target="_blank" rel="noopener">爱眠物</a>等等，上手掌握并不难。基本上每天都有很多东西可以学，上半年忙着产出业务，也忙着封装一些基于<code>Egg.js</code>适合公司项目的基础代码。不过问题也是频发，上面提到的很多东西并非是Node.js生态圈大量使用的，引用一些冷门的第三个类库暴露出了EventLoop被卡住、Memory Leak的情况，下半年忙着优化和排查。</p><a id="more"></a><p><br></p><h3 id="EventLoop问题"><a href="#EventLoop问题" class="headerlink" title="EventLoop问题"></a>EventLoop问题</h3><p>我们的Node.js程序发布到测试或者生产，经常服务端出现大量TCP <code>Close Wait</code>的情况，从TCP的信息反馈把重点都放在了网络层面，因为大量Close Wait导致服务无法响应新的请求，以为是上下游网络的超时时间问题，但是无论如何通过Node.js的Javascript层面做实验都未能出现，后来又查系统级别的配置问题等等，都是没查出一个所以然。</p><p><strong>我之前写的各种Node.js服务都跑的好好的，为什么现在这家公司会出现卡死的问题呢？难道把锅甩给系统环境？</strong></p><p>困惑和压力倍增，毕竟项目已经上生产了，金融服务出一点问题都是头大的事情。后来用<code>alinode</code>做监控，可惜我们的节点都在国外，而免费版本对国外节点并不友好，总是会断了监控数据。无奈只能麻烦运维同事帮忙去Docker上生成发生问题时候的<code>火焰图</code>，发现是<code>Cat</code>导致的，底层的C++代码阻碍了EventLoop的正常运行，把整个Node.js进程给卡死了。<br><img src="/images/summary-2019/1.png" alt="catMessageSenderFun方法几乎占据了一整行"></p><p>或许你会问，<strong>为什么不早点搭建有效的监控系统去排查这些问题呢？或许就不会那么被动了！</strong></p><p>主要有3点：</p><ol><li>Node.js在我们上海技术团队内部算是兴起，我们希望能承接更多的业务等去做，就如同<strong>创业</strong>一样，团队自己的技术栈在公司内部使用的多了，自然有更多资源招兵买马为以后大前端、BFF层搭建做准备。可以理解为创业公司不断的做业务拉投资，我相信在很多大点的公司，很多小团队都会有这种创业的感觉</li><li>每个公司所使用的某个技术栈都有自己的定位，我们也在不同领域做尝试，有倾向业务的、有做基础设施搭建的等，也在寻找Node.js适合当前公司的定位</li><li>经验还是缺乏点，当时运维已经有了相关对Docker的系统监控，加上<code>Cat</code>业务监控感觉能抵挡一段时间，但是万万没想到就是缺少CPU的火焰图和内存堆栈图信息导致排查问题困难重重</li></ol><p><br></p><h3 id="Memory-Leak问题"><a href="#Memory-Leak问题" class="headerlink" title="Memory Leak问题"></a>Memory Leak问题</h3><p>前后经历了2次较大的内存泄露问题</p><p><strong>陌生类库：</strong> 其实也是知道要谨慎选择类库的使用，但有时候又该怎么说呢…</p><p><strong>Vue SSR：</strong> 这个问题是书写Vue相关代码时候没注意导致的，其作者在Github上也留言指出了相关的<a href="https://github.com/vuejs/vue/issues/5089" target="_blank" rel="noopener">解决方法</a></p><p><img src="/images/summary-2019/2.jpg" alt="https://github.com/vuejs/vue/issues/5089"></p><p><strong>目前组内对前端或者Node.js的监控体系在逐步搭建和迭代的过程中，一个监控Hub，通过TCP通信将所有的Node.js进程与其进行长连接，实时双向传输数据，按照命令生成火焰图或者内存堆栈信息。</strong></p><p><br></p><h3 id="优化了静态资源打包和分发流程"><a href="#优化了静态资源打包和分发流程" class="headerlink" title="优化了静态资源打包和分发流程"></a>优化了静态资源打包和分发流程</h3><p>打包这个东西自然还是基于<code>Webpack</code>的封装，谁让人家NB呢。整体流程之前比较复杂，做了一次重CI的优化，也适合目前的小型团队使用，从中抽取了一套插件式的程序加载流程，整体思想还是抄的<code>Egg.js</code>，谁让人家好用好扩展呢！</p><p><strong>为什么不完全基于Egg.js的插件开发方式？</strong></p><p>团队对底层架构级的东西不能完全基于Egg.js，会有更多多元化的框架引入（看具体场景，尽量少，但万一呢），通过适配层就能让底层代码依附到不同框架上。所以我既不能依附Webpack写太多插件，也不能依附其它的Node.js应用框架，毕竟Node.js五花八门、百家争鸣，我们想办法把他们粘合在一起就好，所以需要一套自己的加载器。</p><p><br></p><p><br></p><h2 id="从2019迈向2020"><a href="#从2019迈向2020" class="headerlink" title="从2019迈向2020"></a>从2019迈向2020</h2><p>2019年对我而言确实又坏又好，坏的是工作上的问题一个个来，万幸的是都一个个解决和迭代中了，确实经历多了，学到的东西和成长也就多了。期望2020能把一直想做的BFF层可以慢慢做起来，另外监控等小项目能有机会开源。</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;It was the best of times, it was the worst of times.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;如果真要用一句话形容2019年工作的话，上述的&lt;strong&gt;双城记&lt;/strong&gt;节选我觉得是极好。大概2018年尾的时候，公司的前端团队开始用Node.js做些后端业务等相关的工作并积累经验，与现有的Java基础架构做融合，微服务&lt;a href=&quot;https://github.com/Netflix/eureka&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Eureka&lt;/a&gt;、分布式协调服务&lt;a href=&quot;https://zookeeper.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;ZooKeeper&lt;/a&gt;、分布式配置管理平台&lt;a href=&quot;https://disconf.readthedocs.io/zh_CN/latest/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discon&lt;/a&gt;、应用监控&lt;a href=&quot;https://github.com/dianping/cat&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Cat&lt;/a&gt;、消息列队&lt;a href=&quot;https://rocketmq.apache.org/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;RocketMQ&lt;/a&gt;、分布式署存储服务&lt;a href=&quot;https://github.com/chrislusf/seaweedfs&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;SeaweedFS&lt;/a&gt;、数据库&lt;a href=&quot;https://www.mysql.com/cn/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;MySQL&lt;/a&gt;等等，大量的知识扑面而来。幸好之前有.NET C# + Javascript做Web开发经历，加上一些Node.js开发经验，比如&lt;a href=&quot;http://aimianwu.com&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;爱眠物&lt;/a&gt;等等，上手掌握并不难。基本上每天都有很多东西可以学，上半年忙着产出业务，也忙着封装一些基于&lt;code&gt;Egg.js&lt;/code&gt;适合公司项目的基础代码。不过问题也是频发，上面提到的很多东西并非是Node.js生态圈大量使用的，引用一些冷门的第三个类库暴露出了EventLoop被卡住、Memory Leak的情况，下半年忙着优化和排查。&lt;/p&gt;
    
    </summary>
    
      <category term="work" scheme="https://mlib.wang/categories/work/"/>
    
    
  </entry>
  
  <entry>
    <title>2019国庆一人初游舟山</title>
    <link href="https://mlib.wang/2019/10/06/travel-zhoushan/"/>
    <id>https://mlib.wang/2019/10/06/travel-zhoushan/</id>
    <published>2019-10-05T22:11:21.849Z</published>
    <updated>2020-04-22T02:35:06.887Z</updated>
    
    <content type="html"><![CDATA[<p>国庆一家三口分开旅行，各有自己的目的地，我选了舟山，离开上海不远，之前从来没有去过。一人的旅行自然应该惬意为主，打着走到哪算哪的政策主张，也给自己埋下不少的坑。</p><a id="more"></a><p><br></p><h3 id="住宿"><a href="#住宿" class="headerlink" title="#住宿"></a><strong>#住宿</strong></h3><p>黄金周不光是游客的节日，更是商家的盛日，酒店价格也是水涨船高，本想非拖家带口的，不需要离市区多近，经济实惠就行，然后我就在<code>Airbnb</code>上选了一个好评不错的公寓酒店，宽敞、干净、便宜，一个房间可以放下1个主床、1个小床、1个写字台、1个休闲圆桌、3把椅子等，可惜卫生间和淋浴室不怎样，2夜才600不到，地方大约在下图红框内，舟山的汽车城边上。本想在客运中心附近，我自己坐大巴车来回方便，但是它并非是我下车的舟山普陀客运中心（下图右下角那个），打车过来100多:(，出租车司机都不忍心我的旅行泡汤劝我换个酒店（<code>扎心</code>）。</p><p><img src="/images/travel-zhoushan/travel-zhoushan-01.png" alt="本想着离江海近，可以去逛逛的，最后还是没去"></p><p>从酒店出来，和店员打听哪里有夜排档之类，得到的答案是各种遥远，最后选了相对近一点的<code>定海海鲜夜排档</code>，下图位置。一路公交晃晃悠悠，从荒郊野外到市区，感受舟山。</p><p><img src="/images/travel-zhoushan/travel-zhoushan-03.png" alt="不是吃货，选海鲜更多是来舟山的仪式感吧"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-02.jpg" alt="酒店附近的公交车站牌感受下它的荒凉，当时给我一种末世的感觉"></p><p><br></p><h3 id="吃海鲜"><a href="#吃海鲜" class="headerlink" title="#吃海鲜"></a><strong>#吃海鲜</strong></h3><p>到了地方，一条长长的海鲜排档位于2层，看不到底。可以边吃边看江海的风景，对面是若干座小岛，突然心中涌上<code>江枫渔火对愁眠</code>的诗句，不对情不对景色，但也是唯一的瞬间感觉了。像我这样的1人“小客户”，自然不受各个小店老板们的待见，毕竟人家做的是大桌子生意，我只能在不耐烦的目光中点了3个小菜坐在了离风景最远的角落里——一个小桌子上吃起了我<code>海鲜大餐</code>。</p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-04.jpg" alt="定海海鲜夜排档"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-05.jpg" alt="看不到底的店铺，看不完的人群1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-06.jpg" alt="吃不完的海鲜1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-07.jpg" alt="吃不完的海鲜2"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-08.jpg" alt="江枫渔火1"></p><video width="100%" muted controls><br>  <source id="mp4" src="/images/travel-zhoushan/travel-zhoushan-15.mp4"><br>  Your browser does not support the video tag.<br></video><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-09.jpg" alt="从角落的小饭桌望出去"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-10.jpg" alt="我的盘中餐，蛏子和花甲，基本没沙子，蛏子其实很肥大，我没拍好"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-11.jpg" alt="我的盘中餐，盐爆虾，还行吧"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-12.jpg" alt="我的盘中餐，章鱼炒青椒，触须里囤积了很多汁水，一口下去才知道什么叫爆汁"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-13.jpg" alt="此情此景多少要喝点"></p><p>吃完后，走了小几公里到了定海区的商业中心——<code>凯虹广场</code>，买了一包薯片回酒店，7点多就没公交回我住的穷乡僻廊，只能花了30多大洋打车回去，此刻心里就决定第二天要租一天车去<code>朱家尖</code>逛一圈。</p><p><br></p><h3 id="朱家尖"><a href="#朱家尖" class="headerlink" title="#朱家尖"></a><strong>#朱家尖</strong></h3><p><em>大阴天</em></p><p>有了第一天的经历，自然知道从自己住的地方到舟山另一头的朱家尖的距离有多远，不堵车估计出租车单程200大洋。中午，从定海区一路向东，第一站是南沙海滩景区，去那边的排档吃午饭，景区一个人就没进去，毕竟人山人海。因为交通管制，导致要从大青山盘山绕路，妥妥秋名山的感觉，途中拍到了不错的海滩和被云雾缭绕的大青山，值了油钱。</p><p><img src="/images/travel-zhoushan/travel-zhoushan-16.png" alt="舟山的两端"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-17.jpg" alt="租的老款马6"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-18.jpg" alt="海滩&amp;大青山1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-19.jpg" alt="海滩&amp;大青山2"></p><p><img src="/images/travel-zhoushan/travel-zhoushan-23.png" alt="海滩&amp;大青山 拍照的大概位置"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-20.jpg" alt="看不到底的店铺，看不完的人群2"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-22.jpg" alt="吃不完的海鲜3"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-21.jpg" alt="我的海鲜面 虾、隔离、🦑丝等等"></p><p>吃饱开车，本想继续探索南沙海滩的，毕竟进景点海滩，一路找<code>野生海滩</code>过过瘾的，可惜人实在太多，各个主要路口交通管制，一不小心开错，感觉再绕进景区估计很久，就打算去另一个地方<code>月岙大沙里沙滩</code>（到了才发现当天没有开放，美景请自行搜索了），途中又开错了路，经过了白山景区，看到了一个画有观音像的石壁。</p><blockquote><p>白山景区系观音文化苑所在地，印象普陀剧场为朱家尖最重要的景区之一，其间一座高114.9米的干丈崖上彩绘的一尊观音大立像壁画高69米，面积达2000平方米，被誉为“海上莫高窟”。</p></blockquote><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-24.jpg" alt="观音像"></p><p>又兜兜转转的乡间小路，来到了游客相对很少的月岙大沙里沙滩旁的一条沿海小路，很宽阔的江海外也没有什么特别的感觉吧，本想当场掉头回去，可惜车技不佳，只能一直往前开到一个相对比较宽阔的道路掉头，然后，就遇到了很有感觉的地方。</p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-25.jpg" alt="对面就是月岙大沙里沙滩了"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-26.jpg" alt="江海山1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-27.jpg" alt="江海山2"></p><p>从下面的地图你会发现，一个类似U形弯道的末尾，我把车调头，准备驶离的时候，眼前的小路和海景让我有种莫名的触景生情感，扭曲的小路如同自己的过往，很多事情曲折并不顺利，然而外面的世界又那么的壮阔美丽，想去了解想去看看想去感受，忍不住在车里听了几遍邓紫棋的<code>后会无期</code>。</p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-28.jpg" alt="小路和景色1"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-30.jpg" alt="小路和景色2"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-29.jpg" alt="小路和景色3"></p><p><img src="/images/travel-zhoushan/optimize/travel-zhoushan-31.jpg" alt="小路和景色4"></p><p><img src="/images/travel-zhoushan/travel-zhoushan-32.png" alt="小路和景色地图位置"></p><p>在夜色慢慢落下前离开了此地回到了舟山市区。第二天还了车，坐上大巴返回了上海。</p><h3 id="回首"><a href="#回首" class="headerlink" title="#回首"></a><strong>#回首</strong></h3><p>玩了3天，有坑，住的远、路不熟悉等等，正是这些才促使我看到了许多没有规划的风景，人生哪有那么多规划，学会接受和享受那些原本不属于你而又是你的风景吧。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;国庆一家三口分开旅行，各有自己的目的地，我选了舟山，离开上海不远，之前从来没有去过。一人的旅行自然应该惬意为主，打着走到哪算哪的政策主张，也给自己埋下不少的坑。&lt;/p&gt;
    
    </summary>
    
      <category term="travel" scheme="https://mlib.wang/categories/travel/"/>
    
    
  </entry>
  
  <entry>
    <title>Set A Flag</title>
    <link href="https://mlib.wang/2019/06/19/bec/"/>
    <id>https://mlib.wang/2019/06/19/bec/</id>
    <published>2019-06-19T05:30:00.000Z</published>
    <updated>2020-04-22T02:34:34.350Z</updated>
    
    <content type="html"><![CDATA[<h5 id="Practice-speaking-and-listening-pass-the-BEC-exam"><a href="#Practice-speaking-and-listening-pass-the-BEC-exam" class="headerlink" title="Practice speaking and listening, pass the BEC exam."></a>Practice speaking and listening, pass the BEC exam.</h5><p><img src="/images/bec/1.jpeg" alt="book1"><br><img src="/images/bec/2.jpeg" alt="book2"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h5 id=&quot;Practice-speaking-and-listening-pass-the-BEC-exam&quot;&gt;&lt;a href=&quot;#Practice-speaking-and-listening-pass-the-BEC-exam&quot; class=&quot;headerlink&quot; t
      
    
    </summary>
    
      <category term="work" scheme="https://mlib.wang/categories/work/"/>
    
    
  </entry>
  
  <entry>
    <title>Eggjs Boot</title>
    <link href="https://mlib.wang/2019/05/09/egg-boot/"/>
    <id>https://mlib.wang/2019/05/09/egg-boot/</id>
    <published>2019-05-09T07:01:08.568Z</published>
    <updated>2020-04-22T02:34:05.384Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="#Preface"></a><strong>#Preface</strong></h3><p>This article will introduce the boot of <a href="https://eggjs.org/" target="_blank" rel="noopener">Eggjs</a> that is a Node.js web framework.</p><p>It is based on Koa and can satisfy  your requirement through a large of plugins and middleware, even a your own framework. It is very important to create a cluster, an agent process and some worker processes when it is running. The cluster makes it stronger. Next, we can understand it by reading the source code.</p><p>Eggjs has a few major libs, egg-core、egg、egg-cluster、egg-bin、egg-scripts and so on.</p><p><strong>egg-core</strong>: it extends Koa and is as a parent object of every agent and worker.</p><p><strong>egg</strong>: it defines some actions for agent and worker,  you can almost use these actions to create an app of a single process.</p><p><strong>egg-cluster</strong>: it creates a cluster and manages them.</p><p><strong>egg-scripts and Egg-bin</strong>: their job is run the whole app in a different environment.</p><p><br></p><p><em><strong>Tips: We will discuss Eggjs with basing 2.x.x version.</strong></em></p><p><br></p><a id="more"></a><h2 id="Scan-Libs-Code"><a href="#Scan-Libs-Code" class="headerlink" title="#Scan Libs Code"></a><strong>#Scan Libs Code</strong></h2><p><em>* The directory and the code segment are not whole content after this post, these major are only for a better explanation.</em></p><h3 id="egg-core"><a href="#egg-core" class="headerlink" title="egg-core"></a><strong>egg-core</strong></h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">— lib</span><br><span class="line">  — / loader (dir)</span><br><span class="line">  — mixin (dir)</span><br><span class="line">  — utils (dir)</span><br><span class="line">  egg.js</span><br><span class="line">  lifecycle.js</span><br></pre></td></tr></table></figure><p>The above is the directory structure of egg-core.The <em><strong>egg.js</strong></em> and folder of the <em><strong>loader</strong></em> are important to point for this lib.</p><p>See egg.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> KoaApplication = <span class="hljs-built_in">require</span>(<span class="hljs-string">'koa'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Lifecycle = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./lifecycle'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EggCore</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">KoaApplication</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.lifecycle = <span class="hljs-keyword">new</span> Lifecycle(&#123;</span><br><span class="line">      baseDir: options.baseDir,</span><br><span class="line">      app: <span class="hljs-keyword">this</span>,</span><br><span class="line">      logger: <span class="hljs-keyword">this</span>.console</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> Loader = <span class="hljs-keyword">this</span>[EGG_LOADER]</span><br><span class="line">    assert(Loader, <span class="hljs-string">"Symbol.for('egg#loader') is required"</span>)</span><br><span class="line">    <span class="hljs-keyword">this</span>.loader = <span class="hljs-keyword">new</span> Loader(&#123;</span><br><span class="line">      baseDir: options.baseDir,</span><br><span class="line">      app: <span class="hljs-keyword">this</span>,</span><br><span class="line">      plugins: options.plugins,</span><br><span class="line">      logger: <span class="hljs-keyword">this</span>.console,</span><br><span class="line">      serverScope: options.serverScope,</span><br><span class="line">      env: options.env</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">  beforeStart(scope) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.lifecycle.registerBeforeStart(scope)</span><br><span class="line">  &#125;</span><br><span class="line">  ready(flagOrFunction) &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.lifecycle.ready(flagOrFunction)</span><br><span class="line">  &#125;</span><br><span class="line">  get [EGG_LOADER]() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> <span class="hljs-built_in">require</span>(<span class="hljs-string">'./loader/egg_loader'</span>)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>First, we can know why it is called that bases on Koa because EggCore extends KoaApplication.</p><p>Second, it defines a few new fields in the construction function, such as <em>lifecycle</em> and <em>loader</em>. The <em>loader</em> field helps app for creating important feature include config、plugin、controller、extend、router、middleware、service and so on, it will load some js file in the special directory when the app is starting.</p><p>Another side, both <em>beforeStart</em> and <em>ready</em> often are called when we need to write some plugins.</p><h3 id="egg"><a href="#egg" class="headerlink" title="egg"></a><strong>egg</strong></h3><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">— / app</span><br><span class="line">— / config</span><br><span class="line">— / lib</span><br><span class="line">  - / core</span><br><span class="line">    - / messenger</span><br><span class="line">  - / jsdoc</span><br><span class="line">  - / loader</span><br><span class="line">  - agent.js</span><br><span class="line">  - application.js</span><br><span class="line">  - egg.js</span><br><span class="line">  - start.js</span><br><span class="line">- index.js</span><br></pre></td></tr></table></figure><p>There is an egg.js file that is the same name in the egg-core, but it bases on <em>EggCore Class</em> and extends the lifecycle field, creates new messenger field and cluster field and dumps app config info.</p><p>See egg.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-keyword">const</span> EggCore = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg-core'</span>).EggCore</span><br><span class="line"><span class="hljs-keyword">const</span> cluster = <span class="hljs-built_in">require</span>(<span class="hljs-string">'cluster-client'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Messenger = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./core/messenger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">EggApplication</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EggCore</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.loader.loadConfig()</span><br><span class="line">    <span class="hljs-keyword">this</span>.messenger = Messenger.create(<span class="hljs-keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// trigger serverDidReady hook when all app workers</span></span><br><span class="line">    <span class="hljs-comment">// and agent worker is ready</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.messenger.once(<span class="hljs-string">'egg-ready'</span>, () =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.lifecycle.triggerServerDidReady()</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.ready(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span></span><br><span class="line">      process.nextTick(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="hljs-keyword">const</span> dumpStartTime = <span class="hljs-built_in">Date</span>.now()</span><br><span class="line">        <span class="hljs-keyword">this</span>.dumpConfig()</span><br><span class="line">        <span class="hljs-keyword">this</span>.dumpTiming()</span><br><span class="line">        <span class="hljs-keyword">this</span>.coreLogger.info(</span><br><span class="line">          <span class="hljs-string">'[egg:core] dump config after ready, %s'</span>,</span><br><span class="line">          ms(<span class="hljs-built_in">Date</span>.now() - dumpStartTime)</span><br><span class="line">        )</span><br><span class="line">      &#125;)</span><br><span class="line">    )</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.cluster = <span class="hljs-function">(<span class="hljs-params">clientClass, options</span>) =&gt;</span> &#123;</span><br><span class="line">      options = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, <span class="hljs-keyword">this</span>.config.clusterClient, options, &#123;</span><br><span class="line">        singleMode: <span class="hljs-keyword">this</span>.options.mode === <span class="hljs-string">'single'</span>,</span><br><span class="line">        <span class="hljs-comment">// cluster need a port that can't conflict on the environment</span></span><br><span class="line">        port: <span class="hljs-keyword">this</span>.options.clusterPort,</span><br><span class="line">        <span class="hljs-comment">// agent worker is leader, app workers are follower</span></span><br><span class="line">        isLeader: <span class="hljs-keyword">this</span>.type === <span class="hljs-string">'agent'</span>,</span><br><span class="line">        logger: <span class="hljs-keyword">this</span>.coreLogger</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="hljs-keyword">const</span> client = cluster(clientClass, options)</span><br><span class="line">      <span class="hljs-keyword">this</span>._patchClusterClient(client)</span><br><span class="line">      <span class="hljs-keyword">return</span> client</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>See agent.js and application.js</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// agent.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> EggApplication = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./egg'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> AgentWorkerLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./loader'</span>).AgentWorkerLoader</span><br><span class="line"><span class="hljs-keyword">const</span> EGG_LOADER = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">'egg#loader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Agent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EggApplication</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    options.type = <span class="hljs-string">'agent'</span></span><br><span class="line">    <span class="hljs-keyword">super</span>(options)</span><br><span class="line">    <span class="hljs-keyword">this</span>.loader.load()</span><br><span class="line">  &#125;</span><br><span class="line">  get [EGG_LOADER]() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> AgentWorkerLoader</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// application.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> EggApplication = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./egg'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> AgentWorkerLoader = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./loader'</span>).AppWorkerLoader</span><br><span class="line"><span class="hljs-keyword">const</span> EGG_LOADER = <span class="hljs-built_in">Symbol</span>.for(<span class="hljs-string">'egg#loader'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EggApplication</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options = &#123;&#125;) &#123;</span><br><span class="line">    options.type = <span class="hljs-string">'application'</span></span><br><span class="line">    <span class="hljs-keyword">super</span>(options)</span><br><span class="line">    <span class="hljs-keyword">this</span>.loader.load()</span><br><span class="line">  &#125;</span><br><span class="line">  get [EGG_LOADER]() &#123;</span><br><span class="line">    <span class="hljs-keyword">return</span> AppWorkerLoader</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>We can see that they override the _EGG_LOADER_ property, which uses to create a new <em>loader</em> field in the construction of EggCore that is their parent class. Finally, they call the <em>load</em> function.</p><p>We have the base application code. rNext, look a few of libs for starting web app.</p><h3 id="egg-scripts-and-egg-bin"><a href="#egg-scripts-and-egg-bin" class="headerlink" title="egg-scripts and egg-bin"></a><strong>egg-scripts and egg-bin</strong></h3><p>Both these libs start the web app in a different environment. Egg-scripts is easier and more clear, uses the production environment. Egg-bin has much code for helping debug, dev, test and so on, we usually use it in the dev, debug or test environment. We almost don’t know them at most of time.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// package.json</span></span><br><span class="line">&#123;</span><br><span class="line">  <span class="hljs-string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="hljs-string">"start"</span>: <span class="hljs-string">"env egg-scripts start"</span>,</span><br><span class="line">    <span class="hljs-string">"dev"</span>: <span class="hljs-string">"env egg-bin dev"</span>,</span><br><span class="line">    <span class="hljs-string">"stop"</span>: <span class="hljs-string">"egg-scripts stop"</span>,</span><br><span class="line">    <span class="hljs-string">"debug"</span>: <span class="hljs-string">"egg-bin debug"</span>,</span><br><span class="line">    <span class="hljs-string">"test"</span>: <span class="hljs-string">"npm run lint -- --fix &amp;&amp; npm run test-local"</span>,</span><br><span class="line">    <span class="hljs-string">"test-local"</span>: <span class="hljs-string">"env egg-bin test"</span>,</span><br><span class="line">    <span class="hljs-string">"cov"</span>: <span class="hljs-string">"egg-bin cov"</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>The <em>scripts</em> command of this eggjs app conforms to the above description.</p><h3 id="egg-cluster"><a href="#egg-cluster" class="headerlink" title="egg-cluster"></a><strong>egg-cluster</strong></h3><p>The cluster is an important feature for Eggjs. This lib is a bridge for connecting one single agent process and many workers processes. It like a manager.</p><figure class="highlight plain hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- / lib</span><br><span class="line">  - / utils</span><br><span class="line">  - agent_worker.js</span><br><span class="line">  - app_worker.js</span><br><span class="line">  - master.js</span><br><span class="line">- index.js</span><br></pre></td></tr></table></figure><p>I had written an <a href="/2019/01/18/egg-cluster">article</a> about egg-cluster in Chinese. I always think this is the core of Eggjs, so I will explain the whole Eggjs framework around it.</p><h2 id="From-start-to-getting-the-first-request"><a href="#From-start-to-getting-the-first-request" class="headerlink" title="#From start to getting the first request"></a><strong>#From start to getting the first request</strong></h2><p><strong>What happens when we input <code>npm run dev</code> or <code>npm start</code> in the terminal?</strong></p><ul><li><strong>egg-scripts(prod):</strong> it can require <em>framework</em> by <code>child_process.spawn</code> and calls <em>startCluster</em> function.</li><li><strong>egg-bin(dev):</strong> it can require <em>framework</em> by <code>child_process.fork</code> and calls <em>startCluster</em> function.</li><li><code>[parent process]</code>: The command of running is in one process called the parent process. The system will create a new process called the master process when the parent process requires a framework.As usual, the <code>framework</code> is the file path of Eggjs.If you want to use a custom framework, you can add a param in the command, such as <code>--framework { your path }</code></li></ul><p><strong>Pseudo Code</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg-scripts</span></span><br><span class="line"><span class="hljs-comment">// parent process</span></span><br><span class="line"><span class="hljs-keyword">const</span> spawn = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>).spawn <span class="hljs-comment">// create new process</span></span><br><span class="line">spawn(<span class="hljs-string">'node'</span>, <span class="hljs-string">'require(&#123;&#123; framework path &#125;&#125;).startCluster(...)'</span>, options))</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// egg-bin</span></span><br><span class="line"><span class="hljs-comment">// parent process</span></span><br><span class="line"><span class="hljs-keyword">const</span> cp = <span class="hljs-built_in">require</span>(<span class="hljs-string">'child_process'</span>)</span><br><span class="line">cp.fork(<span class="hljs-string">'require(&#123;&#123; framework path &#125;&#125;).startCluster(...)'</span>, args, options) <span class="hljs-comment">// create new process</span></span><br></pre></td></tr></table></figure><p>Egg-scripts uses <code>spawn</code> function to require framework while egg-scripts calls <code>fork</code> function.The latter is a special case of the former. Egg-bin has more code than egg-scripts, these features help us for developing or debug the app.</p><p>We have two processes. In general, this newly created process is called the master process.</p><p><strong>Why is the master process called birdge?</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// egg index.js</span></span><br><span class="line">exports.startCluster = <span class="hljs-built_in">require</span>(<span class="hljs-string">'egg-cluster'</span>).startCluster</span><br></pre></td></tr></table></figure><p>Actually, we exec <code>egg-cluster</code>‘s startCluster function when we require the framework. We open <code>index.js</code> file in the egg-cluster lib. </p><p><strong>First, it is real enter point for whole web app.</strong></p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// index.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> Master = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./lib/master'</span>)</span><br><span class="line">exports.startCluster = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params">options, callback</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">new</span> Master(options).ready(callback)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// ./lib/master.js</span></span><br><span class="line"><span class="hljs-keyword">const</span> ready = <span class="hljs-built_in">require</span>(<span class="hljs-string">'get-ready'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> detectPort = <span class="hljs-built_in">require</span>(<span class="hljs-string">'detect-port'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Manager = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./utils/manager'</span>)</span><br><span class="line"><span class="hljs-keyword">const</span> Messenger = <span class="hljs-built_in">require</span>(<span class="hljs-string">'./utils/messenger'</span>)</span><br><span class="line"></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Master</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EventEmitter</span> </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">constructor</span>(options) &#123;</span><br><span class="line">    <span class="hljs-keyword">super</span>()</span><br><span class="line">    <span class="hljs-keyword">this</span>.options = parseOptions(options)</span><br><span class="line">    <span class="hljs-keyword">this</span>.workerManager = <span class="hljs-keyword">new</span> Manager()</span><br><span class="line">    <span class="hljs-keyword">this</span>.messenger = <span class="hljs-keyword">new</span> Messenger(<span class="hljs-keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    ready.mixin(<span class="hljs-keyword">this</span>)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">this</span>.ready(<span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">this</span>.isStarted = <span class="hljs-literal">true</span></span><br><span class="line">      <span class="hljs-keyword">const</span> action = <span class="hljs-string">'egg-ready'</span></span><br><span class="line">      <span class="hljs-keyword">this</span>.messenger.send(&#123;</span><br><span class="line">        action,</span><br><span class="line">        to: <span class="hljs-string">'parent'</span>,</span><br><span class="line">        data: &#123; <span class="hljs-attr">port</span>: <span class="hljs-keyword">this</span>[REALPORT], <span class="hljs-attr">address</span>: <span class="hljs-keyword">this</span>[APP_ADDRESS] &#125;</span><br><span class="line">      &#125;)</span><br><span class="line">      <span class="hljs-keyword">this</span>.messenger.send(&#123; action, <span class="hljs-attr">to</span>: <span class="hljs-string">'app'</span>, <span class="hljs-attr">data</span>: <span class="hljs-keyword">this</span>.options &#125;)</span><br><span class="line">      <span class="hljs-keyword">this</span>.messenger.send(&#123; action, <span class="hljs-attr">to</span>: <span class="hljs-string">'agent'</span>, <span class="hljs-attr">data</span>: <span class="hljs-keyword">this</span>.options &#125;)</span><br><span class="line"></span><br><span class="line">      <span class="hljs-comment">// start check agent and worker status</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.isProduction) &#123;</span><br><span class="line">        <span class="hljs-keyword">this</span>.workerManager.startCheck()</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">    <span class="hljs-comment">// fork app workers after agent started</span></span><br><span class="line">    <span class="hljs-keyword">this</span>.once(<span class="hljs-string">'agent-start'</span>, <span class="hljs-keyword">this</span>.forkAppWorkers.bind(<span class="hljs-keyword">this</span>))</span><br><span class="line"></span><br><span class="line">    detectPort(<span class="hljs-function">(<span class="hljs-params">err, port</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-comment">/* istanbul ignore if */</span></span><br><span class="line">      <span class="hljs-keyword">if</span> (err) &#123;</span><br><span class="line">        err.name = <span class="hljs-string">'ClusterPortConflictError'</span></span><br><span class="line">        err.message = <span class="hljs-string">'[master] try get free port error, '</span> + err.message</span><br><span class="line">        <span class="hljs-keyword">this</span>.logger.error(err)</span><br><span class="line">        process.exit(<span class="hljs-number">1</span>)</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="hljs-keyword">this</span>.options.clusterPort = port</span><br><span class="line">      <span class="hljs-keyword">this</span>.forkAgentWorker()</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  forkAppWorkers() &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    cluster.on(<span class="hljs-string">'fork'</span>, worker =&gt; &#123;</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">      worker.on(<span class="hljs-string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">'string'</span>) msg = &#123; <span class="hljs-attr">action</span>: msg, <span class="hljs-attr">data</span>: msg &#125;;</span><br><span class="line">        msg.from = <span class="hljs-string">'app'</span>;</span><br><span class="line">        <span class="hljs-keyword">this</span>.messenger.send(msg);</span><br><span class="line">      &#125;);</span><br><span class="line">      <span class="hljs-comment">// ...</span></span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  forkAgentWorker() &#123;</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">    agentWorker.on(<span class="hljs-string">'message'</span>, msg =&gt; &#123;</span><br><span class="line">      <span class="hljs-keyword">if</span> (<span class="hljs-keyword">typeof</span> msg === <span class="hljs-string">'string'</span>) msg = &#123; <span class="hljs-attr">action</span>: msg, <span class="hljs-attr">data</span>: msg &#125;;</span><br><span class="line">      msg.from = <span class="hljs-string">'agent'</span>;</span><br><span class="line">      <span class="hljs-keyword">this</span>.messenger.send(msg);</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="hljs-comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// the callback of ready function will be trigger after all major boots had been loaded</span></span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// forkAgentWorker</span></span><br><span class="line"><span class="hljs-keyword">const</span> agent = <span class="hljs-keyword">new</span> Agent(options)</span><br><span class="line">agent.ready(<span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="hljs-keyword">if</span> (err) <span class="hljs-keyword">return</span></span><br><span class="line">  process.send(&#123; <span class="hljs-attr">action</span>: <span class="hljs-string">'agent-start'</span>, <span class="hljs-attr">to</span>: <span class="hljs-string">'master'</span> &#125;)</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// fork a single worker</span></span><br><span class="line"><span class="hljs-keyword">const</span> app = <span class="hljs-keyword">new</span> Application(options);</span><br><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">startServer</span>(<span class="hljs-params">err</span>) </span>&#123;  </span><br><span class="line">  <span class="hljs-keyword">let</span> server;</span><br><span class="line">  <span class="hljs-keyword">if</span> (options.https) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> httpsOptions = <span class="hljs-built_in">Object</span>.assign(&#123;&#125;, options.https, &#123;</span><br><span class="line">      key: fs.readFileSync(options.https.key),</span><br><span class="line">      cert: fs.readFileSync(options.https.cert),</span><br><span class="line">    &#125;);</span><br><span class="line">    server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'https'</span>).createServer(httpsOptions, app.callback());</span><br><span class="line">  &#125; <span class="hljs-keyword">else</span> &#123;</span><br><span class="line">    server = <span class="hljs-built_in">require</span>(<span class="hljs-string">'http'</span>).createServer(app.callback());</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="hljs-comment">// emit `server` event in app</span></span><br><span class="line">  app.emit(<span class="hljs-string">'server'</span>, server);</span><br><span class="line">  </span><br><span class="line">  server.listen(...args);</span><br><span class="line">&#125;</span><br><span class="line">app.ready(startServer);</span><br></pre></td></tr></table></figure><p>On the other hand, this web will be constructed during creating a <code>Master</code> object.</p><ul><li>workerManager: it will hold on all worker porcesses.</li><li>messenger: we make <code>master</code> a transit station that helps process for communicating (IPC). If you read more code, you can get it. I have said above that it is a bridge. I have write an <a href="[http://localhost:4000/2019/01/18/egg-cluster/#Agent-Works%E6%80%8E%E4%B9%88%E9%80%9A%E4%BF%A1%E5%91%A2-IPC](http://localhost:4000/2019/01/18/egg-cluster/#Agent-Works怎么通信呢-IPC">article(Chinese)</a>) about it.</li></ul><blockquote><ul><li>The Master maintains a Messenger instance (egg-cluster/lib/utils/messenger.js)</li><li>EggApplication maintain the other Messenge instance （egg/lib/core/messenger.js）</li><li>Both the agent and worker process base on EggApplication, them can send info to the master process creating them when calling Messenger. The master process is according to entering params to transmit to the agent or worker, you read forkAppWorkers and forkAgentWorker function in the master</li></ul></blockquote><ul><li><p>ready.mixin &amp; this.ready: ‘get-ready’ often is used by the official when an object need trigger a few callbacks after it whole initializes. Here it will broadcast an event to the parent, workers and then agent process, telling them that I am ok.</p></li><li><p>detectPort: apply for an available port, default is 7001.If Successly, it will <code>fork</code> an agent process and register a callback message for new created an agent object.</p></li><li><p><code>[agent process]</code>: create new Agent and run loadPlugin, loadConfig, loadAgentExtend, loadContextExtend, and loadCustomAgent.</p><ul><li><p>loadPlugin: find all plugin, record their dir paths =&gt; this.dirs</p></li><li><p>loadConfig: merge all config, the config content of the app level is more priority than the framework and the latter is more priority than the plugin.</p></li><li>loadAgentExtend: load and merge all of the extending of agent object  (<em>app &gt; plugin &gt; core</em>)</li><li>loadContextExtend: load and merge all of the extending of context object  (<em>app &gt; plugin &gt; core</em>)</li><li>loadCustomAgent: it is important that the lifecycle of app boot will be serially triggered. This lifecycle field is defined in EggCore constructor, we can look at the whole process in the yellow background under the image.【<a href="https://eggjs.org/en/basics/app-start.html" target="_blank" rel="noopener">Application Startup Configuration(official)</a>】. It help you for better writing a few plugins.</li><li>Last, all major boots had been loaded, the agent process will trigger function registered in the callback array, such as sending <code>&#39;agent-start&#39;</code> to the master process.</li></ul></li></ul><p><img src="/images/egg-boot/egg-boot.jpg" alt="egg boot process"></p><ul><li><p><code>[master process]</code>: start to fork a few worker processes in accordance with specifying or using the default being CPU kernel count after the master process get <code>&#39;agent-start&#39;</code> message from the agent process. It will open a new relatable load, we take a single worker process example.</p></li><li><p><code>[a single worker process]</code>: create new Agent and run loadPlugin, loadConfig, loadApplicationExtend, loadRequestExtend, loadResponseExtend, loadContextExtend, loadHelperExtend, loadCustomApp, loadService, loadMiddleware, loadController, loadRouter, and loadCustomLoader.</p><ul><li><p>loadPlugin: same as the agent</p></li><li><p>loadConfig: same as the agent</p></li><li><p>loadApplicationExtend: same as the agent  (<em>app &gt; plugin &gt; core</em>)</p></li><li><p>loadRequestExtend: load and merge all of the extending of request object (<em>app &gt; plugin &gt; core</em>)</p></li><li><p>loadResponseExtend: load and merge all of the extending of response object (<em>app &gt; plugin &gt; core</em>)</p></li><li><p>loadContextExtend: same as the agent</p></li><li><p>loadHelperExtend: load and merge all of the extending of helper object (<em>app &gt; plugin &gt; core</em>)</p></li><li><p>loadCustomApp: same as the agent （<em>app &gt; plugin</em>）</p></li><li><p>loadService: load and merge all of the extending of helper object （<em>app &gt; plugin</em>）</p></li><li><p>loadMiddleware: load middlewares and iterate them =&gt; mw, if it conforms the middleware standard, it will be used with app.use(mw) （<em>app &gt; plugin &gt; core</em>）</p></li><li><p>loadController: iterate all controllers’ functions =&gt; key, wrap a function, make it be a middleware function and is bound to controller.xxx.xxx (only <em>app</em>). This middleware will be triggered when getting a new request, the Controller is defined in the <code>app/controller</code> directory and the key is it’s function.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">methodToMiddleware</span>(<span class="hljs-params">Controller, key</span>) </span>&#123;</span><br><span class="line">  <span class="hljs-keyword">return</span> <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">classControllerMiddleware</span>(<span class="hljs-params">...args</span>) </span>&#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> controller = <span class="hljs-keyword">new</span> Controller(<span class="hljs-keyword">this</span>);</span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.app.config.controller || !<span class="hljs-keyword">this</span>.app.config.controller.supportParams) &#123;</span><br><span class="line">      args = [ <span class="hljs-keyword">this</span> ];</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="hljs-keyword">return</span> utils.callFn(controller[key], args, controller);</span><br><span class="line">  &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul></li></ul><ul><li><p>loadRouter: it makes request’s path associated with the controllers’ function that has been become to middleware (only <em>app</em>)</p></li><li><p>loadCustomLoader: load ourselves function to create some built-in objects for app object or other.<a href="https://eggjs.org/en/advanced/loader.html#customloader" target="_blank" rel="noopener">Customloader</a></p></li></ul><ul><li><code>[master process]</code>: it listens to all worker processes and triggers the master’s ready once they have finished booting.</li><li>send <code>egg-ready</code> to the parent process, the agent process, the app worker processes</li><li>Last, traverse BOOTS and run serverDidReady function of each item.</li></ul><p>It is the whole boot for Eggjs framework but doesn’t include, such as restarting a worker process when it exits or disconnects,  shuting down…</p><p><strong>Second, every process is alone if we have not the master. It like a bridge organizing all island, from creation to IPC.</strong></p><p><strong>What happens when web app get an Http request?</strong></p><p><em>We only discuss Eggjs code in the applaction layer. :)</em></p><p>The <code>agent</code> can’t deal with any request because it doesn’t listen port. All request always hand over to <code>workers</code>. We look at creating worker code, it will run a app.callback function and listen port when it has booted.</p><p>This callback is the members of Appliaction in Koa. If server get new request, it will create a new context and handle it. In Eggjs, this handleRequest function has been overwrited. Last, the framework will iterate over all middleware under the current route including the converted controller’s function.</p><figure class="highlight javascript hljs"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="hljs-comment">// koa/lib/application</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Emitter</span> </span>&#123;</span><br><span class="line">  callback() &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> fn = compose(<span class="hljs-keyword">this</span>.middleware);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">if</span> (!<span class="hljs-keyword">this</span>.listenerCount(<span class="hljs-string">'error'</span>)) <span class="hljs-keyword">this</span>.on(<span class="hljs-string">'error'</span>, <span class="hljs-keyword">this</span>.onerror);</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">const</span> handleRequest = <span class="hljs-function">(<span class="hljs-params">req, res</span>) =&gt;</span> &#123;</span><br><span class="line">      <span class="hljs-keyword">const</span> ctx = <span class="hljs-keyword">this</span>.createContext(req, res);</span><br><span class="line">      <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>.handleRequest(ctx, fn);</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="hljs-keyword">return</span> handleRequest;</span><br><span class="line">  &#125;</span><br><span class="line">  handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">    <span class="hljs-keyword">const</span> res = ctx.res;</span><br><span class="line">    res.statusCode = <span class="hljs-number">404</span>;</span><br><span class="line">    <span class="hljs-keyword">const</span> onerror = <span class="hljs-function"><span class="hljs-params">err</span> =&gt;</span> ctx.onerror(err);</span><br><span class="line">    <span class="hljs-keyword">const</span> handleResponse = <span class="hljs-function"><span class="hljs-params">()</span> =&gt;</span> respond(ctx);</span><br><span class="line">    onFinished(res, onerror);</span><br><span class="line">    <span class="hljs-keyword">return</span> fnMiddleware(ctx).then(handleResponse).catch(onerror);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="hljs-comment">// egg/lib/application</span></span><br><span class="line"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Application</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">EggApplication</span> </span>&#123;</span><br><span class="line">handleRequest(ctx, fnMiddleware) &#123;</span><br><span class="line">    <span class="hljs-keyword">this</span>.emit(<span class="hljs-string">'request'</span>, ctx)</span><br><span class="line">    <span class="hljs-keyword">super</span>.handleRequest(ctx, fnMiddleware)</span><br><span class="line">    onFinished(ctx.res, () =&gt; <span class="hljs-keyword">this</span>.emit(<span class="hljs-string">'response'</span>, ctx))</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>In summary, we have know how to boot web app and deal with request in Eggjs.</strong> When we know it, we can easily write some plugins and middlewares to finish the business requirements.</p>]]></content>
    
    <summary type="html">
    
      This article will introduce the boot of Eggjs that is a Node.js web framework.It is based on Koa and can satisfy  your requirement through a large of plugins and middleware, even a your own framework. It is very important to create a cluster, an agent process and some worker processes when it is running. The cluster makes it stronger. Next, we can understand it by reading the source code.
    
    </summary>
    
      <category term="JavaScript" scheme="https://mlib.wang/categories/JavaScript/"/>
    
    
      <category term="Node.js" scheme="https://mlib.wang/tags/Node-js/"/>
    
      <category term="JavaScript" scheme="https://mlib.wang/tags/JavaScript/"/>
    
  </entry>
  
</feed>
